format_version: 1.3.1
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

app:
  envs:
  - BIN_NAME: workflow-editor
  - BIN_ARCH: x86_64
  - BIN_OS_DARWIN: Darwin
  - BIN_OS_LINUX: Linux
  - BIN_PATH_DARWIN: _bin/$BIN_NAME-$BIN_OS_DARWIN-$BIN_ARCH
  - BIN_PATH_LINUX: _bin/$BIN_NAME-$BIN_OS_LINUX-$BIN_ARCH

  - PORT: "1234"
  - DEV_SERVER_PORT: "4567"
  - MODE: "CLI"

workflows:
  up-api:
    envs:
      - BITRISE_CONFIG: "$TEST_BITRISE_CONFIG_PATH"
      - BITRISE_SECRETS: "$TEST_BITRISE_SECRETS_PATH"
      - USE_DEV_SERVER: "true"
    steps:
    - change-workdir@1.0.2:
        inputs:
        - path: $GOPATH/src/github.com/bitrise-io/bitrise-workflow-editor
    - script:
        inputs:
        - content: |
            #!/bin/bash
            set -ex
            gin --immediate --appPort=$PORT

  setup-client:
    steps:
    - script:
        title: Install NPM and Bundler
        deps:
          apt_get:
          - name: ruby
          - name: ruby-dev
          - name: build-essential
          - name: nodejs
          # for cypress
          - name: xvfb
          - name: libgtk2.0-0
          - name: libgtk-3-0
          - name: libgconf-2-4
          - name: libnss3
          - name: libxss1
          - name: libasound2
          - name: libxtst6
        inputs:
        - content: |
            #!/bin/bash
            set -ex
            gem install -f bundler:2.1.4
            bundle install
            npm install
    - script:
        title: Build client
        inputs:
        - content: "npm run build"

  up:
    steps:
    - script:
        inputs:
        - content: |
            #!/bin/bash
            set -ex
            ./_scripts/forkpty-run.sh docker-sync-stack start
  setup:
    steps:
    - script:
        inputs:
        - content: |
            #!/bin/bash
            set -ex
            docker-sync clean
            docker-sync start
            docker-sync stop

            docker-compose kill
            docker-compose rm -f -v
            docker-compose build

  ci:
    envs:
      - NODE_ENV: "prod"
    before_run:
    - _install_test_tools
    - test-api
    - test-client

  go-install:
    before_run:
    - assets-precompile
    steps:
    - script:
        inputs:
        - content: |
            #!/bin/bash
            set -ex
            go install

  dep-update:
    title: Dep update
    description: |
      Used for updating bitrise dependencies with dep
    steps:
    - script:
        title: Dependency update
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            go get -u -v github.com/golang/dep/cmd/dep
            dep ensure -v
            dep ensure -v -update

  deps-update:
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            rm -rf ./vendor
            rm -rf ./Godeps
            go get -u github.com/tools/godep
            godep version
            go get -t -d ./...
            go get golang.org/x/sys/unix
            go get github.com/bitrise-io/envman/models
            go get github.com/bitrise-io/stepman/models
            go get github.com/ryanuber/go-glob
            go get github.com/davecgh/go-spew/spew
            go get github.com/pmezard/go-difflib/difflib
            go get github.com/inconshreveable/mousetrap
            godep save ./...

  assets-precompile:
    before_run:
    - setup-client
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            DIST=./apiserver/www/
            go get github.com/GeertJohan/go.rice/rice

            mkdir -p $DIST
            cp -rf ./build/* $DIST

            cd ./apiserver
            rice embed-go

  _install_test_tools:
    steps:
    - script:
        title: Install required testing tools
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            # Check for unhandled errors
            go get -u github.com/kisielk/errcheck
            # Go lint
            go get -u golang.org/x/lint/golint

  test-client:
    envs:
      - NODE_ENV: "prod"
    before_run:
      - create-binaries
    steps:
    - script:
        title: Unit tests
        inputs:
        - content: npm run karma
    - script:
        title: E2E tests
        inputs:
        - content: npm run e2e-ci

  test-api:
    steps:
    - script:
        title: GOLIST_WITHOUT_VENDOR
        inputs:
        - content: |-
            set -ex
            no_vendor_paths="$(go list ./... | grep -v vendor)"
            envman add --key GOLIST_WITHOUT_VENDOR --value "$no_vendor_paths"
          opts:
            # opts, for bitrise.yml parsing test in the workflow editor
            is_expand: true
            title: The Script Content - test title
            is_required: true
            is_dont_change_value: false
    - script:
        title: Go Test
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            # go test $GOLIST_WITHOUT_VENDOR
            go test ./...
    - script:
        title: Go Vet
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            go vet $GOLIST_WITHOUT_VENDOR
    - script:
        title: Err check
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            errcheck -asserts=true -blank=true $GOLIST_WITHOUT_VENDOR
    - script:
        title: Go Lint
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            # lint
            while read -r line; do
              golint -set_exit_status $line
            done <<< "$GOLIST_WITHOUT_VENDOR"

  create-binaries:
    title: Create binaries
    description: |
        Creates Linux and Darwin binaries
    envs:
      - NODE_ENV: "prod"
    before_run:
    - assets-precompile
    steps:
    - script:
        title: Create binaries
        inputs:
        - content: |
            #!/bin/bash
            set -ex

            echo
            echo "Create final binaries"
            echo "  Build number: $BITRISE_BUILD_NUMBER"

            export GOARCH=amd64

            # Create Darwin bin
            export GOOS=darwin

            echo "  Create final Darwin binary at: $BIN_PATH_DARWIN"

            version_package="github.com/bitrise-io/bitrise-workflow-editor/version"

            go build \
              -ldflags "-X $version_package.BuildNumber=$BITRISE_BUILD_NUMBER -X $version_package.Commit=$GIT_CLONE_COMMIT_HASH" \
              -o "$BIN_PATH_DARWIN"

            cp $BIN_PATH_DARWIN $BITRISE_DEPLOY_DIR/$BIN_NAME-$BIN_OS_DARWIN-$BIN_ARCH
            echo "  Copy final Darwin binary to: $BITRISE_DEPLOY_DIR/$BIN_NAME-$BIN_OS_DARWIN-$BIN_ARCH"


            # Create Linux binary
            export GOOS=linux

            echo "  Create final Linux binary at: $BIN_PATH_LINUX"

            go build \
              -ldflags "-X $version_package.BuildNumber=$BITRISE_BUILD_NUMBER -X $version_package.Commit=$GIT_CLONE_COMMIT_HASH" \
              -o "$BIN_PATH_LINUX"

            cp $BIN_PATH_LINUX $BITRISE_DEPLOY_DIR/$BIN_NAME-$BIN_OS_LINUX-$BIN_ARCH
            echo "  Copy final Linux binary to: $BITRISE_DEPLOY_DIR/$BIN_NAME-$BIN_OS_LINUX-$BIN_ARCH"
