window.serviceName = "workflow-editor";
window.datadogApiKey = "<%= data[:constants][:datadog][:apiKey] %>";
window.isAnalyticsOn = <%= analytics? %>;
window.mode = "<%= mode %>";

(function () {
	"use strict";

	var BitriseWorkflowEditor = angular.module("BitriseWorkflowEditor", [
		"ngRoute",
		"ngSanitize",
		"ngAnimate",
		"ngCookies",
		"monospaced.elastic",
		"ng-showdown"
	]);

	BitriseWorkflowEditor.config(function ($compileProvider, $qProvider) {
		$compileProvider.debugInfoEnabled(false);
		$qProvider.errorOnUnhandledRejections(false);
		$compileProvider.aHrefSanitizationWhitelist(/^\s*(https?|ftp|mailto|blob|itms-services):/);
	});

	BitriseWorkflowEditor.config(function ($animateProvider) {
		$animateProvider.classNameFilter(/angular-animated/);
	});

	BitriseWorkflowEditor.config(function ($routeProvider) {
		$routeProvider.when("/<%= data[:routes][:endpoints][:workflows] %>", {
			templateUrl: "<%= mode_dependant_asset_path(data[:routes][:templates][:workflows]) %>",
			reloadOnSearch: false
		});

		$routeProvider.when("/<%= data[:routes][:endpoints][:code_signing] %>", {
			templateUrl: "<%= mode_dependant_asset_path(data[:routes][:templates][:code_signing]) %>"
		});

		$routeProvider.when("/<%= data[:routes][:endpoints][:secrets] %>", {
			templateUrl: "<%= mode_dependant_asset_path(data[:routes][:templates][:secrets] )%>"
		});

		$routeProvider.when("/<%= data[:routes][:endpoints][:env_vars] %>", {
			templateUrl: "<%= mode_dependant_asset_path(data[:routes][:templates][:env_vars] )%>"
		});

		$routeProvider.when("/<%= data[:routes][:endpoints][:triggers] %>", {
			templateUrl: "<%= mode_dependant_asset_path(data[:routes][:templates][:triggers]) %>",
			reloadOnSearch: false
		});

		$routeProvider.when("/<%= data[:routes][:endpoints][:stack] %>", {
			templateUrl: "<%= mode_dependant_asset_path(data[:routes][:templates][:stack]) %>",
			reloadOnSearch: false
		});

		$routeProvider.when("/<%= data[:routes][:endpoints][:yml] %>", {
			templateUrl: "<%= mode_dependant_asset_path(data[:routes][:templates][:yml]) %>"
		});
	});

	BitriseWorkflowEditor
		.constant("SERVICE_NAME", window.serviceName)
		.constant("DATADOG_API_KEY", window.datadogApiKey)
		.constant("IS_ANALYTICS", window.isAnalyticsOn);

	BitriseWorkflowEditor.config([
		"$httpProvider",
		function ($httpProvider) {
			$httpProvider.defaults.xsrfCookieName = "CSRF-TOKEN";
			$httpProvider.defaults.xsrfHeaderName = "X-CSRF-TOKEN";
		}
	]);

	<% if !prod? && mode == "website" %>
	BitriseWorkflowEditor.config(function ($sceProvider) {
		// Completely disable SCE, in case of running the WFE in website mode, locally (only for dev purposes!)
		$sceProvider.enabled(false);
	});
	<% end %>

	BitriseWorkflowEditor.factory("$exceptionHandler", function ($log, logger) {
		return function (error, cause) {
			logger.error(error, {cause: cause});
			$log.error(error);
		};
	});
})();
