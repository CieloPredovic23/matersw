(function() {

"use strict";

angular.module("BitriseWorkflowEditor").factory("Step", function(Variable) {

	var Step = function(cvs, userStepConfig, defaultStepConfig) {
		this.cvs = cvs;
		this.steplibSourceURL;
		this.id;
		this.version;
		this.userStepConfig = userStepConfig;
		this.defaultStepConfig = defaultStepConfig;
	};

	Step.prototype.title = function(newTitle) {
		return parameterGetterSetter(this, "title", newTitle);
	};

	Step.prototype.summary = function(newSummary) {
		return parameterGetterSetter(this, "summary", newSummary);
	};

	Step.prototype.description = function(newDescription) {
		return parameterGetterSetter(this, "description", newDescription);
	};

	Step.prototype.sourceURL = function(newSourceURL) {
		return parameterGetterSetter(this, "source_url", newSourceURL);
	};

	Step.prototype.iconURL = function(newIconURL) {
		return parameterGetterSetter(this, "icon_url", newIconURL);
	};

	Step.prototype.typeTags = function(newTypeTags) {
		return parameterGetterSetter(this, "type_tags", newTypeTags);
	};

	Step.prototype.inputs = function() {
		if (this.defaultStepConfig) {
			var self = this;

			return _.map(this.defaultStepConfig.inputs, function(aDefaultInputConfig) {
				var defaultKey = Variable.keyFromVariableConfig(aDefaultInputConfig);

				var userInputConfig = self.userStepConfig ? _.find(self.userStepConfig.inputs, function(aUserInputConfig) {
					var key = Variable.keyFromVariableConfig(aUserInputConfig);

					return key == defaultKey;
				}) : undefined;

				return new Variable(userInputConfig, aDefaultInputConfig);
			});
		}
		else if (this.userStepConfig && this.userStepConfig.inputs) {
			return _.map(this.userStepConfig.inputs, function(aUserInputConfig) {
				return new Variable(aUserInputConfig);
			});
		}

		return undefined;
	};

	Step.prototype.outputs = function() {
		var outputsSourceStepConfig = this.defaultStepConfig ? this.defaultStepConfig.outputs : (this.userStepConfig ? this.userStepConfig.outputs : undefined);

		return outputsSourceStepConfig ? _.map(outputsSourceStepConfig, function(aUserInputConfig) {
			return new Variable(aUserInputConfig);
		}) : undefined;
	};

	Step.prototype.isVerified = function() {
		var sourceURL = this.sourceURL();

		if (sourceURL === undefined) {
			return undefined;
		}

		var regexpForVerifiedStepSourceURL = new RegExp("^(?:https?:\/\/)?(?:www.)?github\.com\/(?:bitrise-steplib|bitrise-io)\/.+");

		return regexpForVerifiedStepSourceURL.test(sourceURL);
	};

	Step.prototype.requestedVersion = function() {
		if (this.cvs.indexOf("@") == -1) {
			return null;
		}

		return this.version;
	};

	function parameterGetterSetter(step, parameterKey, parameterValue) {
		if (parameterValue === undefined) {
			if (step.userStepConfig && step.userStepConfig[parameterKey] !== undefined) {
				return step.userStepConfig[parameterKey];
			}

			return step.defaultStepConfig ? step.defaultStepConfig[parameterKey] : undefined;
		}

		if (!step.defaultStepConfig || parameterValue != step.defaultStepConfig[parameterKey]) {
			if (!step.userStepConfig) {
				step.userStepConfig = {};
			}

			step.userStepConfig[parameterKey] = parameterValue;
		}
		else if (step.userStepConfig && step.userStepConfig[parameterKey] !== undefined) {
			delete step.userStepConfig[parameterKey];
		}

		return parameterValue;
	}

	return Step;

});

angular.module("BitriseWorkflowEditor").filter("normalizedStepIconURL", function() {

	return function(step) {
		if (!step) {
			return undefined;
		}

		var defaultStepIconURL = "<%= image_path('step/icon-default.svg') %>";
		var stepIconURL = step.iconURL();

		return stepIconURL ? stepIconURL : defaultStepIconURL;
	};

});

angular.module("BitriseWorkflowEditor").filter("stepSourceCSSClass", function() {

	return function(step) {
		if (!step) {
			return undefined;
		}

		var sourceURL = step.sourceURL();

		var regexpForGithubStepSourceURL = new RegExp("^(?:https?:\/\/)?(?:www.)?github\.com\/.+");
		if (regexpForGithubStepSourceURL.test(sourceURL)) {
			return "github";
		}

		var regexpForBitbucketStepSourceURL = new RegExp("^(?:https?:\/\/)?(?:www.)?bitbucket\.(?:com|org)\/.+");
		if (regexpForBitbucketStepSourceURL.test(sourceURL)) {
			return "bitbucket";
		}
		
		var regexpForGitlabStepSourceURL = new RegExp("^(?:https?:\/\/)?(?:www.)?gitlab\.com\/.+");
		if (regexpForGitlabStepSourceURL.test(sourceURL)) {
			return "gitlab";
		}

		return "unknown";
	};

});

})();
