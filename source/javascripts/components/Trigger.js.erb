(function() {

"use strict";

angular.module("BitriseWorkflowEditor").factory("Trigger", function(stringService) {

	var Trigger = function(type) {
		if (type === undefined) {
			type = "push";
		}

		this.workflow;
		this.type = type;
		this.pushBranchPattern;
		this.pullRequestSourceBranchPattern;
		this.pullRequestTargetBranchPattern;
		this.tagPattern;

		switch (this.type) {
			case "push":
				this.pushBranchPattern = "";

				break;
			case "pull-request":
				this.pullRequestSourceBranchPattern = "";
				this.pullRequestTargetBranchPattern = "";

				break;
			case "tag":
				this.tagPattern = "";

				break;
		}
	};

	Trigger.validateTriggerConfig = function(triggerConfig) {
		if (!_.isObject(triggerConfig) || angular.isArray(triggerConfig)) {
			throw new TypeError("<%= data[:strings][:trigger][:validation_error_prefix] %><%= data[:strings][:trigger][:trigger_config_not_object] %>");
		}

		var isTypeDefined = false;

		_.each(["push_branch", "pull_request_source_branch", "pull_request_target_branch", "tag"], function(aTriggerConfigParameterKey) {
			if (triggerConfig[aTriggerConfigParameterKey] === undefined) {
				return;
			}

			if (typeof triggerConfig[aTriggerConfigParameterKey] != "string") {
				throw new TypeError(stringService.stringReplacedWithParameters("<%= data[:strings][:trigger][:validation_error_prefix] %><%= data[:strings][:trigger][:value_not_string] %>", {
					key: aTriggerConfigParameterKey
				}));
			}

			if (aTriggerConfigParameterKey == "pull_request_target_branch") {
				return;
			}

			if (isTypeDefined) {
				throw new Error("<%= data[:strings][:trigger][:validation_error_prefix] %><%= data[:strings][:trigger][:multiple_types] %>");
			}

			isTypeDefined = true;
		});

		if (!isTypeDefined) {
			throw new Error("<%= data[:strings][:trigger][:validation_error_prefix] %><%= data[:strings][:trigger][:missing_type] %>");
		}

		if (triggerConfig.pull_request_source_branch !== undefined && triggerConfig.pull_request_target_branch == undefined) {
			throw new Error("<%= data[:strings][:trigger][:validation_error_prefix] %><%= data[:strings][:trigger][:missing_pull_request_target_branch] %>");
		}
	};

	Trigger.createFromTriggerConfig = function(triggerConfig, workflows) {
		var trigger = new Trigger();

		trigger.workflow = _.find(workflows, {
			id: triggerConfig.workflow
		});

		if (triggerConfig.push_branch !== undefined) {
			trigger.type = "push";
			trigger.pushBranchPattern = triggerConfig.push_branch;
		}
		else if (triggerConfig.pull_request_source_branch !== undefined || triggerConfig.pull_request_target_branch !== undefined) {
			trigger.type = "pull-request";
			trigger.pullRequestSourceBranchPattern = triggerConfig.pull_request_source_branch;
			trigger.pullRequestTargetBranchPattern = triggerConfig.pull_request_target_branch;
		}
		else if (triggerConfig.tag !== undefined) {
			trigger.type = "tag";
			trigger.tagPattern = triggerConfig.tag;
		}

		return trigger;
	};

	return Trigger;

});

angular.module("BitriseWorkflowEditor").filter("displayNameForTriggerType", function() {

	return function(triggerType) {
		switch (triggerType) {
			case "push":
				return "<%= data[:strings][:triggers][:types][:push] %>";
			case "pull-request":
				return "<%= data[:strings][:triggers][:types][:pull_request] %>";
			case "tag":
				return "<%= data[:strings][:triggers][:types][:tag] %>";
		}
	};

})

})();
