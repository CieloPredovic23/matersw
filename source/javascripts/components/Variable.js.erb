(function() {

"use strict";

angular.module("BitriseWorkflowEditor").factory("Variable", function() {

	var Variable = function(key, value) {
		this.key = key;
		this.value = value;
		this.title;
		this.summary;
		this.description;
		this.isExpand;
		this.skipIfEmpty;
		this.isRequired;
		this.isDontChangeValue;
		this.isTemplate;
		this.valueOptions;

		this.variableConfigs = [];
	};

	Variable.validateVariableConfig = function(variableConfig) {
		if (!_.isObject(variableConfig) || angular.isArray(variableConfig)) {
			throw new TypeError("<%= data.strings.variable.variable_config_not_object %>");
		}

		if (_.without(_.keys(variableConfig), "opts").length == 0) {
			throw new Error("<%= data.strings.variable.no_main_key_found %>");
		}

		if (_.without(_.keys(variableConfig), "opts").length > 1) {
			throw new Error("<%= data.strings.variable.only_main_key_and_opts_are_allowed %>");		
		}

		var value = variableConfig[Variable.keyFromVariableConfig(variableConfig)];
		if (typeof value != "boolean" && typeof value != "number" && typeof value != "string" && !_.isObject(value)) {
			throw new TypeError("<%= data.strings.variable.invalid_value_format %>")
		}

		if (variableConfig.opts) {
			if (!_.isObject(variableConfig.opts) || angular.isArray(variableConfig.opts)) {
				throw new TypeError("<%= data.strings.variable.opts_not_object %>");
			}

			var stringOptionKeys = ["title", "summary", "description"];
			var booleanOptionKeys = ["is_expand", "skip_if_empty", "is_required", "is_dont_change_value", "is_template"];
			var arrayOptionKeys = ["value_options"]

			_.each(variableConfig.opts, function(anOptionValue, anOptionKey) {
				if (_.contains(stringOptionKeys, anOptionKey) && typeof anOptionValue != "string") {
					throw new TypeError("<%= data.strings.variable.opt_value_not_string %>");
				}
				else if (_.contains(booleanOptionKeys, anOptionKey) && typeof anOptionValue != "boolean") {
					throw new TypeError("<%= data.strings.variable.opt_value_not_boolean %>");
				}
				else if (_.contains(arrayOptionKeys, anOptionKey) && !angular.isArray(anOptionValue)) {
					throw new TypeError("<%= data.strings.variable.opt_value_not_array %>");
				}
			});
		}
	};

	Variable.createFromVariableConfig = function(variableConfig) {
		var key = Variable.keyFromVariableConfig(variableConfig);

		var variable = new Variable(key);
		variable.appendVariableConfig(variableConfig);

		return variable;
	};

	Variable.prototype.appendVariableConfig = function(variableConfig) {
		if (Variable.keyFromVariableConfig(variableConfig) != this.key) {
			throw new Error("<%= data.strings.variable.main_key_mismatch %>");
		}

		this.value = variableConfig[this.key];

		if (variableConfig.opts) {
			if (variableConfig.opts.title !== undefined) {
				this.title = variableConfig.opts.title;
			}

			if (variableConfig.opts.summary !== undefined) {
				this.summary = variableConfig.opts.summary;
			}

			if (variableConfig.opts.description !== undefined) {
				this.description = variableConfig.opts.description;
			}

			if (variableConfig.opts.is_expand !== undefined) {
				this.isExpand = variableConfig.opts.is_expand;
			}

			if (variableConfig.opts.skip_if_empty !== undefined) {
				this.skipIfEmpty = variableConfig.opts.skip_if_empty;
			}

			if (variableConfig.opts.is_required !== undefined) {
				this.isRequired = variableConfig.opts.is_required;
			}

			if (variableConfig.opts.is_dont_change_value !== undefined) {
				this.isDontChangeValue = variableConfig.opts.is_dont_change_value;
			}

			if (variableConfig.opts.is_template !== undefined) {
				this.isTemplate = variableConfig.opts.is_template;
			}

			if (variableConfig.opts.value_options !== undefined) {
				this.valueOptions = angular.copy(variableConfig.opts.value_options);
			}
		}

		this.variableConfigs.push(variableConfig);
	};

	Variable.keyFromVariableConfig = function(variableConfig) {
		return _.first(_.without(_.keys(variableConfig), "opts"));
	};

	Variable.prototype.strippedConfig = function(defaultConfig) {
		var mergedConfig = {};
		mergedConfig[this.key] = {};

		var self = this;
		_.each(this.variableConfigs, function(aVariableConfig) {
			mergedConfig[self.key] = aVariableConfig[self.key];

			_.each(aVariableConfig.opts, function(anOption, anOptionID) {
				if (!mergedConfig.opts) {
					mergedConfig.opts = {};
				}

				mergedConfig.opts[anOptionID] = angular.copy(anOption);
			});
		});


		var strippedConfig = {};
		strippedConfig[this.key] = mergedConfig[this.key] != defaultConfig[this.key] ? mergedConfig[this.key] : undefined;
		var strippedOpts = _.filter(mergedConfig.opts, function(anOption, anOptionID) {
			return !angular.equals(anOption, defaultConfig.opts[anOptionID]);
		});
		if (!_.isEmpty(strippedOpts)) {
			strippedConfig.opts = strippedOpts;
		}

		return strippedConfig;
	};

	return Variable;

});

angular.module("BitriseWorkflowEditor").filter("prettifiedVariableKey", function() {

	return function(variable) {
		if (!variable || !variable.key) {
			return undefined;
		}

		return "$" + variable.key;
	};

});

})();
