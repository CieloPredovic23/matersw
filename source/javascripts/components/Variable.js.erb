(function() {

"use strict";

angular.module("BitriseWorkflowEditor").factory("Variable", function(stringService) {

	var Variable = function(key, value) {
		this.key = key;
		this.value = value;
		this.title;
		this.summary;
		this.description;
		this.isExpand;
		this.skipIfEmpty;
		this.isRequired;
		this.isDontChangeValue;
		this.isTemplate;
		this.valueOptions;

		this.variableConfigs = [];
	};

	Variable.createFromVariableConfig = function(variableConfig) {
		var key = Variable.keyFromVariableConfig(variableConfig);

		var variable = new Variable(key);
		variable.appendVariableConfig(variableConfig);

		return variable;
	};

	Variable.prototype.appendVariableConfig = function(variableConfig) {
		this.value = variableConfig[this.key];

		if (variableConfig.opts) {
			if (variableConfig.opts.title !== undefined) {
				this.title = variableConfig.opts.title;
			}

			if (variableConfig.opts.summary !== undefined) {
				this.summary = variableConfig.opts.summary;
			}

			if (variableConfig.opts.description !== undefined) {
				this.description = variableConfig.opts.description;
			}

			if (variableConfig.opts.is_expand !== undefined) {
				this.isExpand = variableConfig.opts.is_expand;
			}

			if (variableConfig.opts.skip_if_empty !== undefined) {
				this.skipIfEmpty = variableConfig.opts.skip_if_empty;
			}

			if (variableConfig.opts.is_required !== undefined) {
				this.isRequired = variableConfig.opts.is_required;
			}

			if (variableConfig.opts.is_dont_change_value !== undefined) {
				this.isDontChangeValue = variableConfig.opts.is_dont_change_value;
			}

			if (variableConfig.opts.is_template !== undefined) {
				this.isTemplate = variableConfig.opts.is_template;
			}

			if (variableConfig.opts.value_options !== undefined) {
				this.valueOptions = angular.copy(variableConfig.opts.value_options);
			}
		}

		this.variableConfigs.push(variableConfig);
	};

	Variable.keyFromVariableConfig = function(variableConfig) {
		return _.first(_.without(_.keys(variableConfig), "opts"));
	};

	Variable.prototype.strippedVariableConfig = function(defaultVariableConfig) {
		var strippedVariableConfig = {};

		var self = this;
		_.each(this.variableConfigs, function(aVariableConfig) {
			strippedVariableConfig[self.key] = aVariableConfig[self.key];

			_.each(aVariableConfig.opts, function(anOption, anOptionID) {
				if (!strippedVariableConfig.opts) {
					strippedVariableConfig.opts = {};
				}

				strippedVariableConfig.opts[anOptionID] = angular.copy(anOption);
			});
		});

		_.each(_.pick(strippedVariableConfig.opts, function(anOption, anOptionID) {
			return angular.equals(anOption, defaultVariableConfig.opts[anOptionID]);
		}), function(anOption, anOptionID) {
			delete strippedVariableConfig.opts[anOptionID];
		});

		return strippedVariableConfig;
	};

	return Variable;

});

angular.module("BitriseWorkflowEditor").filter("prettifiedVariableKey", function() {

	return function(variable) {
		if (!variable || !variable.key) {
			return undefined;
		}

		return "$" + variable.key;
	};

});

})();
