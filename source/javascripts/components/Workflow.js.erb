(function() {

"use strict";

angular.module("BitriseWorkflowEditor").factory("Workflow", function(stringService, bitriseSteplibService, Step, Variable) {

	var Workflow = function(id) {
		this.id = id;
		this.beforeRunWorkflows;
		this.afterRunWorkflows;
		this.envVars;
		this.steps;
	};

	Workflow.prototype.configureWithWorkflowConfig = function(workflowConfig) {
		if (workflowConfig.envs) {
			this.envVars = _.map(workflowConfig.envs, Variable.createFromVariableConfig);
		}

		if (workflowConfig.steps) {
			this.steps = _.map(workflowConfig.steps, function(aStepConfig) {
				var stepCVS = _.first(_.keys(angular.fromJson(angular.toJson(aStepConfig))));

				try {
					return bitriseSteplibService.stepFromCVS(stepCVS);
				}
				catch (error) {
					var step = Step.createFromStepConfig(aStepConfig);
					step.cvs = stepCVS;

					return step;
				}
			});
		}

		var self = this;

		return function allWorkflowsLoadedCallback(allWorkflows) {
			self.beforeRunWorkflows = [];
			self.afterRunWorkflows = [];

			_.each(_.union(workflowConfig.before_run, workflowConfig.after_run), function(aWorkflowID, index, workflowIDs) {
				(workflowIDs == workflowConfig.before_run ? self.beforeRunWorkflows : self.afterRunWorkflows).push(_.find(allWorkflows, {
					id: aWorkflowID
				}));
			});
		}
	};

	Workflow.prototype.isLoopSafeRunForWorkflow = function(workflow) {
		if (this == workflow) {
			return false;
		}

		if (_.contains(this.beforeRunWorkflows, workflow) || _.contains(this.afterRunWorkflows, workflow)) {
			return false;
		}

		if (_.isEmpty(this.beforeRunWorkflows) && _.isEmpty(this.afterRunWorkflows)) {
			return true;
		}

		return _.every(_.union(this.beforeRunWorkflows, this.afterRunWorkflows), function(aWorkflow) {
			return aWorkflow.isLoopSafeRunForWorkflow(workflow);
		});
	};

	return Workflow;

});

})();
