(function() {

"use strict";

angular.module("BitriseWorkflowEditor").factory("Workflow", function(bitriseSteplibService, Step, Variable) {

	var Workflow = function(id) {
		this.id = id;
		this.beforeRunWorkflows;
		this.afterRunWorkflows;
		this.envVars;
		this.steps;
	};

	Workflow.prototype.configureWithWorkflowConfig = function(workflowConfig) {
		var temporaryEnvVarStore = [];
		if (workflowConfig.envs) {
			try {
				temporaryEnvVarStore = _.map(workflowConfig.envs, Variable.createFromVariableConfig);
			}
			catch (error) {
				throw new Error("<%= data.strings.workflow.configure_error_prefix %>" + error.message);
			}
		}

		var temporaryStepStore = [];
		if (workflowConfig.steps) {
			try {
				temporaryStepStore = _.map(workflowConfig.steps, function(aStepConfig) {
					var stepCVS = _.first(_.keys(angular.fromJson(angular.toJson(aStepConfig))));

					return bitriseSteplibService.stepFromCVS(stepCVS);
				});
			}
			catch (error) {
				throw new Error("<%= data.strings.workflow.configure_error_prefix %>" + error.message);
			}
		}

		this.envVars = temporaryEnvVarStore;
		this.steps = temporaryStepStore;

		var self = this;

		return function allWorkflowsLoadedCallback(allWorkflows) {
			self.beforeRunWorkflows = [];
			self.afterRunWorkflows = [];

			_.each(_.union(workflowConfig.before_run, workflowConfig.after_run), function(aWorkflowID, index, workflowIDs) {
				var anOtherWorkflow = _.find(allWorkflows, {
					id: aWorkflowID
				});

				if (!anOtherWorkflow) {
					throw "Workflow not found with ID: " + aWorkflowID;
				}

				(workflowIDs == workflowConfig.before_run ? self.beforeRunWorkflows : self.afterRunWorkflows).push(anOtherWorkflow);
			});
		}
	}

	return Workflow;

});

})();
