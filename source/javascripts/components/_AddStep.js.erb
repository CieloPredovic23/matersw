(function() {

"use strict";

angular.module("BitriseWorkflowEditor").service("addStepService", function() {

	var addStepService = {
		isVisible: false,
		stepSelected: undefined,
		steps: undefined
	};

	addStepService.showWithInsertIndex = function(insertIndex, stepSelectedCallback) {
		this.stepSelected = function(step) {
			this.isVisible = false;

			stepSelectedCallback(angular.copy(step), insertIndex);
		};

		this.isVisible = true;
	};

	return addStepService;

}).controller("AddStepController", function($scope, stringService, addStepService, stepSourceService) {

	var viewModel = this;

	$scope.addStepService = addStepService;

	viewModel.isDragInProgress = false;

	var steps;
	viewModel.categories = [{
		id: "new_releases",
		title: "<%= data[:strings][:workflows][:steps][:add][:categories][:new_releases] %>",
		cssClass: "new-releases",
		steps: undefined,
		paginateStepsConfig: {
			pageCount: undefined,
			stepsCountPerPage: 2,
			currentPageIndex: 0,
			currentOffsetInPage: 0
		}
	}];
	_.each([
		"test",
		"deploy",
		"notification",
		"utility"
	], function(aTypeTag) {
		viewModel.categories.push({
			id: aTypeTag,
			title: aTypeTag,
			cssClass: "type-" + aTypeTag,
			steps: undefined,
			paginateStepsConfig: {
				pageCount: undefined,
				stepsCountPerPage: 2,
				currentPageIndex: 0,
				currentOffsetInPage: 0
			}
		});
	})

	viewModel.stepFilter = "";
	viewModel.isCategoryMode = true;
	viewModel.isWindowSizeForcingListMode;

	viewModel.typeFilters;
	viewModel.selectedTypeFilter = null;

	$scope.$watch(function() {
		return addStepService.isVisible;
	}, function(isVisible) {
		if (isVisible === undefined) {
			return;
		}

		if (isVisible) {
			steps = [];
			steps = steps.concat(stepSourceService.localSteps);
			steps = steps.concat(stepSourceService.gitSteps);
			viewModel.typeFilters = [];
			_.each(stepSourceService.libraries, function(aLibrary) {
				steps = steps.concat(_.map(_.omit(aLibrary.latestStepVersions, function(aStepVersion, stepID) {
					return _.contains(aLibrary.deprecatedSteps, aLibrary.steps[stepID][aStepVersion]);
				}), function(aStepVersion, stepID) {
					var step = angular.copy(aLibrary.steps[stepID][aStepVersion]);

					if (aLibrary.url != stepSourceService.defaultLibraryURL) {
						step.libraryURL = aLibrary.url;
						step.cvs = step.libraryURL + "::" + step.cvs;
					}

					_.each(step.typeTags(), function(aTypeTag) {
						if (!_.contains(viewModel.typeFilters, aTypeTag)) {
							viewModel.typeFilters.push(aTypeTag);
						}
					});

					return step;
				}));
			});

			_.each(viewModel.categories, function(aCategory) {
				var stepIDsOfCategory;

				switch (aCategory.id) {
					case "new_releases":
						aCategory.steps = _.map(_.first(_.sortBy(steps, function(aStep) {
							return - new Date(aStep.defaultStepConfig.published_at);
						}), 5));

						break;
					default:
						aCategory.steps = _.filter(steps, function(aStep) {
							return _.contains(aStep.typeTags(), aCategory.id);
						});

						break;
				}

				aCategory.paginateStepsConfig.pageCount = Math.ceil(aCategory.steps.length / aCategory.paginateStepsConfig.stepsCountPerPage);
			});
		}
		else {
			viewModel.stepFilter = "";
			viewModel.selectedTypeFilter = null;

			if (!viewModel.isWindowSizeForcingListMode) {
				viewModel.isCategoryMode = true;
			}

			_.each(viewModel.categories, function(aCategory) {
				aCategory.paginateStepsConfig.currentPageIndex = 0;
				aCategory.paginateStepsConfig.currentOffsetInPage = 0;
			});
		}
	});

	$scope.$watch(function() {
		return viewModel.isCategoryMode;
	}, function(isCategoryMode) {
		viewModel.stepFilter = "";
		viewModel.selectedTypeFilter = null;

		if (isCategoryMode) {
			_.each(viewModel.categories, function(aCategory) {
				aCategory.paginateStepsConfig.currentPageIndex = 0;
				aCategory.paginateStepsConfig.currentOffsetInPage = 0;
			});
		}
	});

	viewModel.filteredSteps = function() {
		var filteredSteps = steps;

		if (viewModel.selectedTypeFilter) {
			filteredSteps = _.filter(filteredSteps, function(aStep) {
				return _.contains(aStep.typeTags(), viewModel.selectedTypeFilter);
			});
		}

		filteredSteps =_.filter(filteredSteps, function(aStep) {
			return stringService.isStringMatchingTerm(aStep.title(), viewModel.stepFilter) || stringService.isStringMatchingTerm(aStep.id, viewModel.stepFilter);
		});

		return filteredSteps;
	};

	viewModel.stepSelected = function(step) {
		if (viewModel.isDragInProgress) {
			return;
		}

		addStepService.stepSelected(step);
	};

	viewModel.paginateSelected = function(category, direction) {
		if (direction == "left") {
			if (category.paginateStepsConfig.currentOffsetInPage > 0) {
				category.paginateStepsConfig.currentOffsetInPage = 0;
			}
			else {
				category.paginateStepsConfig.currentPageIndex--;
			}
		}
		else if (direction == "right") {
			category.paginateStepsConfig.currentPageIndex++;
			if (category.paginateStepsConfig.currentOffsetInPage > 0) {
				category.paginateStepsConfig.currentOffsetInPage = 0;
			}
		}
	};

	viewModel.isStepVisible = function(step, category) {
		if (!viewModel.isCategoryMode) {
			return undefined;
		}

		var stepIndex = _.indexOf(category.steps, step);

		return stepIndex < category.paginateStepsConfig.stepsCountPerPage * category.paginateStepsConfig.currentPageIndex + category.paginateStepsConfig.currentOffsetInPage || stepIndex >= category.paginateStepsConfig.stepsCountPerPage * (category.paginateStepsConfig.currentPageIndex + 1) + category.paginateStepsConfig.currentOffsetInPage;
	};

}).directive("addStepSidebar", function($parse, $document, addStepService) {

	return {
		restrict: "E",
		replace: true,
		templateUrl: "<%= mode_dependant_asset_path(data[:routes][:templates][:add_step_sidebar] )%>",
		link: function(scope, element, attrs) {

			function keyupHandler(event) {
				if (event.keyCode != 27) {
					return;
				}

				addStepService.isVisible = false;
				scope.$apply();
			};

			scope.$watch(function() {
				return addStepService.isVisible;
			}, function(newIsVisible) {
				if (newIsVisible === undefined) {
					return;
				}

				if (newIsVisible) {
					angular.element($document).bind("keyup", keyupHandler);
					windowSizeHandler();
					$(window).bind("resize", windowSizeHandler);
				}
				else {
					angular.element($document).unbind("keyup", keyupHandler);
					$(window).unbind("resize", windowSizeHandler);
				}
			});

			function windowSizeHandler() {
				var contentElement = _.first(element.children(".content"));
				var isWindowSizeTooSmallForCategoryMode = $(contentElement).width() < 600;

				$parse(attrs.forceListModeFlag).assign(scope, isWindowSizeTooSmallForCategoryMode);
				if (isWindowSizeTooSmallForCategoryMode) {
					$parse(attrs.isCategoryModeFlag).assign(scope, false);
				}

				if (!scope.$$phase) {
					scope.$apply();
				}
			};

			scope.$on("$destroy", function() {
				$(window).unbind("resize", windowSizeHandler);
			});
		}
	};

}).directive("addStepDragger", function($parse, $document, $timeout) {

	return {
		restrict: "A",
		link: function(scope, element, attrs) {
			var paginateStepsConfig = $parse(attrs.paginateStepsConfig)(scope);
			var latestDragPositionX;

			function mouseDownHandler(event) {
				element.unbind("mousedown", mouseDownHandler);
				$document.bind("mousemove", mouseMoveHandler);
				$document.bind("mouseup", mouseUpHandler);

				latestDragPositionX = event.pageX;
			};

			function mouseMoveHandler(event) {
				$parse(attrs.dragInProgressFlag).assign(scope, true);

				var originalScrollPositionX = - parseFloat(element.css("left").replace("px", ""));
				var scrollPositionX = originalScrollPositionX - (event.pageX - latestDragPositionX);
				scrollPositionX = Math.max(scrollPositionX, 0);
				var lastStepElementPositionX = $(_.last(element.children())).position().left;
				scrollPositionX = Math.min(scrollPositionX, lastStepElementPositionX);

				element.css("left", (- scrollPositionX) + "px");

				latestDragPositionX = event.pageX;
			};

			function mouseUpHandler() {
				$document.unbind("mousemove", mouseMoveHandler);
				$document.unbind("mouseup", mouseUpHandler);

				if (!$parse(attrs.dragInProgressFlag)(scope)) {
					return;
				}

				latestDragPositionX = undefined;

				var stepIndex = 0;
				var minimumStepElementScrolledPositionX;
				_.each(element.children(), function(aStepElement, index) {
					var originalScrollPositionX = - parseFloat(element.css("left").replace("px", ""));
					var stepElementPositionX = $(aStepElement).position().left;
					var stepElementScrolledPositionX = stepElementPositionX - originalScrollPositionX;

					if (minimumStepElementScrolledPositionX === undefined || Math.abs(stepElementScrolledPositionX) < Math.abs(minimumStepElementScrolledPositionX)) {
						minimumStepElementScrolledPositionX = stepElementScrolledPositionX;
						stepIndex = index;
					}
				});

				scrollToStepWithIndex(stepIndex);

				paginateStepsConfig.currentPageIndex = Math.floor(stepIndex / paginateStepsConfig.stepsCountPerPage);
				paginateStepsConfig.currentOffsetInPage = stepIndex % paginateStepsConfig.stepsCountPerPage;
				scope.$apply();

				$timeout(function() {
					$parse(attrs.dragInProgressFlag).assign(scope, false);
				}, 0);
			};

			function scrollToStepWithIndex(stepIndex) {
				var scrollPositionX = $(element.children()[stepIndex]).position().left;
				element.addClass("animated-scroll");
				element.css("left", (- scrollPositionX) + "px");

				var transitionDuration;
				_.any([
					"-webkit-transition-duration",
					"-moz-transition-duration",
					"-o-transition-duration",
					"transition-duration"
				], function(property) {
					if (element.css(property) === undefined) {
						return false;
					}

					var transitionDurations = _.map(element.css(property).split(", "), function(aTransitionDurationPropertyValue) {
						return parseFloat(aTransitionDurationPropertyValue.replace("s", ""));
					});

					transitionDuration = Math.max.apply(null, transitionDurations) * 1000;

					return true;
				});

				setTimeout(function() {
					element.removeClass("animated-scroll");
					element.bind("mousedown", mouseDownHandler);
				}, transitionDuration);
			}

			scope.$watch(function() {
				return paginateStepsConfig.currentPageIndex * paginateStepsConfig.stepsCountPerPage + paginateStepsConfig.currentOffsetInPage;
			}, function(stepIndex) {
				if (stepIndex === undefined || element === undefined || element.children().length == 0) {
					return;
				}

				scrollToStepWithIndex(stepIndex);
			});

			element.bind("mousedown", mouseDownHandler);

			scope.$on("$destroy", function() {
				element.unbind("mousedown", mouseDownHandler);
				$document.unbind("mousemove", mouseMoveHandler);
				$document.unbind("mouseup", mouseUpHandler);
			});
		}
	};

}).directive("addStepSidebarStep", function($animate) {

	var activateDebounceInMilliseconds = 500;

	return {
		restrict: "C",
		templateUrl: "<%= mode_dependant_asset_path(data[:routes][:templates][:add_step_sidebar_step] )%>",
		scope: {
			step: "=",
			shouldPreventActivation: "&preventActivation",
			selected: "&selectCallback"
		},
		link: function(scope, element, attrs) {
			scope.isActive = false;

			var selectButtonElement = element.find("button.select");

			function activateStep(event) {
				var shouldPreventActivation = scope.shouldPreventActivation();

				setTimeout(function() {
					shouldPreventActivation = shouldPreventActivation || scope.shouldPreventActivation();

					if (shouldPreventActivation) {
						if ($(event.target).is(":focus")) {
							$(event.target).blur();
						}

						return;
					}

					if (!$(event.target).is(":focus") && !$(event.target).is(":hover")) {
						return;
					}

					scope.isActive = true;

					scope.$digest();
				}, activateDebounceInMilliseconds);
			};

			function deactivateStep(event) {
				var newTargetElement = event.toElement || event.relatedTarget;

				if (element.get(0) == newTargetElement || element.has(newTargetElement).length > 0) {
					$(newTargetElement).bind(event.type, deactivateStep);

					return;
				}

				scope.isActive = false;

				scope.$digest();
			}

			selectButtonElement.bind("mouseenter", activateStep);
			selectButtonElement.bind("mouseleave", deactivateStep);
			selectButtonElement.bind("focusin", activateStep);
			selectButtonElement.bind("focusout", deactivateStep);
		}
	};

});

})();
