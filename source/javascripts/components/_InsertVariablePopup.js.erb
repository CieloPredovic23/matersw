(function() {

"use strict";

angular.module("BitriseWorkflowEditor").service("insertVariablePopupService", function($filter, Popup) {

	var insertVariablePopupService = {
		popup: new Popup(),
		workflows: undefined,
		selectedWorkflow: undefined,
		selectedStep: undefined,
		targetVariable: undefined,
		insertStartPosition: undefined,
		insertEndPosition: undefined,
		variableSelected: undefined
	};

	insertVariablePopupService.show = function(workflows, selectedWorkflow, selectedStep, targetVariable) {
		this.workflows = workflows;
		this.selectedWorkflow = selectedWorkflow;
		this.selectedStep = selectedStep;
		this.targetVariable = targetVariable;
		this.targetVariable = targetVariable;

		if (this.insertStartPosition === undefined) {
			this.insertStartPosition = this.targetVariable.value.length;
		}
		if (this.insertEndPosition === undefined) {
			this.insertEndPosition = this.targetVariable.value.length;
		}

		this.variableSelected = function(variable) {
			this.popup.isVisible = false;

			var oldValue = this.targetVariable.value();
			if (oldValue === null) {
				oldValue = "";
			}
			
			this.targetVariable.value(oldValue.slice(0, this.insertStartPosition) + $filter("prettifiedVariableKey")(variable) + oldValue.slice(this.insertEndPosition));
		};

		this.popup.isVisible = true;
	};

	return insertVariablePopupService;

}).directive("insertVariablePopup", function() {

	return {
		restrict: "E",
		replace: true,
		templateUrl: "<%= mode_dependant_asset_path(data[:routes][:templates][:insert_variable_popup] )%>",
		controller: "InsertVariablePopupController",
		controllerAs: "insertVariablePopupCtrl",
		scope: {},
	};

}).controller("InsertVariablePopupController", function($scope, $q, appService, requestService, stepSourceService, stringService, insertVariablePopupService, Popup, Progress, Variable) {

	var viewModel = this;
	viewModel.canceler = $q.defer();

	viewModel.keyFilter = "";
	viewModel.insertableVariables = [{
		id: "from_bitriseio",
		title: "<%= data[:strings][:workflows][:inputs][:insert_variable][:source][:bitriseio] %>",
		variables: undefined
	}, {
		id: "from_bitrise_cli",
		title: "<%= data[:strings][:workflows][:inputs][:insert_variable][:source][:bitrise_cli] %>",
		variables: undefined
	}, {
		id: "from_secrets",
		title: "<%= data[:strings][:workflows][:inputs][:insert_variable][:source][:secrets] %>",
		variables: undefined
	}, {
		id: "from_app_env_vars",
		title: "<%= data[:strings][:workflows][:inputs][:insert_variable][:source][:app_env_vars] %>",
		variables: undefined
	}];
	viewModel.loadInsertableVariablesProgress = new Progress();

	insertVariablePopupService.popup.beforeAppearCallback = function() {
		loadInsertableVariables();
	};
	$scope.insertVariablePopupService = insertVariablePopupService;

	function loadInsertableVariables() {
		viewModel.loadInsertableVariablesProgress.start("<%= data[:strings][:workflows][:inputs][:insert_variable][:load_progress] %>");

		$q.all([
			loadDefaultOutputs(),
			loadSecrets(),
			function() {
				_.find(viewModel.insertableVariables, {
					id: "from_app_env_vars"
				}).variables = _.map(appService.appConfig.app ? appService.appConfig.app.envs : [], function(aVariableConfig) {
					return new Variable(aVariableConfig);
				});

				_.any(insertVariablePopupService.selectedWorkflow.workflowChain(insertVariablePopupService.workflows), function(aWorkflow) {
					viewModel.insertableVariables.push({
						id: "from_workflow_env_vars-" + aWorkflow.id,
						title: stringService.stringReplacedWithParameters("<%= data[:strings][:workflows][:inputs][:insert_variable][:source][:workflow_env_vars] %>", {
							workflow_id: aWorkflow.id
						}),
						variables: _.map(aWorkflow.workflowConfig.envs, function(aVariableConfig) {
							return new Variable(aVariableConfig);
						})
					});

					_.any(aWorkflow.steps, function(aStep) {
						if (insertVariablePopupService.selectedStep == aStep) {
							return true;
						}

						if (!aStep.defaultStepConfig || !aStep.defaultStepConfig.outputs) {
							return;
						}

						viewModel.insertableVariables.push({
							id: "step-" + aStep.id,
							title: stringService.stringReplacedWithParameters("<%= data[:strings][:workflows][:inputs][:insert_variable][:source][:step_outputs] %>", {
								step_display_name: aStep.displayName()
							}),
							variables: _.map(aStep.defaultStepConfig.outputs, function(anOutputConfig) {
								return new Variable(undefined, anOutputConfig);
							})
						});
					});

					if (aWorkflow == insertVariablePopupService.selectedWorkflow) {
						return true;
					}
				});
			}()
		]).then(function() {
			viewModel.loadInsertableVariablesProgress.success();
		}, function(error) {
			viewModel.loadInsertableVariablesProgress.error(error);
		});
	}

	function loadSecrets() {
		return appService.getSecrets(false, {
			timeout: viewModel.canceler.promise
		}).then(function() {
			_.find(viewModel.insertableVariables, {
				id: "from_secrets"
			}).variables = appService.secrets;
		});
	}

	function loadDefaultOutputs() {
		return requestService.getDefaultOutputs({
			timeout: viewModel.canceler.promise
		}).then(function(defaultOutputConfigsBySource) {
			_.each(defaultOutputConfigsBySource, function(defaultOutputConfigs, sourceID) {
				var defaultOutputsOfSource = _.find(viewModel.insertableVariables, {
					id: sourceID
				});

				defaultOutputsOfSource.variables = [];
				_.each(defaultOutputConfigs, function(aDefaultOutputConfig) {
					defaultOutputsOfSource.variables.push(new Variable(undefined, aDefaultOutputConfig));
				});
			});
		});
	}

	viewModel.shouldShowVariable = function(variable) {
		return _.find(_.compact(_.flatten(_.pluck(viewModel.insertableVariables, "variables"))).reverse(), function(aVariable) {
			return aVariable.key() == variable.key();
		}) == variable;
	};

	viewModel.variableSelected = function(variable) {
		insertVariablePopupService.variableSelected(variable);
	};

	$scope.$on("$destroy", function() {
		viewModel.canceler.resolve();
	});

});

})();
