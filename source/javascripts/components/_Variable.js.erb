(function() {

"use strict";

angular.module("BitriseWorkflowEditor").factory("Variable", function() {

	var Variable = function(userVariableConfig, defaultVariableConfig) {
		this.userVariableConfig = userVariableConfig;
		if (!this.userVariableConfig) {
			this.userVariableConfig = {};
		}

		this.defaultVariableConfig = defaultVariableConfig;
	};

	Variable.defaultVariableConfig = function() {
		return {
			opts: {
				is_expand: true,
				meta: {
					is_expose: false
				}
			}
		};
	};

	Variable.prototype.key = function(newKey) {
		var keySourceVariableConfig = !_.isEmpty(angular.copy(this.userVariableConfig)) ? this.userVariableConfig : this.defaultVariableConfig;
		var oldKey = Variable.keyFromVariableConfig(keySourceVariableConfig);

		if (newKey === undefined) {
			return oldKey;
		}

		if (newKey !== oldKey) {
			var oldValue = keySourceVariableConfig[oldKey];
			this.userVariableConfig[newKey] = oldKey !== undefined ? oldValue : "";
			if (oldKey !== undefined) {
				delete this.userVariableConfig[oldKey];
			}
		}

		return newKey;
	};

	Variable.isValidKey = function(key) {
		if (key === undefined) {
			return undefined;
		}

		if (key.length == 0) {
			return false;
		}

		var validKeyRegexp = new RegExp("^[a-zA-Z_]{1}[a-zA-Z0-9_]*$");

		return validKeyRegexp.test(key);
	};

	Variable.prototype.value = function(newValue) {
		var key = this.key();

		if (newValue === undefined) {
			return this.userVariableConfig[key] !== undefined ? this.userVariableConfig[key] : this.defaultVariableConfig[key];
		}

		this.userVariableConfig[key] = newValue;

		return newValue;
	};

	Variable.prototype.title = function(newValue) {
		return optionGetterSetter(this, "title", newValue);
	};

	Variable.prototype.category = function(newValue) {
		return optionGetterSetter(this, "category", newValue);
	};

	Variable.prototype.summary = function(newValue) {
		return optionGetterSetter(this, "summary", newValue);
	};

	Variable.prototype.description = function(newValue) {
		return optionGetterSetter(this, "description", newValue);
	};

	Variable.prototype.shortestDescription = function() {
		return this.summary() ? this.summary() : this.description();
	};

	Variable.prototype.isExpand = function(newValue) {
		return optionGetterSetter(this, "is_expand", newValue);
	};

	Variable.prototype.skipIfEmpty = function(newValue) {
		return optionGetterSetter(this, "skip_if_empty", newValue);
	};

	Variable.prototype.isRequired = function(newValue) {
		return optionGetterSetter(this, "is_required", newValue);
	};

	Variable.prototype.isDontChangeValue = function(newValue) {
		return optionGetterSetter(this, "is_dont_change_value", newValue);
	};

	Variable.prototype.isTemplate = function(newValue) {
		return optionGetterSetter(this, "is_template", newValue);
	};

	Variable.prototype.valueOptions = function(newValue) {
		return optionGetterSetter(this, "value_options", newValue);
	};

	Variable.keyFromVariableConfig = function(variableConfig) {
		return _.first(_.without(_.keys(angular.copy(variableConfig)), "opts"));
	};

	Variable.prototype.meta = function(newValue) {
		return optionGetterSetter(this, "meta", newValue);
	};

	Variable.prototype.isExpose = function(isExpose) {
		var meta;
		if (isExpose !== undefined) {
			meta = angular.copy(this.meta());
			meta.is_expose = isExpose;
		}

		meta = optionGetterSetter(this, "meta", meta);

		return meta ? meta.is_expose : undefined;
	};

	function optionGetterSetter(variable, optionKey, optionValue) {
		var optionSource;

		if (variable.userVariableConfig.opts && variable.userVariableConfig.opts[optionKey] !== undefined) {
			optionSource = variable.userVariableConfig.opts;
		}
		else if (variable.defaultVariableConfig && variable.defaultVariableConfig.opts && variable.defaultVariableConfig.opts[optionKey] !== undefined) {
			optionSource = variable.defaultVariableConfig.opts;
		}

		if (optionValue === undefined) {
			return optionSource ? optionSource[optionKey] : undefined;
		}

		var defaultKey = Variable.keyFromVariableConfig(variable.defaultVariableConfig);
		var defaultValue = variable.defaultVariableConfig ? variable.defaultVariableConfig[defaultKey] : undefined;

		if (!variable.defaultVariableConfig || !variable.defaultVariableConfig.opts || !angular.equals(optionValue, variable.defaultVariableConfig.opts[optionKey])) {
			if (_.isEmpty(angular.copy(variable.userVariableConfig)) && variable.defaultVariableConfig) {
				variable.userVariableConfig[defaultKey] = defaultValue;
			}

			if (!variable.userVariableConfig.opts) {
				variable.userVariableConfig.opts = {};
			}

			variable.userVariableConfig.opts[optionKey] = optionValue;
		}
		else if (variable.userVariableConfig.opts) {
			if (variable.userVariableConfig.opts[optionKey] !== undefined) {
				delete variable.userVariableConfig.opts[optionKey];
			}

			if (_.isEmpty(angular.copy(variable.userVariableConfig.opts))) {
				delete variable.userVariableConfig["opts"];
			}
		}

		return optionValue;
	}

	Variable.minimizeVariableConfig = function(variableConfig) {
		if (variableConfig.opts && _.isEmpty(angular.copy(variableConfig.opts))) {
			delete variableConfig["opts"];
		}

		return variableConfig;
	};

	return Variable;

});

angular.module("BitriseWorkflowEditor").filter("prettifiedKey", function() {

	return function(key) {
		if (!key) {
			return undefined;
		}

		return "$" + key;
	};

});

angular.module("BitriseWorkflowEditor").filter("prettifiedVariableKey", function($filter) {

	return function(variable) {
		if (!variable) {
			return undefined;
		}

		var key = variable.key();

		return $filter("prettifiedKey")(key);
	};

});

angular.module("BitriseWorkflowEditor").filter("variablesfilteredByKey", function(stringService) {


	return function(variables, keyFilter) {
		if (!variables) {
			return undefined;
		}

		return _.filter(variables, function(aVariable) {
			return stringService.isStringMatchingTerm(aVariable.key(), keyFilter);
		})
	};

})

})();
