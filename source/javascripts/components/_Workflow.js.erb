(function() {

"use strict";

angular.module("BitriseWorkflowEditor").factory("Workflow", function($rootScope, bitriseSteplibService, Step, Variable) {

	var Workflow = function(id, workflowConfig, scope) {
		this.id = id;
		this.workflowConfig = workflowConfig;
		this.steps = _.map(workflowConfig.steps, function(aWrappedUserStepConfig) {
			var stepCVS = Step.cvsFromWrappedStepConfig(aWrappedUserStepConfig);
			var step;
			var userStepConfig = aWrappedUserStepConfig[stepCVS];

			try {
				step = bitriseSteplibService.stepFromCVS(stepCVS);
				step.userStepConfig = userStepConfig;
			}
			catch (error) {
				step = new Step(stepCVS, userStepConfig);
			}

			return step;
		});
	};

	Workflow.prototype.isLoopSafeRunForWorkflow = function(workflow, allWorkflows) {
		if (this == workflow) {
			return false;
		}

		if (!this.workflowConfig) {
			return undefined;
		}

		if (_.contains(this.workflowConfig.before_run, workflow.id) || _.contains(this.workflowConfig.after_run, workflow.id)) {
			return false;
		}

		if (_.isEmpty(this.workflowConfig.before_run) && _.isEmpty(this.workflowConfig.after_run)) {
			return true;
		}

		return _.every(_.union(this.workflowConfig.before_run, this.workflowConfig.after_run), function(aWorkflowID) {
			var aWorkflow = _.find(allWorkflows, {
				id: aWorkflowID
			});

			return aWorkflow.isLoopSafeRunForWorkflow(workflow, allWorkflows);
		});
	};

	Workflow.prototype.cloneStep = function(step) {
		var newStep = angular.copy(step);

		var stepIndex = _.indexOf(this.steps, step);
		this.steps.splice(stepIndex + 1, 0, newStep);

		var stepWrappedUserStepConfigIndex = _.findIndex(this.workflowConfig.steps, function(aWrappedUserStepConfig) {
			return aWrappedUserStepConfig[Step.cvsFromWrappedStepConfig(aWrappedUserStepConfig)] == step.userStepConfig;
		});
		this.workflowConfig.steps.splice(stepWrappedUserStepConfigIndex + 1, 0, newStep.wrappedUserStepConfig());

		return newStep;
	};

	Workflow.prototype.addStepAtIndex = function(step, index) {
		if (!this.steps) {
			this.steps = [];
		}
		if (!this.workflowConfig.steps) {
			this.workflowConfig.steps = [];
		}

		var referenceAfterStep =  _.isEmpty(this.workflowConfig.steps) ? undefined : this.steps[index];
		this.steps.splice(index, 0, step);

		var stepWrappedUserStepConfigIndex = referenceAfterStep ? _.findIndex(this.workflowConfig.steps, function(aWrappedUserStepConfig) {
			return referenceAfterStep.wrappedUserStepConfig() == aWrappedUserStepConfig;
		}) - 1 : 0;
		this.workflowConfig.steps.splice(stepWrappedUserStepConfigIndex, 0, step.wrappedUserStepConfig());

		return step;
	};

	Workflow.prototype.removeStep = function(step) {
		var stepIndex = _.indexOf(this.steps, step);
		this.steps.splice(stepIndex, 1);

		var stepWrappedUserStepConfigIndex = _.findIndex(this.workflowConfig.steps, function(aWrappedUserStepConfig) {
			return aWrappedUserStepConfig[Step.cvsFromWrappedStepConfig(aWrappedUserStepConfig)] == step.userStepConfig;
		});
		this.workflowConfig.steps.splice(stepWrappedUserStepConfigIndex, 1);
	};

	return Workflow;

});

})();
