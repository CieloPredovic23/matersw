(function() {

"use strict";

angular.module("BitriseWorkflowEditor").factory("Workflow", function($rootScope, stepSourceService, Step, Variable) {

	var Workflow = function(id, workflowConfig) {
		this.id = id;
		this.workflowConfig = workflowConfig;

		this.steps = _.map(workflowConfig.steps, function(aWrappedUserStepConfig) {
			var stepCVS = Step.cvsFromWrappedStepConfig(aWrappedUserStepConfig);
			var step;
			var userStepConfig = aWrappedUserStepConfig[stepCVS];

			try {
				step = stepSourceService.stepFromCVS(stepCVS);
				step.userStepConfig = userStepConfig;
			}
			catch (error) {
				console.log(error.message);
				step = new Step(stepCVS, userStepConfig);
			}

			return step;
		});
	};

	Workflow.prototype.workflowChain = function(allWorkflows) {
		var workflows = [];

		_.each(this.workflowConfig.before_run, function(aWorkflowID) {
			var beforeRunWorkflow = _.find(allWorkflows, {
				id: aWorkflowID
			});

			workflows = workflows.concat(beforeRunWorkflow.workflowChain(allWorkflows));
		});

		workflows.push(this);

		_.each(this.workflowConfig.after_run, function(aWorkflowID) {
			var afterRunWorkflow = _.find(allWorkflows, {
				id: aWorkflowID
			});

			workflows = workflows.concat(afterRunWorkflow.workflowChain(allWorkflows));
		});

		return workflows;
	};

	Workflow.prototype.isLoopSafeRunForWorkflow = function(workflow, allWorkflows) {
		return !_.contains(this.workflowChain(allWorkflows), workflow);
	};

	return Workflow;

});

})();
