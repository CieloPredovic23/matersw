(function() {

"use strict";

angular.module("BitriseWorkflowEditor").factory("Workflow", function($rootScope, stepSourceService, Step) {

	var Workflow = function(id, workflowConfig) {
		this.id = id;
		this.workflowConfig = workflowConfig;

		if (!this.workflowConfig) {
			return;
		}

		this.steps = _.map(workflowConfig.steps, function(aWrappedUserStepConfig) {
			var stepCVS = Step.cvsFromWrappedStepConfig(aWrappedUserStepConfig);
			var step;
			var userStepConfig = aWrappedUserStepConfig[stepCVS];

			try {
				step = stepSourceService.stepFromCVS(stepCVS);
				step.userStepConfig = userStepConfig;
			}
			catch (error) {
				console.log(error.message);
				step = new Step(stepCVS, userStepConfig);
			}

			return step;
		});
	};

	Workflow.isValidID = function(id) {
		if (id === undefined) {
			return undefined;
		}

		if (id.length == 0) {
			return false;
		}

		var validIDRegexp = new RegExp("^[A-Za-z0-9-_.]+$");

		return validIDRegexp.test(id);
	};

	Workflow.prototype.beforeRunWorkflows = function(allWorkflows) {
		return _.map(this.workflowConfig.before_run, function(aWorkflowID) {
			return _.find(allWorkflows, {
				id: aWorkflowID
			});
		});
	};

	Workflow.prototype.afterRunWorkflows = function(allWorkflows) {
		return _.map(this.workflowConfig.after_run, function(aWorkflowID) {
			return _.find(allWorkflows, {
				id: aWorkflowID
			});
		});
	};

	Workflow.prototype.workflowChain = function(allWorkflows) {
		var workflows = [];

		_.each(this.beforeRunWorkflows(allWorkflows), function(aWorkflow) {
			workflows = workflows.concat(aWorkflow.workflowChain(allWorkflows));
		});

		workflows.push(this);

		_.each(this.afterRunWorkflows(allWorkflows), function(aWorkflow) {
			workflows = workflows.concat(aWorkflow.workflowChain(allWorkflows));
		});

		return workflows;
	};

	Workflow.prototype.isLoopSafeRunForWorkflow = function(workflow, allWorkflows) {
		return !_.contains(this.workflowChain(allWorkflows), workflow);
	};

	Workflow.prototype.description = function(description) {
		if (description !== undefined) {
			this.workflowConfig.description = description;
		}

		return this.workflowConfig.description;
	};

	Workflow.prototype.stack = function(stack, stacks) {
		if (stack !== undefined) {
			if (!this.workflowConfig.meta) {
				this.workflowConfig.meta = {};
			}
			if (!this.workflowConfig.meta.bitriseio) {
				this.workflowConfig.meta.bitriseio = {};
			}

			if (stack !== null) {
				this.workflowConfig.meta.bitriseio.stack = stack.id;
			}
			else {
				delete this.workflowConfig.meta.bitriseio.stack;
			}

			if (_.isEmpty(this.workflowConfig.meta.bitriseio)) {
				delete this.workflowConfig.meta.bitriseio;
			}
			if (_.isEmpty(this.workflowConfig.meta)) {
				delete this.workflowConfig.meta;
			}
		}

		if (!this.workflowConfig.meta || !this.workflowConfig.meta.bitriseio || !this.workflowConfig.meta.bitriseio.stack) {
			return null;
		}

		return _.find(stacks, {
			id: this.workflowConfig.meta.bitriseio.stack
		});
	};

	return Workflow;

});

})();
