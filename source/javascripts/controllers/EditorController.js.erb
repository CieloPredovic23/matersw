(function() {

"use strict";

angular.module("BitriseWorkflowEditor").controller("EditorController", function($scope, $q, $http, $location, $filter, communicationHelper, routeHelper, bitriseSteplibService, Progress, Popup, Workflow, Variable) {

	var viewModel = this;

	$scope.bitriseSteplibService = bitriseSteplibService;

	viewModel.appConfig;
	viewModel.workflows;
	viewModel.selectedWorkflow = null;
	viewModel.loadWorkflowsProgress = new Progress();

	viewModel.workflowEnvVarsPopup = new Popup();

	viewModel.addWorkflowPopup = new Popup({
		workflowID: ""
	});
	viewModel.addWorkflowPopup.afterDismissCallback = function() {
		viewModel.addWorkflowPopup.parameters.workflowID = "";
	};

	viewModel.addRunWorkflowPopup = new Popup();

	viewModel.selectedStep = null;
	viewModel.buildEnvironmentPreparePseudoStep = {
		title: "Preparing the Build Environment"
	};
	viewModel.virtualMachineCleanupPseudoStep = {
		title: "Cleaning up the Virtual Machine"
	};

	viewModel.renamedStep = null;
	viewModel.renamedStepTitle;

	viewModel.shouldShowStepDescription = false;

	viewModel.selectedStepRequestedVersion;

	viewModel.addStepPopup = new Popup({
		titleFilter: "",
		availableTypeTagFilters: undefined,
		typeTagFilter: null
	});
	viewModel.addStepPopup.beforeAppearCallback = function() {
		if (viewModel.addStepPopup.parameters.availableTypeTagFilters) {
			return;
		}

		viewModel.addStepPopup.parameters.availableTypeTagFilters = [];

		_.each(_.map(bitriseSteplibService.latestStepVersions, function(aStepVersion, stepID) {
			return bitriseSteplibService.steps[stepID][aStepVersion];
		}), function(aStep) {
			viewModel.addStepPopup.parameters.availableTypeTagFilters = _.union(viewModel.addStepPopup.parameters.availableTypeTagFilters, aStep.typeTags);
		});

		viewModel.addStepPopup.parameters.availableTypeTagFilters = _.uniq(viewModel.addStepPopup.parameters.availableTypeTagFilters);
	};
	viewModel.addStepPopup.afterDismissCallback = function() {
		viewModel.addStepPopup.parameters.titleFilter = "";
		viewModel.addStepPopup.parameters.typeTagFilter = null;
	};

	viewModel.selectedInput = null;
	viewModel.insertVariablePopup = new Popup({
		targetInput: undefined,
		insertPosition: undefined,
		loadInsertableVariablesProgress: new Progress(),
		insertableVariablesForAllWorkflows: [{
			source: {
				id: "from_bitriseio",
				title: "from bitrise.io"
			},
			variables: undefined
		}, {
			source: {
				id: "from_bitrise_cli",
				title: "from bitrise CLI"
			},
			variables: undefined
		}, {
			source: {
				id: "from_secrets",
				title: "from secrets"
			},
			variables: undefined
		}, {
			source: {
				id: "from_app_env_vars",
				title: "from app env vars"
			},
			variables: undefined
		}, {
			source: {
				id: "from_workflow_env_vars",
				title: "from workflow env vars"
			},
			variables: undefined
		}],
		insertableVariables: undefined
	});
	viewModel.insertVariablePopup.beforeAppearCallback = function() {
		viewModel.insertVariablePopup.parameters.loadInsertableVariablesProgress.start("<%= data.strings.editor.insertable_variables.load_progress %>");

		$q.all([function() {
			if (!_.find(viewModel.insertVariablePopup.parameters.insertableVariablesForAllWorkflows, function(variablesOfSource) {
				return variablesOfSource.source.id == "from_bitriseio";
			}).variables) {
				return loadDefaultOutputs();
			}

			return $q.when();
		}(), function() {
			if (!_.find(viewModel.insertVariablePopup.parameters.insertableVariablesForAllWorkflows, function(variablesOfSource) {
				return variablesOfSource.source.id == "from_secrets";
			}).variables) {
				return loadSecrets();
			}

			return $q.when();
		}()]).then(function() {
			viewModel.insertVariablePopup.parameters.loadInsertableVariablesProgress.success();
		}, function(error) {
			viewModel.insertVariablePopup.parameters.loadInsertableVariablesProgress.error(error)
		});

		var appEnvVarsBySource = _.find(viewModel.insertVariablePopup.parameters.insertableVariablesForAllWorkflows, function(variablesOfSource) {
			return variablesOfSource.source.id == "from_app_env_vars";
		});
		if (!appEnvVarsBySource.variables) {
			appEnvVarsBySource.variables = _.map(viewModel.appConfig.app.envs, function(aVariableConfig) {
				return Variable.createFromVariableConfig(aVariableConfig);
			});
		}

		_.find(viewModel.insertVariablePopup.parameters.insertableVariablesForAllWorkflows, function(variablesOfSource) {
			return variablesOfSource.source.id == "from_workflow_env_vars";
		}).variables = viewModel.selectedWorkflow.envVars;

		var outputsOfStepsBeforeSelectedInput = [];
		_.any(viewModel.selectedWorkflow.steps, function(aStep, index) {
			if (aStep == viewModel.selectedStep) {
				return true;
			}

			outputsOfStepsBeforeSelectedInput.push({
				source: {
					id: index,
					title: "output of step: " + aStep.title
				},
				variables: aStep.outputs
			});
		});

		viewModel.insertVariablePopup.parameters.insertableVariables =  _.union(viewModel.insertVariablePopup.parameters.insertableVariablesForAllWorkflows, outputsOfStepsBeforeSelectedInput);
	};

	viewModel.workflowSelected = function(workflow) {
		viewModel.selectedWorkflow = workflow;
	};

	function loadWorkflows() {
		viewModel.loadWorkflowsProgress.start("<%= data.strings.editor.load_workflows_progress.in_progress %>");

		$q.all([communicationHelper.readMessage("bitriseSteplibLoaded"), communicationHelper.readMessage("appConfigLoaded").then(function(appConfig) {
			viewModel.appConfig = appConfig;
		})]).then(function() {
			try {
				var allWorkflowsLoadedCallbacks = [];

				viewModel.workflows = _.map(viewModel.appConfig.workflows, function(aWorkflowConfig, aWorkflowID) {
					var workflow = new Workflow(aWorkflowID);
					allWorkflowsLoadedCallbacks.push(workflow.configureWithWorkflowConfig(aWorkflowConfig));

					return workflow;
				});

				_.each(allWorkflowsLoadedCallbacks, function(aCallback) {
					aCallback(viewModel.workflows);
				});

				viewModel.loadWorkflowsProgress.success();

				if (!viewModel.selectedWorkflow) {
					viewModel.workflowSelected(_.first(viewModel.workflows));
				}
			}
			catch (error) {
				viewModel.workflows = undefined;
				console.log(error);
				viewModel.loadWorkflowsProgress.error(new Error("<%= data.strings.editor.load_workflows_progress.error %>"));
			}
		});
	}

	viewModel.addWorkflowSelected = function() {
		viewModel.addWorkflowPopup.isVisible = true;
	};

	viewModel.addWorkflow = function() {
		var newWorkflow = angular.copy(viewModel.selectedWorkflow);
		newWorkflow.id = viewModel.addWorkflowPopup.parameters.workflowID;
		viewModel.workflows.push(newWorkflow);

		viewModel.addWorkflowPopup.isVisible = false;
		viewModel.workflowSelected(newWorkflow);
	};

	viewModel.manageWorkflowEnvVarsSelected = function() {
		console.log("viewModel.manageWorkflowEnvVarsSelected called");
		// TODO: implement
		viewModel.workflowEnvVarsPopup.isVisible = true;
	};

	viewModel.addRunWorkflowSelected = function(isBeforeRunMode) {
		viewModel.addRunWorkflowPopup.parameters.isBeforeRunMode = isBeforeRunMode;
		viewModel.addRunWorkflowPopup.isVisible = true;
	};

	viewModel.runWorkflowSelected = function(workflow) {
		viewModel.selectedWorkflow[viewModel.addRunWorkflowPopup.parameters.isBeforeRunMode ? "beforeRunWorkflows" : "afterRunWorkflows"].push(workflow);
		viewModel.addRunWorkflowPopup.isVisible = false;
	};

	viewModel.availableRunWorkflows = function() {
		return _.filter(viewModel.workflows, function(aWorkflow) {
			return aWorkflow.isLoopSafeRunForWorkflow(viewModel.selectedWorkflow);
		});
	};

	viewModel.deleteWorkflowSelected = function() {
		_.each(viewModel.workflows, function(aWorkflow) {
			_.each([aWorkflow.beforeRunWorkflows, aWorkflow.afterRunWorkflows], function(aRunWorkflows) {
				if (aRunWorkflows) {
					var runWorkflowIndex = _.indexOf(aRunWorkflows, viewModel.selectedWorkflow);
					aRunWorkflows.splice(runWorkflowIndex, 1);
				}
			});
		});

		var index = _.indexOf(viewModel.workflows, viewModel.selectedWorkflow);
		viewModel.workflows.splice(index, 1);

		viewModel.workflowSelected(_.first(viewModel.workflows));
	};

	viewModel.stepsIncludingPseudoSteps = function() {
		return _.union([viewModel.buildEnvironmentPreparePseudoStep], viewModel.selectedWorkflow.steps, [viewModel.virtualMachineCleanupPseudoStep]);
	};

	viewModel.isPseudoStep = function(step) {
		return step == viewModel.buildEnvironmentPreparePseudoStep || step == viewModel.virtualMachineCleanupPseudoStep;
	};

	viewModel.stepSelected = function(step) {
		if (viewModel.renamedStep) {
			viewModel.renamedStepCancelled();
		}

		if (viewModel.shouldShowStepDescription) {
			viewModel.shouldShowStepDescription = false;
		}

		if (viewModel.selectedInput) {
			viewModel.selectedInput = null;
		}

		viewModel.selectedStep = step;
		viewModel.selectedStepRequestedVersion = step && !viewModel.isPseudoStep(step) ? step.requestedVersion() : undefined;
	};

	viewModel.addStepSelectedAtIndex = function(index) {
		viewModel.addStepPopup.parameters.newStepIndex = index;
		viewModel.addStepPopup.isVisible = true;
	};

	viewModel.filteredSteps = function() {
		if (!bitriseSteplibService.steps) {
			return;
		}

		return _.reject(_.map(bitriseSteplibService.steps, function(aStep, stepID) {
			return aStep[bitriseSteplibService.latestStepVersions[stepID]];
		}), function(aStep) {
			if (viewModel.addStepPopup.parameters.titleFilter.length > 0 && aStep.title.toLowerCase().indexOf(viewModel.addStepPopup.parameters.titleFilter.toLowerCase()) == -1) {
				return true;
			}

			if (viewModel.addStepPopup.parameters.typeTagFilter && !_.contains(aStep.typeTags, viewModel.addStepPopup.parameters.typeTagFilter)) {
				return true;
			}
		});
	};

	viewModel.addStep = function(step) {
		var newStep = angular.copy(step);
		viewModel.selectedWorkflow.steps.splice(viewModel.addStepPopup.parameters.newStepIndex - 1, 0, newStep);

		viewModel.addStepPopup.isVisible = false;
		viewModel.stepSelected(newStep);
	};

	viewModel.renameStepSelected = function() {
		viewModel.renamedStep = viewModel.selectedStep;
		viewModel.renamedStepTitle = viewModel.renamedStep.title ? viewModel.renamedStep.title : viewModel.renamedStep.id;
	};

	viewModel.renameStepConfirmed = function() {
		viewModel.renamedStep.title = viewModel.renamedStepTitle;
		viewModel.renamedStep = null;
	};

	viewModel.renamedStepCancelled = function() {
		viewModel.renamedStepTitle = undefined;
		viewModel.renamedStep = null;
	};

	viewModel.cloneStepSelected = function() {
		var index = _.indexOf(viewModel.selectedWorkflow.steps, viewModel.selectedStep);
		var clonedStep = angular.copy(viewModel.selectedStep);
		viewModel.selectedWorkflow.steps.splice(index + 1, 0, clonedStep);

		viewModel.stepSelected(clonedStep);
	};

	viewModel.deleteStepSelected = function() {
		var index = _.indexOf(viewModel.selectedWorkflow.steps, viewModel.selectedStep);
		viewModel.selectedWorkflow.steps.splice(index, 1);

		viewModel.stepSelected(null);
	};

	viewModel.inputSelected = function(input) {
		viewModel.selectedInput = input;
	};

	viewModel.insertVariableSelected = function(insertPosition) {
		viewModel.insertVariablePopup.parameters.insertPosition = insertPosition;
		viewModel.insertVariablePopup.isVisible = true;
	};

	function loadDefaultOutputs() {
		var appSlug = $location.search().app_slug;
		var apiToken = $location.search().api_token;
		var requestURL = routeHelper.replacedRoute("<%= default_outputs_get_path %>", {
			app_slug: appSlug,
			api_token: apiToken
		});

		return $q(function(resolve, reject) {
			$http.get(requestURL).then(function(response) {
				_.each(response.data, function(defaultOutputConfigs, sourceID) {
					var defaultOutputsOfSource = _.find(viewModel.insertVariablePopup.parameters.insertableVariablesForAllWorkflows, function(variablesOfSource) {
						return variablesOfSource.source.id == sourceID;
					});

					defaultOutputsOfSource.variables = [];
					_.each(defaultOutputConfigs, function(aDefaultOutputConfig) {
						var defaultOutput = Variable.createFromVariableConfig(aDefaultOutputConfig);
						defaultOutputsOfSource.variables.push(defaultOutput);
					});
				});

				resolve();
			}, function(response) {
				if (!response || !response.data) {
					reject(new Error("<%= data.strings.editor.default_outputs.load_default_error %>"));

					return;
				}

				reject(new Error("<%= data.strings.editor.default_outputs.load_error_prefix %> " + response.data));
			});
		});
	};

	function loadSecrets() {
		var appSlug = $location.search().app_slug;
		var apiToken = $location.search().api_token;
		var requestURL = routeHelper.replacedRoute("<%= secrets_get_path %>", {
			app_slug: appSlug,
			api_token: apiToken
		});

		return $q(function(resolve, reject) {
			$http.get(requestURL).then(function(response) {
				var secretsBySource = _.find(viewModel.insertVariablePopup.parameters.insertableVariablesForAllWorkflows, function(variablesOfSource) {
					return variablesOfSource.source.id == "from_secrets";
				});

				secretsBySource.variables = [];
				_.each(response.data.envs, function(aSecretConfig) {
					var secret = Variable.createFromVariableConfig(aSecretConfig);
					secretsBySource.variables.push(secret);
				});

				resolve();
			}, function(response) {
				if (!response || !response.data) {
					reject(new Error("<%= data.strings.secrets.load_default_error %>"));

					return;
				}

				reject(new Error("<%= data.strings.secrets.load_error_prefix %> " + response.data));
			});
		});
	};

	viewModel.insertVariable = function(variable) {
		var oldValue = viewModel.selectedInput.value;
		viewModel.selectedInput.value = oldValue.slice(0, viewModel.insertVariablePopup.parameters.insertPosition) + $filter("prettifiedVariableKey")(variable) + oldValue.slice(viewModel.insertVariablePopup.parameters.insertPosition);
		viewModel.insertVariablePopup.isVisible = false;
	};

	loadWorkflows();

});

})();
