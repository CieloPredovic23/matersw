(function() {

"use strict";

angular.module("BitriseWorkflowEditor").controller("EnvVarsController", function($scope, $rootScope, $q, requestService, Progress, Variable) {

	var viewModel = this;

	var mode;
	var defaultEnvVarConfig = {
		opts: {
			is_expand: true
		}
	};
	var envVarsWatchers;

	viewModel.secretConfigs;
	viewModel.appConfig;
	viewModel.loadEnvVarsProgress = new Progress();
	viewModel.envVarsBySource;

	$scope.$on("$destroy", $rootScope.$on("MainController::appConfigLoaded", function(event, appConfig) {
		configureWithAppConfig(appConfig);
	}));

	$scope.$on("$destroy", $rootScope.$on("MainController::discardChanges", function(event, appConfig) {
		switch (mode) {
			case "secrets":
				_.first(viewModel.envVarsBySource).envVars = angular.copy(_.first(viewModel.envVarsBySource).savedEnvVars);

				break;
			case "env-vars":
				configureWithAppConfig(appConfig);

				break;
		}
	}));

	viewModel.configureWithMode = function(_mode) {
		mode = _mode;

		switch (mode) {
			case "secrets":
				loadSecrets();

				break;
		}
	};

	function loadSecrets() {
		viewModel.loadEnvVarsProgress.start("<%= data[:strings][:env_vars][:load_progress][:in_progress] %>");

		var canceler = $q.defer();

		$scope.$on("$destroy", function() {
			canceler.resolve();
		});

		requestService.getSecrets({
			timeout: canceler.promise
		}).then(function(secretConfigs) {
			viewModel.secretConfigs = secretConfigs;

			viewModel.envVarsBySource = [{
				type: "secrets",
				notification: "<%= data[:strings][:env_vars][:secrets][:notification] %>",
				envVars: _.map(secretConfigs, function(aSecretConfig) {
					return new Variable(aSecretConfig, defaultEnvVarConfig);
				})
			}];

			_.first(viewModel.envVarsBySource).savedEnvVars = angular.copy(_.first(viewModel.envVarsBySource).envVars);

			configureEnvVarsWatchers();

			viewModel.loadEnvVarsProgress.success();
		}, function(error) {
			viewModel.loadEnvVarsProgress.error(error);
		});
	}

	function configureWithAppConfig(appConfig) {
		switch (mode) {
			case "secrets":
				break;
			case "env-vars":
				viewModel.appConfig = appConfig;
				viewModel.envVarsBySource = [];

				if (appConfig.app.envs) {
					viewModel.envVarsBySource.push({
						type: "app",
						warning: "<%= data[:strings][:env_vars][:app][:warning] %>",
						envVars: _.map(appConfig.app.envs, function(anAppEnvVarConfig) {
							return new Variable(anAppEnvVarConfig, defaultEnvVarConfig);
						})
					});
				}

				_.each(appConfig.workflows, function(aWorkflowConfig, aWorkflowID) {
					viewModel.envVarsBySource.push({
						type: "workflow",
						workflowID: aWorkflowID,
						notification: "<%= data[:strings][:env_vars][:workflow][:notification] %>",
						envVars: _.map(aWorkflowConfig.envs, function(anEnvVarConfig) {
							return new Variable(anEnvVarConfig, defaultEnvVarConfig);
						})
					});
				});

				configureEnvVarsWatchers();

				break;
		}

		viewModel.loadEnvVarsProgress.success();
	}

	function configureEnvVarsWatchers() {
		if (envVarsWatchers) {
			_.each(envVarsWatchers, function(anEnvVarsWatcher) {
				anEnvVarsWatcher();
			});
		}

		envVarsWatchers = _.map(viewModel.envVarsBySource, function(envVarsOfSource) {
			return $scope.$watch(function() {
				return envVarsOfSource;
			}, function(envVarsOfSource) {
				switch (envVarsOfSource.type) {
					case "secrets":
						if (!viewModel.secretConfigs) {
							return;
						}

						viewModel.secretConfigs.envs = _.map(envVarsOfSource.envVars, function(anEnvVar) {
							return anEnvVar.userVariableConfig;
						});

						break;
					case "app":
						if (!viewModel.appConfig) {
							return;
						}

						if (!viewModel.appConfig.app) {
							viewModel.appConfig.app = {};
						}

						viewModel.appConfig.app.envs = _.map(envVarsOfSource.envVars, function(anEnvVar) {
							return anEnvVar.userVariableConfig;
						});

						if (_.isEmpty(viewModel.appConfig.app.envs)) {
							delete viewModel.appConfig.app["envs"];
						}

						if (_.isEmpty(viewModel.appConfig.app)) {
							delete viewModel.appConfig["app"];
						}

						break;
					case "workflow": {
						if (!viewModel.appConfig) {
							return;
						}

						viewModel.appConfig.workflows[envVarsOfSource.workflowID].envs = _.map(envVarsOfSource.envVars, function(anEnvVar) {
							return anEnvVar.userVariableConfig;
						});

						if (_.isEmpty(viewModel.appConfig.workflows[envVarsOfSource.workflowID].envs)) {
							delete viewModel.appConfig.workflows[envVarsOfSource.workflowID]["envs"];
						}

						break;
					}
				}
			}, true);
		});
	}

	viewModel.addToEnvVars = function(envVars) {
		var newEnvVar = new Variable({
			"<%= data[:strings][:env_vars][:new_default_key] %>": ""
		}, defaultEnvVarConfig);

		envVars.push(newEnvVar);
	};

	viewModel.removeEnvVarFromEnvVars = function(envVar, envVars) {
		var index = _.indexOf(envVars, envVar);

		envVars.splice(index, 1);
	};

	$scope.$on("$destroy", $rootScope.$on("MainController::requestValidationBeforeSave", function() {
		if (_.any(viewModel.envVarsBySource, function(envVarsOfSource) {
			return _.any(envVarsOfSource.envVars, function(anEnvVar) {
				return anEnvVar.key().length == 0;
			});
		})) {
			$rootScope.$emit("MainController::validationError", new Error("<%= data[:strings][:env_vars][:env_var_without_key] %>"));
		};
	}));

	$scope.$on("$destroy", $rootScope.$on("SecretsController::saveSecrets", function(event, resolve, reject) {
		var canceler = $q.defer();

		$scope.$on("$destroy", function() {
			canceler.resolve();
		});

		requestService.postSecrets(_.find(viewModel.envVarsBySource, {
			type: "secrets"
		}).envVars, {
			timeout: canceler.reject
		}).then(function() {
			resolve();

			loadSecrets();
		}, function(error) {
			reject(error)
		});
	}));

	$rootScope.$emit("MainController::menuContentIsLoadedAndReady");

});

})();
