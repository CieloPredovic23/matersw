(function() {

"use strict";

angular.module("BitriseWorkflowEditor").controller("MainController", function($scope, $rootScope, requestService, Progress, Popup) {

	var viewModel = this;

	viewModel.configureModeProgress = new Progress();

	viewModel.menus;
	viewModel.selectedMenu;
	viewModel.menuProgress = new Progress();

	var appConfig;
	var savedAppConfig;
	viewModel.loadAppConfigProgress = new Progress();

	viewModel.saveProgress = new Progress();

	function configureMode() {
		try {
			requestService.configureMode();
		}
		catch (error) {
			viewModel.configureModeProgress.error(error);

			return;
		}

		viewModel.menus = _.compact([{
			title: "<%= data[:strings][:main][:menus][0] %>",
			path: "<%= endpoint_path(data[:routes][:endpoints][:workflows]) %>",
			cssClass: "workflows"
		}, (requestService.mode == "website" ? {
			title: "<%= data[:strings][:main][:menus][1] %>",
			path: "<%= endpoint_path(data[:routes][:endpoints][:code_signing]) %>",
			cssClass: "code-signing"
		} : null), {
			title: "<%= data[:strings][:main][:menus][2] %>",
			path: "<%= endpoint_path(data[:routes][:endpoints][:secrets]) %>",
			cssClass: "secrets"
		}, {
			title: "<%= data[:strings][:main][:menus][3] %>",
			path: "<%= endpoint_path(data[:routes][:endpoints][:app_env_vars]) %>",
			cssClass: "env-vars"
		}, {
			title: "<%= data[:strings][:main][:menus][4] %>",
			path: "<%= endpoint_path(data[:routes][:endpoints][:triggers]) %>",
			cssClass: "triggers"
		}, {
			title: "<%= data[:strings][:main][:menus][5] %>",
			path: "<%= endpoint_path(data[:routes][:endpoints][:yml]) %>",
			cssClass: "yml"
		}]);
	}

	function loadAppConfig() {
		viewModel.loadAppConfigProgress.start("<%= data[:strings][:main][:load_progress][:loading] %>");

		requestService.getAppConfig().then(function(_appConfig) {
			appConfig = _appConfig;
			savedAppConfig = angular.copy(_appConfig);
			minimizeAppConfig(appConfig);

			viewModel.loadAppConfigProgress.success();

			$rootScope.$emit("MainController::appConfigLoaded", appConfig);
		}, viewModel.loadAppConfigProgress.error);
	}

	function minimizeAppConfig(_appConfig) {
		var variableConfigs = [];

		if (_appConfig.app && _appConfig.app.envs) {
			variableConfigs = _.union(variableConfigs, _appConfig.app.envs);
		}

		if (_appConfig.workflows) {
			_.each(_appConfig.workflows, function(aWorkflowConfig) {
				variableConfigs = _.union(variableConfigs, aWorkflowConfig.envs);

				_.each(aWorkflowConfig.steps, function(aWrappedUserStepConfig) {
					var stepConfig = aWrappedUserStepConfig[_.first(_.keys(angular.fromJson(angular.toJson(aWrappedUserStepConfig))))];

					if (stepConfig.source && _.isEmpty(stepConfig.source)) {
						delete stepConfig["source"];
					}

					if (stepConfig.deps && _.isEmpty(stepConfig.deps)) {
						delete stepConfig["deps"];
					}
				});
			});
		}

		_.each(variableConfigs, function(aVariableConfig) {
			if (aVariableConfig.opts && _.isEmpty(aVariableConfig.opts)) {
				delete aVariableConfig["opts"];
			}
		});
	}

	$scope.$on("$routeChangeStart", function() {
		viewModel.menuProgress.start("Loading, wait a sec...");
	});

	$scope.$on("$routeChangeSuccess", function() {
		viewModel.menuProgress.success();
	});

	$scope.$on("$routeChangeError", function() {
		viewModel.menuProgress.error(new Error("Failed to load menu."));
	});

	viewModel.discardChanges = function() {
		appConfig = angular.copy(savedAppConfig);
		minimizeAppConfig(appConfig);

		$rootScope.$emit("MainController::discardChanges", appConfig);
	};

	viewModel.saveChanges = function() {
		viewModel.saveProgress.start("<%= data[:strings][:main][:load_progress][:saving] %>");

		var error;
		var unwatchError = $rootScope.$on("MainController::validationError", function(event, _error) {
			error = _error;
		});

		$rootScope.$emit("MainController::requestValidationBeforeSave");
		unwatchError();

		if (error) {
			viewModel.saveProgress.error(error);

			return;
		}

		requestService.postAppConfig(appConfig).then(function() {
			viewModel.saveProgress.success();

			loadAppConfig();
		}, viewModel.saveProgress.error);
	};

	$rootScope.$on("MainController::menuContentIsLoadedAndReady", function() {
		loadAppConfig();
	});

	configureMode();

});

})();
