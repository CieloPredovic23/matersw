(function() {

"use strict";

angular.module("BitriseWorkflowEditor").controller("TriggersController", function($scope, $rootScope, Trigger, Workflow) {

	var viewModel = this;

	viewModel.appConfig;
	viewModel.workflows;
	viewModel.triggers;
	viewModel.selectedTrigger = null;
	viewModel.editedTrigger;
	viewModel.newTriggerIndex;

	$scope.$on("$destroy", $rootScope.$on("MainController::appConfigLoaded", function(event, appConfig) {
		configureWithAppConfig(appConfig);
	}));

	$scope.$on("$destroy", $rootScope.$on("MainController::discardChanges", function(event, appConfig) {
		configureWithAppConfig(appConfig);
	}));

	function configureWithAppConfig(appConfig) {
		viewModel.appConfig = appConfig;
		viewModel.workflows = _.map(viewModel.appConfig.workflows, function(aWorkflowConfig, workflowID) {
			return new Workflow(workflowID, aWorkflowConfig);
		});
		syncTriggersWithAppConfig();

		viewModel.triggerSelected(null);
	}

	function syncTriggersWithAppConfig() {
		viewModel.triggers = viewModel.appConfig.trigger_map ? _.map(viewModel.appConfig.trigger_map, function(triggerConfig) {
			return new Trigger(triggerConfig);
		}) : [];
	}

	viewModel.triggerSelected = function(trigger) {
		viewModel.newTriggerIndex = undefined;
		viewModel.selectedTrigger = trigger;
		viewModel.editedTrigger = viewModel.selectedTrigger;
	};

	viewModel.deleteTriggerSelected = function(trigger) {
		var index = _.indexOf(viewModel.triggers, trigger);
		viewModel.appConfig.trigger_map.splice(index, 1);
		if (_.isEmpty(viewModel.appConfig.trigger_map)) {
			delete viewModel.appConfig["trigger_map"];
		}
		syncTriggersWithAppConfig();

		viewModel.triggerSelected(null);
	};

	viewModel.addTriggerSelectedAtIndex = function(index) {
		var newTrigger = new Trigger();
		newTrigger.type("push");

		viewModel.editedTrigger = newTrigger;
		viewModel.newTriggerIndex = index;
	};

	viewModel.triggerEditFinished = function() {
		if (!viewModel.appConfig.trigger_map) {
			viewModel.appConfig.trigger_map = [];
		}

		if (viewModel.selectedTrigger) {
			var index = _.indexOf(viewModel.triggers, viewModel.selectedTrigger);
			viewModel.appConfig.trigger_map.splice(index, 1, viewModel.editedTrigger.triggerConfig);
		}
		else {
			viewModel.appConfig.trigger_map.splice(viewModel.newTriggerIndex, 0, viewModel.editedTrigger.triggerConfig);
		}
		syncTriggersWithAppConfig();

		viewModel.triggerSelected(null);
	};

	viewModel.triggerEditCancelled = function() {
		viewModel.triggerSelected(null);
	};

	$scope.$on("$destroy", $rootScope.$on("MainController::requestValidationBeforeSave", function() {
		if (_.any(viewModel.triggers, function(aTrigger) {
			return !_.find(viewModel.workflows, function(aWorkflow) {
				return aWorkflow.id == aTrigger.workflowID();
			});
		})) {
			$rootScope.$emit("MainController::validationError", new Error("<%= data[:strings][:triggers][:trigger_with_invalid_workflow] %>"));
		}
	}));

	$rootScope.$emit("MainController::menuContentIsLoadedAndReady");

});

})();
