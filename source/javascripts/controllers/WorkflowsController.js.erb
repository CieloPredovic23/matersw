(function() {

"use strict";

angular.module("BitriseWorkflowEditor").controller("WorkflowsController", function($scope, $rootScope, $q, bitriseSteplibService, Progress, Popup, Workflow, Variable) {

	var viewModel = this;

	viewModel.appConfig;
	viewModel.workflows;
	viewModel.selectedWorkflow = null;
	var envVarEditorLoadedAndReadyDeferred = $q.defer();
	viewModel.configureWorkflowsProgress = new Progress();

	viewModel.workflowEnvVarsPopup = new Popup();
	viewModel.workflowEnvVarsPopup.beforeAppearCallback = function() {
		if (!viewModel.workflowEnvVarsPopup.parameters.templateLoadProgress) {
			viewModel.workflowEnvVarsPopup.parameters.templateLoadProgress = new Progress();
			viewModel.workflowEnvVarsPopup.parameters.templateLoadProgress.start("<%= data[:strings][:env_var_editor][:template_load_inprogress] %>");
		}
	};

	viewModel.addWorkflowPopup = new Popup({
		workflowID: ""
	});
	viewModel.addWorkflowPopup.afterDismissCallback = function() {
		viewModel.addWorkflowPopup.parameters.workflowID = "";
	};

	viewModel.addRunWorkflowPopup = new Popup();

	viewModel.selectedWorkflowSteps;
	var buildEnvironmentPreparePseudoStep = {
		type: function() {
			return "pseudo-step";
		},
		displayName: function() {
			return "<%= data[:strings][:workflows][:steps][:pseudo_preparing] %>";
		}
	};
	var virtualMachineCleanupPseudoStep = {
		type: function() {
			return "pseudo-step";
		},
		displayName: function() {
			return "<%= data[:strings][:workflows][:steps][:pseudo_cleaning] %>";
		}
	};
	viewModel.selectedStep = null;

	$rootScope.$on("MainController::appConfigLoaded", function(event, appConfig) {
		configureWorkflowsFromAppConfig(appConfig);
	});

	$rootScope.$on("MainController::discardChanges", function(event, appConfig) {
		configureWorkflowsFromAppConfig(appConfig);
	});

	$rootScope.$on("MainController::requestingAppConfigUpdateBeforeSave", function() {

	});

	function configureWorkflowsFromAppConfig(appConfig) {
		viewModel.configureWorkflowsProgress.start("<%= data[:strings][:workflows][:load_workflows_progress][:in_progress] %>");

		var previouslySelectedWorkflowID = viewModel.selectedWorkflow ? viewModel.selectedWorkflow.id : null;

		viewModel.appConfig = appConfig;

		bitriseSteplibService.load().then(function() {
			try {
				var allWorkflowsLoadedCallbacks = [];

				viewModel.workflows = _.map(viewModel.appConfig.workflows, function(aWorkflowConfig, aWorkflowID) {
					return new Workflow(aWorkflowID, aWorkflowConfig);
				});

				var selectedWorkflow = _.find(viewModel.workflows, function(aWorkflow) {
					return aWorkflow.id == previouslySelectedWorkflowID;
				});

				if (!selectedWorkflow) {
					selectedWorkflow = _.first(viewModel.workflows);
				}

				viewModel.workflowSelected(selectedWorkflow);

				viewModel.configureWorkflowsProgress.success();
			}
			catch (error) {
				viewModel.workflows = undefined;
				console.log(error);
				viewModel.configureWorkflowsProgress.error(new Error("<%= data[:strings][:workflows][:load_workflows_progress][:error] %>"));
			}
		});
	}

	viewModel.workflowSelected = function(workflow) {
		if (workflow === undefined) {
			return viewModel.selectedWorkflow;
		}

		if (workflow == viewModel.selectedWorkflow) {
			return;
		}

		if (viewModel.selectedStep) {
			viewModel.stepSelected(null);
		}
		
		viewModel.selectedWorkflow = workflow;
		configureSelectedWorkflowSteps();
	};

	viewModel.workflowSelectedWithID = function(workflowID) {
		viewModel.workflowSelected(_.find(viewModel.workflows, {
			id: workflowID
		}));
	};

	viewModel.addWorkflowSelected = function() {
		viewModel.addWorkflowPopup.isVisible = true;
	};

	viewModel.addWorkflow = function() {
		viewModel.appConfig.workflows[viewModel.addWorkflowPopup.parameters.workflowID] = angular.copy(viewModel.selectedWorkflow.workflowConfig);

		viewModel.addWorkflowPopup.isVisible = false;

		configureWorkflowsFromAppConfig(viewModel.appConfig);

		viewModel.workflowSelected(_.find(viewModel.workflows, {
			id: viewModel.addWorkflowPopup.parameters.workflowID
		}));
	};

	viewModel.manageWorkflowEnvVarsSelected = function() {
		viewModel.workflowEnvVarsPopup.isVisible = true;

		envVarEditorLoadedAndReadyDeferred.promise.then(function() {
			$rootScope.$emit("EnvVarsController::configure", {
				source: "workflow-env-vars",
				envVars: _.map(viewModel.selectedWorkflow.workflowConfig.envs, function(anEnvVarConfig) {
					return new Variable(anEnvVarConfig);
				})
			});
		});
	};

	$rootScope.$on("EnvVarsController::loadedAndReady", function() {
		envVarEditorLoadedAndReadyDeferred.resolve();
	});

	viewModel.addRunWorkflowSelected = function(isBeforeRunMode) {
		viewModel.addRunWorkflowPopup.parameters.isBeforeRunMode = isBeforeRunMode;
		viewModel.addRunWorkflowPopup.isVisible = true;
	};

	viewModel.runWorkflowSelected = function(workflow) {
		var runWorkflowKey = viewModel.addRunWorkflowPopup.parameters.isBeforeRunMode ? "before_run" : "after_run";
		if (!viewModel.selectedWorkflow.workflowConfig[runWorkflowKey]) {
			viewModel.selectedWorkflow.workflowConfig[runWorkflowKey] = [];
		}

		viewModel.selectedWorkflow.workflowConfig[runWorkflowKey].push(workflow.id);
		viewModel.addRunWorkflowPopup.isVisible = false;
	};

	viewModel.availableRunWorkflows = function() {
		return _.filter(viewModel.workflows, function(aWorkflow) {
			return aWorkflow.isLoopSafeRunForWorkflow(viewModel.selectedWorkflow, viewModel.workflows);
		});
	};

	viewModel.deleteWorkflowSelected = function() {
		_.each(viewModel.workflows, function(aWorkflow) {
			_.each([aWorkflow.before_run, aWorkflow.after_run], function(aRunWorkflows) {
				if (aRunWorkflows) {
					var runWorkflowIndex = _.indexOf(aRunWorkflows, viewModel.selectedWorkflow.id);
					aRunWorkflows.splice(runWorkflowIndex, 1);
				}
			});
		});

		delete viewModel.appConfig.workflows[viewModel.selectedWorkflow.id];

		configureWorkflowsFromAppConfig(viewModel.appConfig);
	};

	function configureSelectedWorkflowSteps() {
		if (!viewModel.selectedWorkflow) {
			return undefined;
		}

		viewModel.selectedWorkflowSteps = _.union([buildEnvironmentPreparePseudoStep], _.map(viewModel.selectedWorkflow.workflowConfig.steps, function(aWrappedUserStepConfig) {
			var stepCVS = _.first(_.keys(angular.fromJson(angular.toJson(aWrappedUserStepConfig))));
			var step;
			var userStepConfig = aWrappedUserStepConfig[stepCVS];

			try {
				step = bitriseSteplibService.stepFromCVS(stepCVS);
				step.userStepConfig = userStepConfig;
			}
			catch (error) {
				step = new Step(stepCVS, userStepConfig);
			}

			return step;
		}), [virtualMachineCleanupPseudoStep]);
	}

	viewModel.stepSelected = function(step) {
		if (step == viewModel.selectedStep) {
			return;
		}

		viewModel.selectedStep = step;

		$rootScope.$emit("StepController::configureWithStep", viewModel.selectedStep);
	};

	viewModel.addStepSelectedBeforeStep = function(step) {
		var index = step == virtualMachineCleanupPseudoStep ? viewModel.selectedWorkflowSteps.length : _.findIndex(viewModel.selectedWorkflow.workflowConfig.steps, function(aWrappedUserStepConfig) {
			return aWrappedUserStepConfig[step.cvs] == step.userStepConfig;
		});

		$rootScope.$emit("AddStepController::showAddStepPopupWithInsertIndex", index);
	};

	$rootScope.$on("AddStepController::addStepAtIndex", function(event, step, index) {
		var wrappedUserStepConfig = {};
		wrappedUserStepConfig[step.cvs] = {};

		if (!viewModel.selectedWorkflow.workflowConfig.steps) {
			viewModel.selectedWorkflow.workflowConfig.steps = [];
		}
		viewModel.selectedWorkflow.workflowConfig.steps.splice(index - 1, 0, wrappedUserStepConfig);

		configureSelectedWorkflowSteps();

		viewModel.stepSelected(_.find(viewModel.selectedWorkflowSteps, function(aStep) {
			return aStep.userStepConfig == wrappedUserStepConfig[step.cvs];
		}));
	});

	viewModel.cloneStepSelected = function() {
		var wrappedUserStepConfig = {};
		wrappedUserStepConfig[viewModel.selectedStep.cvs] = angular.copy(viewModel.selectedStep.userStepConfig);
		var index = _.findIndex(viewModel.selectedWorkflow.workflowConfig.steps, function(aWrappedUserStepConfig) {
			return aWrappedUserStepConfig[viewModel.selectedStep.cvs] == viewModel.selectedStep.userStepConfig;
		});

		viewModel.selectedWorkflow.workflowConfig.steps.splice(index + 1, 0, wrappedUserStepConfig);

		configureSelectedWorkflowSteps();

		viewModel.stepSelected(_.find(viewModel.selectedWorkflowSteps, function(aStep) {
			return aStep.userStepConfig == wrappedUserStepConfig[aStep.cvs];
		}));
	};

	viewModel.deleteStepSelected = function() {
		var index = _.findIndex(viewModel.selectedWorkflow.workflowConfig.steps, function(aWrappedUserStepConfig) {
			return aWrappedUserStepConfig[viewModel.selectedStep.cvs] == viewModel.selectedStep.userStepConfig;
		});

		viewModel.selectedWorkflow.workflowConfig.steps.splice(index, 1);

		configureSelectedWorkflowSteps();

		viewModel.stepSelected(null);
	};

	$rootScope.$on("InsertVariableController::requestingParametersForInsertVariable", function() {
		$rootScope.$emit("InsertVariableController::configureInsertVariableWithParameters", viewModel.appConfig, viewModel.selectedWorkflow, viewModel.selectedStep);
	});

	$rootScope.$emit("MainController::menuContentIsLoadedAndReady");

});

})();
