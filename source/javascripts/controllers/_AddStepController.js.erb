(function() {

"use strict";

angular.module("BitriseWorkflowEditor").controller("AddStepController", function($scope, $rootScope, stepSourceService, Popup) {

	var viewModel = this;

	var steps;

	viewModel.popup = new Popup();
	viewModel.popup.beforeAppearCallback = function() {
		if (viewModel.availableTypeTagFilters) {
			return;
		}

		viewModel.availableTypeTagFilters = [];

		steps = [];
		steps = steps.concat(stepSourceService.localSteps);
		steps = steps.concat(stepSourceService.gitSteps);
		_.each(stepSourceService.libraries, function(aLibrary) {
			steps = steps.concat(_.map(aLibrary.latestStepVersions, function(aStepVersion, stepID) {
				return aLibrary.steps[stepID][aStepVersion];
			}));
		});

		_.each(steps, function(aStep) {
			viewModel.availableTypeTagFilters = _.union(viewModel.availableTypeTagFilters, aStep.typeTags());
		});

		viewModel.availableTypeTagFilters = _.uniq(viewModel.availableTypeTagFilters);
	};
	viewModel.popup.afterDismissCallback = function() {
		viewModel.titleFilter = "";
		viewModel.typeTagFilter = null;
	};

	viewModel.insertIndex;
	viewModel.titleFilter = "";
	viewModel.typeTagFilter = null;
	viewModel.availableTypeTagFilters;

	$scope.$on("$destroy", $rootScope.$on("AddStepController::showAddStepPopupWithInsertIndex", function(event, insertIndex) {
		viewModel.insertIndex = insertIndex;
		viewModel.popup.isVisible = true;
	}));

	viewModel.addStep = function(step) {
		$rootScope.$emit("AddStepController::addStepAtIndex", step, viewModel.insertIndex);
		viewModel.popup.isVisible = false;
	};

	viewModel.filteredSteps = function() {
		return _.reject(_.filter(steps, function(aStep) {
			return _.find(stepSourceService.libraries, {
				url: aStep.libraryURL
			});
		}), function(aStep) {
			if (viewModel.titleFilter.length > 0 && aStep.title().toLowerCase().indexOf(viewModel.titleFilter.toLowerCase()) == -1) {
				return true;
			}

			if (viewModel.typeTagFilter && !_.contains(aStep.typeTags(), viewModel.typeTagFilter)) {
				return true;
			}
		});
	};

});

})();
