(function() {
	"use strict";

	angular
		.module("BitriseWorkflowEditor")
		.controller("AndroidKeystoreController", function(
			$scope,
			$q,
			$timeout,
			requestService,
			stringService,
			Popup,
			Progress,
			KeystoreFile
		) {
			var viewModel = this;

			var maximumFileSizeInMegabytes = 5;
			var reloadIntervalInSeconds = 2;

			$scope.KeystoreFile = KeystoreFile;
			viewModel.keystoreFile;
			var savedPassword;
			var savedAlias;
			var savedPrivateKeyPassword;
			viewModel.isMenuVisible = false;
			viewModel.loadProgress = new Progress();
			viewModel.actionProgress = new Progress();
			viewModel.keystoreFileIsExposeGetterSetterConfig;
			viewModel.uploadInstruction = stringService.stringReplacedWithParameters(
				"<%= data[:strings][:code_signing][:android_keystore][:upload_action] %>",
				{
					maximum_file_size_in_megabytes: maximumFileSizeInMegabytes
				}
			);
			viewModel.uploadedKeystoreFile = new KeystoreFile("");
			viewModel.keystoreFileUploader;
			viewModel.keystoreMetadataForm;
			var keystoreMetadataFormValidationErrorMessagesForInputs = {
				password: {
					required:
						"<%= data[:strings][:code_signing][:android_keystore][:password_not_specified] %>"
				},
				alias: {
					required:
						"<%= data[:strings][:code_signing][:android_keystore][:alias_not_specified] %>"
				},
				privateKeyPassword: {
					required:
						"<%= data[:strings][:code_signing][:android_keystore][:private_key_password_not_specified] %>"
				}
			};
			viewModel.showPassword = false;
			viewModel.showAlias = false;
			viewModel.showPrivateKeyPassword = false;

			function loadKeystoreFile() {
				viewModel.loadProgress.start(
					"<%= data[:strings][:code_signing][:android_keystore][:load_progress][:in_progress] %>"
				);

				refreshKeystoreFile();
			}

			function refreshKeystoreFile() {
				requestService.getKeystoreFile().then(
					function(data) {
						if (data !== null) {
							viewModel.keystoreFile = new KeystoreFile();
							viewModel.keystoreFile.databaseID = data.databaseID;
							viewModel.keystoreFile.isProcessed = data.isProcessed;
							viewModel.keystoreFile.isExpose = data.isExpose;
							viewModel.keystoreFile.isProtected = data.isProtected;
							viewModel.keystoreFile.uploadFileName = data.uploadFileName;
							viewModel.keystoreFile.password = savedPassword = data.password;
							viewModel.keystoreFile.alias = savedAlias = data.alias;
							viewModel.keystoreFile.privateKeyPassword = savedPrivateKeyPassword =
								data.privateKeyPassword;

							viewModel.showPassword = _.isEmpty(
								viewModel.keystoreFile.password
							);
							viewModel.showAlias = _.isEmpty(viewModel.keystoreFile.alias);
							viewModel.showPrivateKeyPassword = _.isEmpty(
								viewModel.keystoreFile.privateKeyPassword
							);

							if (!viewModel.keystoreFile.isProcessed) {
								$timeout(function() {
									refreshKeystoreFile();
								}, reloadIntervalInSeconds * 1000);
							}

							var progress = new Progress();
							viewModel.keystoreFileIsExposeGetterSetterConfig = {
								getterSetter: isExposeGetterSetterForKeystoreFile(
									viewModel.keystoreFile,
									progress
								),
								progress: progress
							};
						} else {
							viewModel.keystoreFile = null;

							$timeout(function() {
								refreshKeystoreFile();
							}, reloadIntervalInSeconds * 1000);
						}

						viewModel.loadProgress.success();
					},
					function(error) {
						viewModel.loadProgress.error(error);
					}
				);
			}

			viewModel.uploadKeystoreFile = function() {
				viewModel.actionProgress.start(
					"<%= data[:strings][:code_signing][:android_keystore][:upload_progress][:in_progress] %>"
				);

				$q(function(resolve, reject) {
					viewModel.uploadedKeystoreFile.upload().then(
						function() {
							resolve();
						},
						function(error) {
							reject(error);
						}
					);
				}).then(
					function() {
						viewModel.actionProgress.success();

						viewModel.uploadedKeystoreFile = new KeystoreFile("");
						loadKeystoreFile();
					},
					function(error) {
						viewModel.actionProgress.error(error);
					}
				);
			};

			viewModel.saveMetadata = function() {
				viewModel.actionProgress.start(
					"<%= data[:strings][:code_signing][:android_keystore][:save_metadata_progress][:in_progress] %>"
				);

				if (!viewModel.keystoreMetadataForm.$valid) {
					viewModel.actionProgress.error(
						new Error(
							stringService.errorMessageFromFormModel(
								viewModel.keystoreMetadataForm,
								keystoreMetadataFormValidationErrorMessagesForInputs,
								"<%= data[:strings][:code_signing][:android_keystore][:metadata_invalid_or_not_specified] %>"
							)
						)
					);

					return;
				}

				viewModel.keystoreFile.saveMetadata().then(
					function() {
						savedPassword = viewModel.keystoreFile.password;
						savedAlias = viewModel.keystoreFile.alias;
						savedPrivateKeyPassword = viewModel.keystoreFile.privateKeyPassword;

						viewModel.showAlias = _.isEmpty(viewModel.keystoreFile.alias);
						viewModel.showPassword = _.isEmpty(viewModel.keystoreFile.password);
						viewModel.showPrivateKeyPassword = _.isEmpty(
							viewModel.keystoreFile.privateKeyPassword
						);

						Popup.showSuccessPopup(
							"<%= data[:strings][:code_signing][:android_keystore][:save_metadata_progress][:success] %>"
						);

						viewModel.actionProgress.success();
					},
					function(error) {
						viewModel.actionProgress.error(error);
					}
				);
			};

			viewModel.resetMetadata = function() {
				viewModel.keystoreFile.password = savedPassword;
				viewModel.keystoreFile.alias = savedAlias;
				viewModel.keystoreFile.privateKeyPassword = savedPrivateKeyPassword;
			};

			viewModel.makeKeystorefileProtected = function(aKeystoreFile) {
				Popup.showConfirmPopup(
					"<%= data[:strings][:code_signing][:android_keystore][:make_protected][:confirm_question] %>",
					"<%= data[:strings][:code_signing][:android_keystore][:make_protected][:confirm_details] %>",
					"<%= data[:strings][:code_signing][:android_keystore][:make_protected][:confirm_ok] %>",
					"<%= data[:strings][:code_signing][:android_keystore][:make_protected][:confirm_cancel] %>"
				).then(function() {
					aKeystoreFile.protect();
				});
			};

			viewModel.deleteKeystoreFile = function() {
				Popup.showConfirmPopup(
					"<%= data[:strings][:code_signing][:android_keystore][:delete_confirm][:question_short] %>",
					stringService.stringReplacedWithParameters(
						"<%= data[:strings][:code_signing][:android_keystore][:delete_confirm][:question] %>",
						{
							file_name: viewModel.keystoreFile.displayName()
						}
					),
					"<%= data[:strings][:code_signing][:android_keystore][:delete_confirm][:yes_title] %>",
					"<%= data[:strings][:code_signing][:android_keystore][:delete_confirm][:no_title] %>",
					function() {
						viewModel.actionProgress.start(
							"<%= data[:strings][:code_signing][:android_keystore][:delete_progress][:in_progress] %>"
						);

						viewModel.keystoreFile.delete().then(
							function() {
								viewModel.actionProgress.success();

								loadKeystoreFile();
							},
							function(error) {
								viewModel.actionProgress.error(error);
							}
						);
					}
				);
			};

			function isExposeGetterSetterForKeystoreFile(aKeystoreFile, progress) {
				return function(isExpose) {
					if (isExpose === undefined) {
						return aKeystoreFile.isExpose;
					}

					var oldIsExpose = aKeystoreFile.isExpose;
					aKeystoreFile.isExpose = isExpose;

					progress.start();
					requestService
						.updateKeystoreFileIsExposeState(
							aKeystoreFile.databaseID,
							aKeystoreFile.isExpose
						)
						.then(
							function() {
								progress.success();
							},
							function(error) {
								aKeystoreFile.isExpose = oldIsExpose;
								progress.reset();
								Popup.showErrorPopup(error.message);
							}
						);
				};
			}

			viewModel.placeholderForText = function(text) {
				if (text === undefined || text === null) {
					return;
				}

				return Array(text.length + 1).join("*");
			};

			loadKeystoreFile();
		});
})();
