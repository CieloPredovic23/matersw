(function() {

"use strict";

angular.module("BitriseWorkflowEditor").controller("AndroidKeystoreController", function($scope, $q, $timeout, requestService, stringService, Popup, Progress, KeystoreFile) {

	var viewModel = this;

	var maximumFileSizeInMegabytes = 5;
	var reloadIntervalInSeconds = 2;
	viewModel.maximumGenericFileAndKeystoreFileCountSum = 5;
	viewModel.genericFileAndKeystoreFileCountSum;

	$scope.KeystoreFile = KeystoreFile;
	viewModel.keystoreFile;
	var savedPassword;
	var savedAlias;
	var savedPrivateKeyPassword;
	viewModel.loadProgress = new Progress();
	viewModel.actionProgress = new Progress();
	viewModel.uploadInstruction = stringService.stringReplacedWithParameters("<%= data[:strings][:code_signing][:android_keystore][:upload_action] %>", {
		maximum_file_size_in_megabytes: maximumFileSizeInMegabytes
	});
	viewModel.uploadedKeystoreFile = new KeystoreFile("");
	viewModel.keystoreFileUploader;
	viewModel.keystoreMetadataForm;
	var keystoreMetadataFormValidationErrorMessagesForInputs = {
		password: {
			required: "<%= data[:strings][:code_signing][:android_keystore][:password_not_specified] %>"
		},
		alias: {
			required: "<%= data[:strings][:code_signing][:android_keystore][:alias_not_specified] %>"
		},
		privateKeyPassword: {
			required: "<%= data[:strings][:code_signing][:android_keystore][:private_key_password_not_specified] %>"
		}
	};
	viewModel.showPassword = false;
	viewModel.showAlias = false;
	viewModel.showPrivateKeyPassword = false;

	function loadKeystoreFile() {
		viewModel.loadProgress.start("<%= data[:strings][:code_signing][:android_keystore][:load_progress][:in_progress] %>");

		requestService.getKeystoreFile().then(function(data) {
			viewModel.showPassword = false;
			viewModel.showAlias = false;
			viewModel.showPrivateKeyPassword = false;

			viewModel.genericFileAndKeystoreFileCountSum = data.genericFileAndKeystoreFileCountSum;
			
			if (data.keystoreFileData) {
				viewModel.keystoreFile = new KeystoreFile();
				viewModel.keystoreFile.databaseID = data.keystoreFileData.databaseID;
				viewModel.keystoreFile.isProcessed = data.keystoreFileData.isProcessed;
				viewModel.keystoreFile.uploadFileName = data.keystoreFileData.uploadFileName;
				viewModel.keystoreFile.password = savedPassword = data.keystoreFileData.password;
				viewModel.keystoreFile.alias = savedAlias = data.keystoreFileData.alias;
				viewModel.keystoreFile.privateKeyPassword = savedPrivateKeyPassword = data.keystoreFileData.privateKeyPassword;

				if (!viewModel.keystoreFile.isProcessed) {
					$timeout(function() {
						loadKeystoreFile();
					}, reloadIntervalInSeconds * 1000);
				}
			}
			else {
				viewModel.keystoreFile = null;
			}

			viewModel.loadProgress.success();
		}, function(error) {
			viewModel.loadProgress.error(error);
		});
	};

	viewModel.uploadKeystoreFile = function() {
		viewModel.actionProgress.start("<%= data[:strings][:code_signing][:android_keystore][:upload_progress][:in_progress] %>");

		$q(function(resolve, reject) {
			viewModel.uploadedKeystoreFile.upload().then(function() {
				resolve();
			}, function(error) {
				reject(error);
			});
		}).then(function() {
			viewModel.actionProgress.success();

			viewModel.uploadedKeystoreFile = new KeystoreFile("");
			loadKeystoreFile();
		}, function(error) {
			viewModel.actionProgress.error(error);
		});
	};

	viewModel.saveMetadata = function() {
		viewModel.actionProgress.start("<%= data[:strings][:code_signing][:android_keystore][:save_metadata_progress][:in_progress] %>");

		if (!viewModel.keystoreMetadataForm.$valid) {
			viewModel.actionProgress.error(new Error(stringService.errorMessageFromFormModel(viewModel.keystoreMetadataForm, keystoreMetadataFormValidationErrorMessagesForInputs, "<%= data[:strings][:code_signing][:android_keystore][:metadata_invalid_or_not_specified] %>")));

			return;
		}

		viewModel.keystoreFile.saveMetadata().then(function() {
			savedPassword = viewModel.keystoreFile.password;
			savedAlias = viewModel.keystoreFile.alias;
			savedPrivateKeyPassword = viewModel.keystoreFile.privateKeyPassword;

			Popup.showSuccessPopup("<%= data[:strings][:code_signing][:android_keystore][:save_metadata_progress][:success] %>");

			viewModel.actionProgress.success();
		}, function(error) {
			viewModel.actionProgress.error(error);
		});
	};

	viewModel.resetMetadata = function() {
		viewModel.keystoreFile.password = savedPassword;
		viewModel.keystoreFile.alias = savedAlias;
		viewModel.keystoreFile.privateKeyPassword = savedPrivateKeyPassword;
	};

	viewModel.deleteKeystoreFile = function() {
		Popup.showConfirmPopup("<%= data[:strings][:code_signing][:android_keystore][:delete_confirm][:question_short] %>", stringService.stringReplacedWithParameters("<%= data[:strings][:code_signing][:android_keystore][:delete_confirm][:question] %>", {
			file_name: viewModel.keystoreFile.displayName()
		}), "<%= data[:strings][:code_signing][:android_keystore][:delete_confirm][:yes_title] %>", "<%= data[:strings][:code_signing][:android_keystore][:delete_confirm][:no_title] %>", function() {
			viewModel.actionProgress.start("<%= data[:strings][:code_signing][:android_keystore][:delete_progress][:in_progress] %>");

			viewModel.keystoreFile.delete().then(function() {
				viewModel.actionProgress.success();

				loadKeystoreFile();
			}, function(error) {
				viewModel.actionProgress.error(error);
			});
		});
	};

	loadKeystoreFile();

});

})();
