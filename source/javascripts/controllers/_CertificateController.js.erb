(function() {

"use strict";

angular.module("BitriseWorkflowEditor").controller("CertificateController", function($q, $timeout, requestService, stringService, Popup, Progress, Certificate) {

	var viewModel = this;

	var certificatesReloadIntervalInSeconds = 2;

	viewModel.certificates;
	viewModel.loadCertificatesProgress = new Progress();
	viewModel.uploadCertificatesProgress = new Progress();
	viewModel.certificateActionProgress = new Progress();
	viewModel.certificates;
	viewModel.certificatesToUpload;
	viewModel.certificateUploader;
	viewModel.passwordEditedCertificate = null;
	var passwordEditedCertificateOriginalPassword;

	function loadCertificates(shouldClearPreviousLoad) {
		viewModel.loadCertificatesProgress.start("<%= data[:strings][:code_signing][:certificate][:load_progress][:in_progress] %>");
		if (viewModel.uploadCertificatesProgress.isIdle && viewModel.uploadCertificatesProgress.statusMessage !== null) {
			viewModel.uploadCertificatesProgress.reset();
		}

		if (shouldClearPreviousLoad === undefined) {
			shouldClearPreviousLoad = false;
		}

		if (shouldClearPreviousLoad) {
			viewModel.certificates = undefined;
		}

		requestService.getCertificates().then(function(certificateDatas) {
			viewModel.certificates = _.map(certificateDatas, function(aCertificateData) {
				var certificate = new Certificate();

				certificate.databaseID = aCertificateData.databaseID;
				certificate.isProcessed = aCertificateData.isProcessed;
				certificate.expiringDownloadURL = aCertificateData.expiringDownloadURL;
				certificate.password = aCertificateData.password;

				return certificate;
			});

			viewModel.loadCertificatesProgress.success();

			if (_.find(viewModel.certificates, {
				isProcessed: false
			})) {
				$timeout(function() {
					loadCertificates();
				}, certificatesReloadIntervalInSeconds * 1000);
			}
		}, function(error) {
			viewModel.loadCertificatesProgress.error(error);
		});
	};

	viewModel.filesSelectedForUpload = function(files) {
		if (files.length == 0) {
			return;
		}

		viewModel.certificatesToUpload = _.map(files, function(aFile) {
			var certificate = new Certificate();
			certificate.file = aFile;

			return certificate;
		});
	};

	viewModel.uploadCertificates = function() {
		viewModel.uploadCertificatesProgress.start("<%= data[:strings][:code_signing][:certificate][:upload_progress][:in_progress] %>");

		var uploadPromise = $q.when();
		_.each(viewModel.certificatesToUpload, function(aCertificate) {
			uploadPromise = uploadPromise.then(function() {
				return aCertificate.upload();
			});
		});

		$q(function(resolve, reject) {
			uploadPromise.then(function() {
				resolve();
			}, function(error) {
				reject(error);
			});
		}).then(function() {
			viewModel.uploadCertificatesProgress.success();

			viewModel.certificatesToUpload = undefined;
			loadCertificates(true);
		}, function(error) {
			viewModel.uploadCertificatesProgress.error(error);
		});
	};

	viewModel.deleteCertificate = function(certificate) {
		Popup.showConfirmPopup("<%= data[:strings][:code_signing][:certificate][:delete_confirm][:question_short] %>", stringService.stringReplacedWithParameters("<%= data[:strings][:code_signing][:certificate][:delete_confirm][:question] %>", {
			certificate_name: certificate.displayName()
		}), "<%= data[:strings][:code_signing][:certificate][:delete_confirm][:yes_title] %>", "<%= data[:strings][:code_signing][:certificate][:delete_confirm][:no_title] %>", function() {
			viewModel.certificateActionProgress.start("<%= data[:strings][:code_signing][:certificate][:delete_progress][:in_progress] %>");

			if (viewModel.uploadCertificatesProgress.isIdle && viewModel.uploadCertificatesProgress.statusMessage !== null) {
				viewModel.uploadCertificatesProgress.reset();
			}

			certificate.delete().then(function() {
				viewModel.certificateActionProgress.success();

				loadCertificates(true);
			}, function(error) {
				viewModel.certificateActionProgress.error(error);
			});
		});
	};

	viewModel.changePasswordSelected = function(certificate) {
		if (viewModel.renamedCertificate) {
			viewModel.cancelRename();
		}
		
		viewModel.passwordEditedCertificate = certificate;
		passwordEditedCertificateOriginalPassword = certificate.password;
	};

	viewModel.changePassword = function() {
		viewModel.certificateActionProgress.start("<%= data[:strings][:code_signing][:certificate][:change_password_progress][:in_progress] %>");
		if (viewModel.uploadCertificatesProgress.isIdle && viewModel.uploadCertificatesProgress.statusMessage !== null) {
			viewModel.uploadCertificatesProgress.reset();
		}

		viewModel.passwordEditedCertificate.savePassword().then(function() {
			viewModel.passwordEditedCertificate = null;
			passwordEditedCertificateOriginalPassword = undefined;

			viewModel.certificateActionProgress.success();
		}, function(error) {
			viewModel.certificateActionProgress.error(error);
		});
	};

	viewModel.cancelPasswordChange = function() {
		viewModel.passwordEditedCertificate.password = passwordEditedCertificateOriginalPassword;
		viewModel.passwordEditedCertificate = null;
		passwordEditedCertificateOriginalPassword = undefined;
	};

	loadCertificates();

});

})();
