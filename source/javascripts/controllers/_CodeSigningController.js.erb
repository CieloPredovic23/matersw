(function() {
	"use strict";

	angular
		.module("BitriseWorkflowEditor")
		.controller("CodeSigningController", function($q, $cookies, $scope, requestService, appService, Progress) {
			var canceler = $q.defer();
			$scope.$on("$destroy", function() {
				canceler.resolve();
			});

			$scope.appService = appService;

			var viewModel = this;

			viewModel.showNewCodeSigningWizard;
			viewModel.isAutoCodeSigningModeOn;
			viewModel.shouldShowCodeSigningHints;
			viewModel.isCodeSigningHintsOpen;
			var irrelevantProjectTypesForCodeSigningHints = ["android"];

			viewModel.sectionConfigurations = {
				provProfile: {
					shouldShow: undefined,
					irrelevantProjectTypes: ["android"],
					getAreThereAnyUploadedFilesPromise: requestService
						.getProvProfiles({
							timeout: canceler.promise
						})
						.then(function(data) {
							return data.length > 0;
						})
						.catch(angular.noop)
				},
				certificate: {
					shouldShow: undefined,
					irrelevantProjectTypes: ["android"],
					getAreThereAnyUploadedFilesPromise: requestService
						.getCertificates({
							timeout: canceler.promise
						})
						.then(function(data) {
							return data.length > 0;
						})
						.catch(angular.noop)
				},
				genericFile: {
					shouldShow: undefined,
					irrelevantProjectTypes: [],
					getAreThereAnyUploadedFilesPromise: $q.when(true)
				},
				androidKeystore: {
					shouldShow: undefined,
					irrelevantProjectTypes: ["ios", "osx", "macos"],
					getAreThereAnyUploadedFilesPromise: requestService
						.getKeystoreFile({
							timeout: canceler.promise
						})
						.then(function(data) {
							return data !== null;
						})
						.catch(angular.noop)
				}
			};

			viewModel.fileTypeMenus = [
				{
					id: "ios-code-signing",
					name: "iOS Code Signing",
					shouldShow: undefined,
					availableSections: [
						viewModel.sectionConfigurations["provProfile"],
						viewModel.sectionConfigurations["certificate"]
					]
				},
				{
					id: "android-code-signing",
					name: "Android Code Signing",
					shouldShow: undefined,
					availableSections: [viewModel.sectionConfigurations["androidKeystore"]]
				},
				{
					id: "generic-file-storage",
					name: "Generic File Storage",
					shouldShow: undefined,
					availableSections: [viewModel.sectionConfigurations["genericFile"]]
				}
			];
			viewModel.activeFileTypeMenu;

			viewModel.loadProgress = new Progress();

			viewModel.load = function() {
				viewModel.loadProgress.start("<%= data[:strings][:code_signing][:available_project_types_load] %>");

				$q(function(resolve, reject) {
					requestService.getCurrentUserData({
						timeout: canceler.promise
					}).then(function(responseData) {
						viewModel.showNewCodeSigningWizard = responseData.showNewCodeSigningWizard;
						viewModel.shouldShowCodeSigningHints = !_.contains(
							irrelevantProjectTypesForCodeSigningHints,
							appService.appDetails.projectTypeID
						);

						viewModel.isCodeSigningHintsOpen = $cookies.get("code_signing_hints_hidden") == "true";

						$q.all(
							_.map(viewModel.sectionConfigurations, function(aSectionConfiguration) {
								if (!_.contains(aSectionConfiguration.irrelevantProjectTypes, appService.appDetails.projectTypeID)) {
									aSectionConfiguration.shouldShow = true;

									return $q.when();
								}

								return aSectionConfiguration.getAreThereAnyUploadedFilesPromise.then(function(
									areThereAnyUploadedFilesOfSection
								) {
									aSectionConfiguration.shouldShow = areThereAnyUploadedFilesOfSection;
								});
							})
						).then(function() {
							_.each(viewModel.fileTypeMenus, function(aFileTypeMenu) {
								aFileTypeMenu.shouldShow = !!_.find(aFileTypeMenu.availableSections, {
									shouldShow: true
								});
							});
							viewModel.activeFileTypeMenu = _.first(viewModel.availableFileTypeMenus());

							if (viewModel.sectionConfigurations.certificate.shouldShow) {
								viewModel.sectionConfigurations.certificate.getAreThereAnyUploadedFilesPromise.then(function(
									areThereAnyUploadedFilesOfSection
								) {
									viewModel.isAutoCodeSigningModeOn =
										viewModel.showNewCodeSigningWizard && !areThereAnyUploadedFilesOfSection;
								});
							} else {
								viewModel.isAutoCodeSigningModeOn = false;
							}

							resolve();
						}, reject);
					}, reject);
				}).then(
					function() {
						viewModel.loadProgress.success();
					},
					function(error) {
						viewModel.loadProgress.error(error);
					}
				);
			};

			viewModel.availableFileTypeMenus = function() {
				return _.filter(viewModel.fileTypeMenus, {
					shouldShow: true
				});
			};

			viewModel.isSectionFilteredByFileTypeMenu = function(sectionConfiguration) {
				if (!viewModel.showNewCodeSigningWizard) {
					return false;
				}

				if (!viewModel.activeFileTypeMenu) {
					return true;
				}

				return !_.contains(viewModel.activeFileTypeMenu.availableSections, sectionConfiguration);
			};

			viewModel.toggleCodeSigningHints = function() {
				viewModel.isCodeSigningHintsOpen = !viewModel.isCodeSigningHintsOpen;

				$cookies.put("code_signing_hints_hidden", viewModel.isCodeSigningHintsOpen, {
					expires: new Date(new Date().setFullYear(new Date().getFullYear() + 1))
				});
			};

			viewModel.placeholderForText = function(text) {
				if (text === undefined || text === null) {
					return;
				}

				return Array(text.length + 1).join("*");
			};
		});
})();
