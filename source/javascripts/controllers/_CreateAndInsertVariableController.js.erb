(function() {

"use strict";

angular.module("BitriseWorkflowEditor").controller("CreateAndInsertSecretController", function($scope, requestService, stringService, appService, Progress, Variable) {

    var viewModel = this;

    var workflows;
	var selectedWorkflow;
	var selectedStep;
	viewModel.secretSelected;

    $scope.appService = appService;
	$scope.Variable = Variable;
    $scope.requestService = requestService;

    viewModel.newSecretEnvVar = new Variable({
        "": ""
    }, Variable.defaultVariableConfig());
    viewModel.newSecretEnvVar.customProperties = {
        progress: new Progress()
    };
    viewModel.saveAndInsertSecretEnvVar = new Progress();
    viewModel.loadInsertableVariablesProgress = new Progress();

    viewModel.init = function(secretSelectedCallback, _availableVariableGroupIDs, _workflows, _selectedWorkflow, _selectedStep) {
        viewModel.secretSelected = secretSelectedCallback;
		availableVariableGroupIDs = _availableVariableGroupIDs;
		workflows = _workflows;
		selectedWorkflow = _selectedWorkflow;
        selectedStep = _selectedStep;

		loadSecrets();
	};

    function loadSecrets() {
		return appService.getSecrets(false, {
			timeout: viewModel.canceler.promise
		}).then(function() {
			_.find(viewModel.insertableVariables, {
				id: "from_secrets"
			}).variables = appService.secrets;
		});
    }

    viewModel.saveAndInsertSecretEnvVar = function() {
        viewModel.loadInsertableVariablesProgress.start("<%= data[:strings][:workflows][:inputs][:insert_secret][:save_progress] %>");

        appService.secrets.push(viewModel.newSecretEnvVar);
        appService.saveSecrets().then(function() {
            viewModel.secretSelected(viewModel.newSecretEnvVar);

            viewModel.loadInsertableVariablesProgress.success();
        }, function (error) {
            viewModel.loadInsertableVariablesProgress.error(error);
        });
    };

    viewModel.isValidKey = function(key, keyUniquenessScope) {
		if (key === undefined) {
			return undefined;
		}

		if (key.length == 0) {
			return false;
		}

		var validKeyRegexp = new RegExp("^[a-zA-Z_]{1}[a-zA-Z0-9_]*$");

		if (!validKeyRegexp.test(key)) {
			return false;
		}

		if (keyUniquenessScope && _.filter(keyUniquenessScope, function(anotherVariable) {
			return anotherVariable.key() == key;
		}).length > 0) {
			return false;
		}

		return true;
	};

	viewModel.envVarValidationWarning = function(envVar, keyUniquenessScope) {
		var errors = [];

		if (!viewModel.isValidKey(envVar.key(), keyUniquenessScope)) {
			errors.push(new Error("<%= data[:strings][:env_vars][:invalid_env_var_key] %>"));

			if (keyUniquenessScope) {
				errors.push(new Error("<%= data[:strings][:env_vars][:should_be_unique] %>"));
			}
		}

		return errors.length > 0 ? stringService.errorMessageFromErrors(errors) : null;
	};
});

})();
