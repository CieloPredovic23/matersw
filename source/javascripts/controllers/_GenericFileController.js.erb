(function() {

"use strict";

angular.module("BitriseWorkflowEditor").controller("GenericFileController", function($q, $timeout, $filter, requestService, stringService, Popup, Progress, GenericFile) {

	var viewModel = this;

	var maximumFileSizeInMegabytes = 5;
	var genericFilesReloadIntervalInSeconds = 2;
	viewModel.maximumGenericFilesCount = 5;

	viewModel.genericFiles;
	viewModel.genericFileIsExposeGetterSetterConfigs;
	viewModel.loadGenericFilesProgress = new Progress();
	viewModel.uploadGenericFileProgress = new Progress();
	viewModel.deleteGenericFileProgress = new Progress();
	viewModel.uploadInstruction = stringService.stringReplacedWithParameters("<%= data[:strings][:code_signing][:generic_file][:upload_action] %>", {
		maximum_file_size_in_megabytes: maximumFileSizeInMegabytes
	});
	viewModel.uploadedGenericFile = new GenericFile("");
	viewModel.genericFileUploader;
	viewModel.genericFileSettings = {};

	function loadGenericFiles(shouldClearPreviousLoad) {
		viewModel.loadGenericFilesProgress.start("<%= data[:strings][:code_signing][:generic_file][:load_progress][:in_progress] %>");
		if (viewModel.uploadGenericFileProgress.isIdle && viewModel.uploadGenericFileProgress.statusMessage !== null) {
			viewModel.uploadGenericFileProgress.reset();
		}

		if (shouldClearPreviousLoad === undefined) {
			shouldClearPreviousLoad = false;
		}

		if (shouldClearPreviousLoad) {
			viewModel.genericFiles = undefined;
		}

		requestService.getGenericFiles().then(function(genericFileDatas) {
			viewModel.genericFiles = _.map(genericFileDatas, function(aGenericFileData) {
				var genericFile = new GenericFile(aGenericFileData.envVarPartialID);

				genericFile.databaseID = aGenericFileData.databaseID;
				genericFile.isProcessed = aGenericFileData.isProcessed;
				genericFile.uploadFileName = aGenericFileData.uploadFileName;
				genericFile.isExpose = aGenericFileData.isExpose;

				viewModel.genericFileSettings[genericFile.databaseID] = {
					isMenuVisible: false
				};

				return genericFile;
			});

			viewModel.genericFileIsExposeGetterSetterConfigs = _.map(viewModel.genericFiles, function(aGenericFile) {
				var progress = new Progress();
				return {
					getterSetter: isExposeGetterSetterForGenericFile(aGenericFile, progress),
					progress: progress
				};
			});

			viewModel.loadGenericFilesProgress.success();

			if (_.find(viewModel.genericFiles, {
				isProcessed: false
			})) {
				$timeout(function() {
					loadGenericFiles();
				}, genericFilesReloadIntervalInSeconds * 1000);
			}
		}, function(error) {
			viewModel.loadGenericFilesProgress.error(error);
		});
	};

	viewModel.downloadURLEnvVarKeyPrettifiedPreview = function() {
		if (viewModel.uploadedGenericFile.envVarPartialID.length == 0) {
			return $filter("prettifiedKey")("BITRISEIO_<%= data[:strings][:code_signing][:generic_file][:id_specified] %>_URL");
		}

		if (viewModel.uploadedGenericFileErrorMessage()) {
			return "<%= data[:strings][:code_signing][:generic_file][:invalid_id_preview_placeholder] %>";
		}

		return $filter("prettifiedKey")(viewModel.uploadedGenericFile.downloadURLEnvVarKey());
	};

	viewModel.uploadedGenericFileErrorMessage = function() {
		if (viewModel.uploadedGenericFile.validationError()) {
			return viewModel.uploadedGenericFile.validationError().message;
		}

		if (_.find(viewModel.genericFiles, {
			envVarPartialID: viewModel.uploadedGenericFile.envVarPartialID
		})) {
			return "<%= data[:strings][:code_signing][:generic_file][:id_not_unique] %>";
		}

		return null;
	};

	viewModel.uploadGenericFile = function() {
		viewModel.uploadGenericFileProgress.start("<%= data[:strings][:code_signing][:generic_file][:upload_progress][:in_progress] %>");

		$q(function(resolve, reject) {
			viewModel.uploadedGenericFile.upload().then(function() {
				resolve();
			}, function(error) {
				reject(error);
			});
		}).then(function() {
			viewModel.uploadGenericFileProgress.success();

			viewModel.uploadedGenericFile = new GenericFile("");
			loadGenericFiles(true);
		}, function(error) {
			viewModel.uploadGenericFileProgress.error(error);
		});
	};

	viewModel.deleteGenericFile = function(genericFile) {
		Popup.showConfirmPopup("<%= data[:strings][:code_signing][:generic_file][:delete_confirm][:question_short] %>", stringService.stringReplacedWithParameters("<%= data[:strings][:code_signing][:generic_file][:delete_confirm][:question] %>", {
			file_name: genericFile.displayName()
		}), "<%= data[:strings][:code_signing][:generic_file][:delete_confirm][:yes_title] %>", "<%= data[:strings][:code_signing][:generic_file][:delete_confirm][:no_title] %>", function() {
			viewModel.deleteGenericFileProgress.start("<%= data[:strings][:code_signing][:generic_file][:delete_progress][:in_progress] %>");

			if (viewModel.uploadGenericFileProgress.isIdle && viewModel.uploadGenericFileProgress.statusMessage !== null) {
				viewModel.uploadGenericFileProgress.reset();
			}

			genericFile.delete().then(function() {
				viewModel.deleteGenericFileProgress.success();

				loadGenericFiles(true);
			}, function(error) {
				viewModel.deleteGenericFileProgress.error(error);
			});
		});
	};

	function isExposeGetterSetterForGenericFile(aGenericFile, progress) {
		return function(isExpose) {
			if (isExpose === undefined) {
				return aGenericFile.isExpose;
			}

			var oldIsExpose = aGenericFile.isExpose;
			aGenericFile.isExpose = isExpose;

			progress.start();
			requestService.updateGenericFileIsExposeState(aGenericFile.databaseID, aGenericFile.isExpose).then(function() {
				progress.success();
			}, function(error) {
				aGenericFile.isExpose = oldIsExpose;
				progress.reset();
				Popup.showErrorPopup(error.message);
			});
		}
	};

	loadGenericFiles();

});

})();
