(function() {

"use strict";

angular.module("BitriseWorkflowEditor").controller("MainController", function($scope, $rootScope, $q, $location, requestService, appService, stringService, Progress, Popup) {

	var viewModel = this;

	viewModel.configureModeProgress = new Progress();

	viewModel.menus;
	viewModel.menuProgress = new Progress();
	viewModel.currentMenu;

	viewModel.loadAppConfigProgress = new Progress();
	viewModel.saveProgress = new Progress();

	function configureMode() {
		try {
			requestService.configureMode();
		}
		catch (error) {
			viewModel.configureModeProgress.error(error);

			return;
		}

		viewModel.menus = _.compact([{
			id: "workflows",
			title: "<%= data[:strings][:main][:menus][0] %>",
			path: "<%= data[:routes][:endpoints][:workflows] %>",
			cssClass: "workflows"
		}, (requestService.mode == "website" ? {
			id: "code-signing",
			title: "<%= data[:strings][:main][:menus][1] %>",
			path: "<%= data[:routes][:endpoints][:code_signing] %>",
			cssClass: "code-signing"
		} : null), {
			id: "secrets",
			title: "<%= data[:strings][:main][:menus][2] %>",
			path: "<%= data[:routes][:endpoints][:secrets] %>",
			cssClass: "secrets"
		}, {
			id: "env-vars",
			title: "<%= data[:strings][:main][:menus][3] %>",
			path: "<%= data[:routes][:endpoints][:env_vars] %>",
			cssClass: "env-vars"
		}, {
			id: "triggers",
			title: "<%= data[:strings][:main][:menus][4] %>",
			path: "<%= data[:routes][:endpoints][:triggers] %>",
			cssClass: "triggers"
		}, {
			id: "yml",
			title: "<%= data[:strings][:main][:menus][5] %>",
			path: "<%= data[:routes][:endpoints][:yml] %>",
			cssClass: "yml"
		}]);
	}

	function selectInitialMenu() {
		var initialPath = $location.path();
		if (!initialPath) {
			initialPath = "/" + _.find(viewModel.menus, {
				id: "workflows"
			}).path;
		}

		viewModel.currentMenu = _.find(viewModel.menus, function(aMenu) {
			return "/" + aMenu.path == initialPath;
		});
	}

	function loadAppConfig() {
		viewModel.loadAppConfigProgress.start("<%= data[:strings][:main][:load_progress][:loading] %>");

		appService.getAppConfig().then(function() {
			$q(function(resolve, reject) {
				if (appService.appConfigHasDeprecatedTriggerMap()) {
					appService.updateDeprecatedTriggerMap();

					Popup.showNoticePopup("<%= data[:strings][:triggers][:update_deprecated_popup][:title] %>", ["<%= data[:strings][:triggers][:update_deprecated_popup][:details_1] %>", stringService.stringReplacedWithParameters("<%= data[:strings][:triggers][:update_deprecated_popup][:details_2] %>", {
						url: "<%= data[:routes][:blog][:new_triggers] %>"
					})]).then(save).then(resolve, reject);
				}
				else {
					resolve();
				}
			}).then(function() {
				viewModel.loadAppConfigProgress.success();

				$rootScope.$emit("MainController::appConfigLoaded");
			}, function(error) {
				viewModel.loadAppConfigProgress.error(error);
			});
		}, function(error) {
			viewModel.loadAppConfigProgress.error(error);
		});
	}

	viewModel.menuSelected = function(menu) {
		viewModel.menuProgress.start("Loading, wait a sec...");

		$q(function(resolve, reject) {
			if (!viewModel.currentMenu) {
				resolve();

				return;
			}

			var changeCheckDeferer = $q.defer();

			switch (viewModel.currentMenu.id) {
				case "workflows":
				case "env-vars":
				case "triggers":
					if (_.contains(["workflows", "env-vars", "triggers"], menu.id)) {
						resolve();

						return;
					}

					changeCheckDeferer.resolve(!angular.equals(appService.appConfig, appService.savedAppConfig));

					break;
				case "secrets":
					$rootScope.$emit("SecretsController::checkUnsavedChanges", changeCheckDeferer);

					break;
				case "yml":
					$rootScope.$emit("YMLController::checkUnsavedChanges", changeCheckDeferer);

					break;
			}

			changeCheckDeferer.promise.then(function(hasUnsavedChanges) {
				if (!hasUnsavedChanges) {
					resolve();

					return;
				}

				Popup.showConfirmPopup("<%= data[:strings][:main][:confirm_tab_change_save_popup][:title] %>", "<%= data[:strings][:main][:confirm_tab_change_save_popup][:details] %>", "<%= data[:strings][:main][:confirm_tab_change_save_popup][:save] %>", "<%= data[:strings][:main][:confirm_tab_change_save_popup][:cancel] %>", function() {
					save().then(function() {
						resolve();
					}, function() {
						reject();
					});
				}, function() {
					reject();
				});
			});
		}).then(function() {
			viewModel.currentMenu = menu;
			$location.path("/" + menu.path);

			viewModel.menuProgress.success();
		}, function() {
			viewModel.menuProgress.success();
		});
	};

	$scope.$on("$routeChangeError", function() {
		viewModel.menuProgress.error(new Error("Failed to load menu."));
	});

	function save() {
		viewModel.saveProgress.start("<%= data[:strings][:main][:load_progress][:saving] %>");

		var validationDeferer = $q.defer();
		var saveDeferer = $q.defer();
		
		validationDeferer.promise.then(function() {
			$q(function(resolve, reject) {
				switch (viewModel.currentMenu.id) {
					case "secrets": {
						$rootScope.$emit("SecretsController::saveSecrets", resolve, reject);

						break;
					}
					case "yml": {
						$rootScope.$emit("YMLController::saveAppConfigYML", resolve, reject);

						break;
					}
					default: {
						appService.saveAppConfig({
							timeout: saveDeferer.promise
						}).then(resolve, reject);

						break;
					}
				}
			}).then(function() {
				viewModel.saveProgress.success();

				saveDeferer.resolve();
			}, function(error) {
				viewModel.saveProgress.error(error);

				saveDeferer.reject(error);
			});
		}, function(error) {
			viewModel.saveProgress.reset();
			Popup.showErrorPopup("<%= data[:strings][:main][:load_progress][:save_error] %>", error.message);

			saveDeferer.reject(error);
		});

		var validationConfig = {
			validationDeferer: validationDeferer,
			isValidating: false
		};
		$rootScope.$emit("MainController::requestValidationBeforeSave", validationConfig);

		if (!validationConfig.isValidating) {
			validationDeferer.resolve();
		}

		return saveDeferer.promise;
	}

	viewModel.discardChangesSelected = function() {
		appService.discardChanges();
		$rootScope.$emit("MainController::discardChanges");
	};

	viewModel.saveChangesSelected = function() {
		save().then(loadAppConfig);
	};

	$rootScope.$on("MainController::menuContentIsLoadedAndReady", function() {
		if (!appService.appConfig) {
			loadAppConfig();
		}
		else {
			$rootScope.$emit("MainController::appConfigLoaded");
		}
	});

	configureMode();
	selectInitialMenu();

});

})();
