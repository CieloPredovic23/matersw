(function() {

"use strict";

angular.module("BitriseWorkflowEditor").controller("MainController", function($scope, $rootScope, $cookies, $q, $location, $timeout, requestService, appService, stringService, osService, Progress, Popup) {

	var viewModel = this;

	$scope.osService = osService;

	viewModel.configureModeProgress = new Progress();

	viewModel.menus;
	viewModel.menuProgress = new Progress();
	viewModel.currentMenu;

	viewModel.loadAppConfigProgress = new Progress();
	viewModel.saveProgress = new Progress();

	function selectInitialMenu() {
		var initialMenu = _.find(viewModel.menus, function(aMenu) {
			return "/" + aMenu.path == $location.path()
		});
		if (!initialMenu) {
			initialMenu = _.find(viewModel.menus, {
				cookieValue: $cookies.get("last_selected_menu")
			});
		}
		if (!initialMenu) {
			initialMenu = _.find(viewModel.menus, {
				id: "workflows"
			});
		}

		viewModel.menuSelected(initialMenu);
	}

	function load() {
		viewModel.loadAppConfigProgress.start("<%= data[:strings][:main][:load_progress][:loading] %>");

		$q(function(resolve, reject) {
			switch (viewModel.currentMenu.id) {
				case "workflows":
				case "env-vars":
				case "triggers":
					appService.getAppConfig().then(function() {
						$q(function(deprecatedTriggerCheckResolve, deprecatedTriggerCheckReject) {
							if (appService.appConfigHasDeprecatedTriggerMap()) {
								appService.updateDeprecatedTriggerMap();

								Popup.showNoticePopup("<%= data[:strings][:triggers][:update_deprecated_popup][:title] %>", ["<%= data[:strings][:triggers][:update_deprecated_popup][:details_1] %>", stringService.stringReplacedWithParameters("<%= data[:strings][:triggers][:update_deprecated_popup][:details_2] %>", {
									url: "<%= data[:routes][:blog][:new_triggers] %>"
								})]).then(viewModel.save).then(deprecatedTriggerCheckResolve, deprecatedTriggerCheckReject);
							}
							else {
								deprecatedTriggerCheckResolve();
							}
						}).then(function() {
							resolve();
						}, function(error) {
							reject(error);
						});
					}, function(error) {
						reject(error);
					});

					break;
				case "code-signing":
					resolve();
				case "secrets":
					appService.getSecrets().then(resolve, reject);

					break;
				case "yml":
					appService.getAppConfigYML().then(resolve, reject);

					break;
			}
		}).then(function() {
			viewModel.loadAppConfigProgress.success();
		}, function(error) {
			viewModel.loadAppConfigProgress.error(error);
		})
	}

	viewModel.menuSelected = function(menu) {
		viewModel.menuProgress.start("Loading, wait a sec...");

		var shouldCallLoadAfterMenuChange = true;

		$q(function(resolve, reject) {
			if (!viewModel.currentMenu) {
				resolve();

				return;
			}

			var menuIDsByHandledSource = [
				["workflows", "env-vars", "triggers"],
				["secrets"],
				["yml"]
			];

			if (_.find(menuIDsByHandledSource, function(menuIDsOfSource) {
				return _.contains(menuIDsOfSource, viewModel.currentMenu.id);
			}) == _.find(menuIDsByHandledSource, function(menuIDsOfSource) {
				return _.contains(menuIDsOfSource, menu.id);
			})) {
				shouldCallLoadAfterMenuChange = false;

				resolve();

				return;
			}

			if (!viewModel.hasUnsavedChanges()) {
				resolve();

				return;
			}

			Popup.showConfirmPopup("<%= data[:strings][:main][:confirm_tab_change_save_popup][:title] %>", "<%= data[:strings][:main][:confirm_tab_change_save_popup][:details] %>", "<%= data[:strings][:main][:confirm_tab_change_save_popup][:save] %>", "<%= data[:strings][:main][:confirm_tab_change_save_popup][:cancel] %>", function() {
				viewModel.save().then(function() {
					resolve();
				}, function(error) {
					reject();
				});
			}, function() {
				reject();
			});
		}).then(function() {
			_.each(_.without(viewModel.menus, menu), function(aMenu) {
				_.each(aMenu.possibleURLParameterKeys, function(aMenuURLParameterKey) {
					if (!_.contains(menu.possibleURLParameterKeys, aMenuURLParameterKey)) {
						$location.search(aMenuURLParameterKey, null);
					}
				});
			});

			$cookies.put("last_selected_menu", menu.cookieValue, {
				expires: new Date(new Date().setFullYear(new Date().getFullYear() + 1))
			});

			viewModel.currentMenu = menu;
			$location.path("/" + menu.path);

			if (shouldCallLoadAfterMenuChange) {
				load();
			}

			viewModel.menuProgress.success();
		}, function() {
			viewModel.menuProgress.reset();
		});
	};

	$scope.$on("$routeChangeError", function() {
		viewModel.menuProgress.error(new Error("Failed to load menu."));
	});

	viewModel.hasUnsavedChanges = function() {
		if (!viewModel.currentMenu) {
			return undefined;
		}
		
		switch (viewModel.currentMenu.id) {
			case "workflows":
			case "env-vars":
			case "triggers":
				return !angular.equals(appService.appConfig, appService.savedAppConfig);
			case "secrets":
				return !angular.equals(appService.secrets, appService.savedSecrets);
			case "yml":
				return !angular.equals(appService.appConfigYML, appService.savedAppConfigYML);
		}
	}

	$(window).on("beforeunload", function() {
		if (viewModel.hasUnsavedChanges()) {
			return "<%= data[:strings][:main][:tab_close_confirm_message] %>";
		}
	});

	viewModel.save = function() {
		viewModel.saveProgress.start("<%= data[:strings][:main][:load_progress][:saving] %>");

		return $q.all([$q(function(resolve, reject) {
			switch (viewModel.currentMenu.id) {
				case "workflows":
				case "env-vars":
				case "triggers":
					appService.saveAppConfig().then(resolve, reject);

					break;
				case "secrets":
					appService.saveSecrets().then(resolve, reject);

					break;
				case "yml":
					appService.saveAppConfigYML().then(resolve, reject);

					break;
			}
		}), $timeout(function() {}, 1000)]).then(function() {
			viewModel.saveProgress.reset();
		}, function(error) {
			viewModel.saveProgress.reset();
			Popup.showErrorPopup("<%= data[:strings][:main][:load_progress][:save_error] %>", error.message);

			return $q.reject(error);
		});
	};

	$(document).on("keydown", function(event) {
		if ((event.ctrlKey || event.metaKey) && event.which == 83) {
			event.preventDefault();
			viewModel.save();

			return false;
		}
	});

	viewModel.discardChangesSelected = function() {
		switch (viewModel.currentMenu.id) {
			case "workflows":
			case "env-vars":
			case "triggers":
				appService.discardAppConfigChanges();

				break;
			case "secrets":
				appService.discardSecretsChanges();

				break;
			case "yml":
				appService.discardAppConfigYMLChanges();

				break;
		}

		$rootScope.$emit("MainController::changesDiscarded");
	};

	viewModel.sourceCodeMessage = function() {
		return stringService.stringReplacedWithParameters("<%= data[:strings][:main][:footer][:check_out_source_code] %>", {
			source_code_url: "<%= data[:routes][:other][:bitrise_workflow_editor_source_code] %>"
		});
	};

	viewModel.init = function() {
		viewModel.menus = _.compact([{
			id: "workflows",
			cookieValue: "workflows",
			title: "<%= data[:strings][:main][:menus][0] %>",
			path: "<%= data[:routes][:endpoints][:workflows] %>",
			possibleURLParameterKeys: ["workflow_id"],
			cssClass: "workflows"
		}, (requestService.mode == "website" ? {
			id: "code-signing",
			cookieValue: "code-signing",
			title: "<%= data[:strings][:main][:menus][1] %>",
			path: "<%= data[:routes][:endpoints][:code_signing] %>",
			possibleURLParameterKeys: [],
			cssClass: "code-signing"
		} : null), {
			id: "secrets",
			cookieValue: "secrets",
			title: "<%= data[:strings][:main][:menus][2] %>",
			path: "<%= data[:routes][:endpoints][:secrets] %>",
			possibleURLParameterKeys: [],
			cssClass: "secrets"
		}, {
			id: "env-vars",
			cookieValue: "env-vars",
			title: "<%= data[:strings][:main][:menus][3] %>",
			path: "<%= data[:routes][:endpoints][:env_vars] %>",
			possibleURLParameterKeys: [],
			cssClass: "env-vars"
		}, {
			id: "triggers",
			cookieValue: "triggers",
			title: "<%= data[:strings][:main][:menus][4] %>",
			path: "<%= data[:routes][:endpoints][:triggers] %>",
			possibleURLParameterKeys: ["trigger_type"],
			cssClass: "triggers"
		}, {
			id: "yml",
			cookieValue: "yml",
			title: "<%= data[:strings][:main][:menus][5] %>",
			path: "<%= data[:routes][:endpoints][:yml] %>",
			possibleURLParameterKeys: [],
			cssClass: "yml"
		}]);

		$q(function(resolve, reject) {
			switch (requestService.mode) {
				case "website":
					window.addEventListener("message", function(event) {
						var configureMessageRegexp = new RegExp("configure-app_slug-([a-zA-Z0-9]*)-job_id-([0-9]*)");
						if (configureMessageRegexp.test(event.data)) {
							requestService.appSlug = configureMessageRegexp.exec(event.data)[1];
							requestService.jobID = configureMessageRegexp.exec(event.data)[2];

							resolve();
						}
						else if (event.data == "doesWorkflowEditorHaveUnsavedChanges") {
							window.top.postMessage(viewModel.hasUnsavedChanges() ? "doesWorkflowEditorHaveUnsavedChanges:yes" : "doesWorkflowEditorHaveUnsavedChanges:no", "*");
						}
					}, false);

					window.top.postMessage("requestingConfiguration", "*");

					break;
				case "cli":
					resolve();

					break;
			}
		}).then(function() {
			viewModel.configureModeProgress.success();

			selectInitialMenu();
		});
	};

});

})();
