(function() {

"use strict";

angular.module("BitriseWorkflowEditor").controller("MainController", function($scope, $rootScope, $q, $location, $timeout, requestService, iframeService, appService, stringService, dateService, osService, Progress, Popup, Stack) {

	var viewModel = this;

	var originalOnbeforeunloadHandler = window.onbeforeunload;

	$scope.osService = osService;

	viewModel.appDetails;
	viewModel.menus;
	viewModel.menuProgress = new Progress();
	viewModel.currentMenu;

	viewModel.loadAppConfigProgress = new Progress();
	viewModel.saveProgress = new Progress();
	viewModel.changeMenuProgress = new Progress();
	viewModel.initAppProgress = new Progress();

	viewModel.shouldAllowYMLMenuWithoutDiscard = false;

	$scope.$on('$locationChangeSuccess', function(event, next, current) {
		$timeout(function() {
			viewModel.changeMenuProgress.success();
		}, 0);
	});

	function selectInitialMenu() {
		var initialMenu = _.find(viewModel.menus, function(aMenu) {
			return "/" + aMenu.path == $location.path();
		});
		if (!initialMenu) {
			initialMenu = _.find(viewModel.menus, {
				id: "workflows"
			});
		}

		viewModel.menuSelected(initialMenu);
	}

	function load() {
		viewModel.loadAppConfigProgress.start("<%= data[:strings][:main][:load_progress][:loading] %>");

		$q(function(resolve, reject) {
			switch (viewModel.currentMenu.id) {
				case "workflows":
				case "env-vars":
				case "triggers":
					var loadPromises = [appService.getAppConfig()];
					if (requestService.mode == "website") {
						loadPromises.push(Stack.getAll().then(appService.getStack));
						loadPromises.push(appService.getProjectType());
					}

					$q.all(loadPromises).then(function() {
						$q(function(deprecatedTriggerCheckResolve, deprecatedTriggerCheckReject) {
							if (appService.appConfigHasDeprecatedTriggerMap()) {
								appService.updateDeprecatedTriggerMap();

								Popup.showNoticePopup("<%= data[:strings][:triggers][:update_deprecated_popup][:title] %>", ["<%= data[:strings][:triggers][:update_deprecated_popup][:details_1] %>", "<%= replaced_string(data[:strings][:triggers][:update_deprecated_popup][:details_2], [data[:routes][:blog][:new_triggers]])%>"
								]).then(viewModel.save).then(deprecatedTriggerCheckResolve, deprecatedTriggerCheckReject);
							}
							else {
								deprecatedTriggerCheckResolve();
							}
						}).then(function() {
							resolve();
						}, function(error) {
							reject(error);
						});
					}, function(error) {
						reject(error);
					});

					break;
				case "code-signing":
					resolve();
				case "secrets":
					appService.getSecrets().then(resolve, reject);

					break;
				case "stack":
					$q.all([
						appService.getAppConfig(),
						Stack.getAll().then(appService.getStack),
						appService.getProjectType()
					]).then(resolve, reject);

					break;
				case "yml":
					appService.getAppConfigYML().then(resolve, reject);

					break;
			}
		}).then(function() {
			viewModel.loadAppConfigProgress.success();
		}, function(error) {
			viewModel.loadAppConfigProgress.error(error);

			viewModel.shouldAllowYMLMenuWithoutDiscard = true;
		})
	}

	viewModel.menuSelected = function(menu) {
		viewModel.menuProgress.start("Loading, wait a sec...");

		var shouldCallLoadAfterMenuChange = true;

		$q(function(resolve, reject) {
			if (!viewModel.currentMenu) {
				resolve();

				return;
			}

			var menuIDsByHandledSource = [
				["workflows", "env-vars", "triggers"],
				["secrets"],
				["stack"],
				["yml"]
			];

			if (_.find(menuIDsByHandledSource, function(menuIDsOfSource) {
				return _.contains(menuIDsOfSource, viewModel.currentMenu.id);
			}) == _.find(menuIDsByHandledSource, function(menuIDsOfSource) {
				return _.contains(menuIDsOfSource, menu.id);
			})) {
				shouldCallLoadAfterMenuChange = false;

				resolve();

				return;
			}

			cleanupMenu();

			if (!viewModel.hasUnsavedChanges()) {
				resolve();

				return;
			}

			if (viewModel.shouldAllowYMLMenuWithoutDiscard) {
				viewModel.shouldAllowYMLMenuWithoutDiscard = false;

				resolve();

				return;
			}

			Popup.showConfirmPopup("<%= data[:strings][:main][:confirm_tab_change_save_popup][:title] %>", "<%= data[:strings][:main][:confirm_tab_change_save_popup][:details] %>", "<%= data[:strings][:main][:confirm_tab_change_save_popup][:save] %>", "<%= data[:strings][:main][:confirm_tab_change_save_popup][:cancel] %>", function() {
				viewModel.save(true).then(function() {
					resolve();
				}, function(error) {
					reject();
				});
			}, function() {
				reject();
			});
		}).then(function() {
			_.each(_.without(viewModel.menus, menu), function(aMenu) {
				_.each(aMenu.possibleURLParameterKeys, function(aMenuURLParameterKey) {
					if (!_.contains(menu.possibleURLParameterKeys, aMenuURLParameterKey)) {
						$location.search(aMenuURLParameterKey, null);
					}
				});
			});

			var isInitialSelection = !viewModel.currentMenu;
			if (isInitialSelection && requestService.mode == "website") {
				history.pushState({
					eventID: "backButtonPressedOnInitialWorkflowEditorPage"
				}, "");
			}

			viewModel.currentMenu = menu;
			$location.path("/" + menu.path);

			viewModel.changeMenuProgress.start("<%= data[:strings][:main][:load_menu_progress][:loading] %>");
			if (shouldCallLoadAfterMenuChange) {
				load();
			}

			viewModel.menuProgress.success();
		}, function() {
			viewModel.menuProgress.reset();
		});
	};

	$scope.$on("$routeChangeError", function() {
		viewModel.menuProgress.error(new Error("Failed to load menu."));
	});

	viewModel.isDiscardSaveAvailable = function() {
		if (!viewModel.currentMenu) {
			return undefined;
		}

		switch (viewModel.currentMenu.id) {
			case "secrets":
			case "code-signing":
				return false;
			default:
				return true;
		}
	};

	function cleanupMenu() {
		if (viewModel.currentMenu.id == "secrets") {
			$rootScope.$emit("MainController::cleanupMenu");
		}
	}

	viewModel.hasUnsavedChanges = function() {
		if (!viewModel.currentMenu) {
			return undefined;
		}

		switch (viewModel.currentMenu.id) {
			case "workflows":
			case "env-vars":
			case "triggers":
				return appService.appConfigHasUnsavedChanges();
			case "secrets":
				return appService.secretsHaveUnsavedChanges();
			case "stack":
				return appService.appConfigHasUnsavedChanges() || appService.stackHasUnsavedChanges();
			case "yml":
				return appService.appConfigYMLHasUnsavedChanges();
		}
	}

	window.onload = function() {
		if (requestService.mode == "cli") {
			requestService.cancelAPIConnectionClose();
		}
	};

	window.onbeforeunload = function(event) {
		cleanupMenu();

		if (viewModel.hasUnsavedChanges()) {
			return "<%= data[:strings][:main][:tab_close_confirm_message] %>";
		}

		if (originalOnbeforeunloadHandler) {
			originalOnbeforeunloadHandler(event);
		}
	};

	window.onpopstate = function(event) {
		if (event.state && event.state.eventID == "backButtonPressedOnInitialWorkflowEditorPage") {
			iframeService.sendMessage("backButtonPressedOnInitialWorkflowEditorPage");

			return;
		}
	};

	viewModel.save = function(shouldReturnPromise) {
		if (shouldReturnPromise === undefined) {
			shouldReturnPromise = false;
		}

		viewModel.saveProgress.start("<%= data[:strings][:main][:load_progress][:saving] %>");

		var promise = $q.all([$q(function(resolve, reject) {
			switch (viewModel.currentMenu.id) {
				case "workflows":
				case "env-vars":
				case "triggers":
					appService.saveAppConfig().then(resolve, reject);

					break;
				case "secrets":
					appService.saveSecrets().then(resolve, reject);

					break;
				case "stack":
					$q.all([
						appService.saveAppConfig(),
						appService.saveStack()
					]).then(resolve, reject);

					break;
				case "yml":
					appService.saveAppConfigYML().then(resolve, reject);

					break;
			}
		}), $timeout(function() {}, dateService.defaultSaveDelayDurationInMilliseconds)]).then(function() {
			viewModel.saveProgress.reset();
			$rootScope.$emit("MainController::savedFinishedWithSuccess");
		}, function(error) {
			viewModel.saveProgress.reset();
			$rootScope.$emit("MainController::savedFinishedWithError");
			Popup.showErrorPopup("<%= data[:strings][:main][:load_progress][:save_error] %>", error.message);

			if (shouldReturnPromise) {
				return $q.reject(error);
			}
		});

		if (shouldReturnPromise) {
			return promise;
		}
	};

	viewModel.isSaveEnabled = function() {
		if (!viewModel.menuProgress.isIdle) {
			return false;
		}

		if (!viewModel.loadAppConfigProgress.isIdle) {
			return false;
		}

		if (viewModel.saveProgress.isInProgress) {
			return false;
		}

		if (!viewModel.hasUnsavedChanges()) {
			return false;
		}

		return true;
	};

	$(document).on("keydown", function(event) {
		if ((event.ctrlKey || event.metaKey) && event.which == 83) {
			event.preventDefault();

			if (viewModel.isSaveEnabled()) {
				viewModel.save();
			}

			return false;
		}
	});

	viewModel.discardChangesSelected = function() {
		switch (viewModel.currentMenu.id) {
			case "workflows":
			case "env-vars":
			case "triggers":
				appService.discardAppConfigChanges();

				break;
			case "secrets":
				appService.discardSecretsChanges();

				break;
			case "stack":
				appService.discardAppConfigChanges();
				appService.discardStackChanges();

			case "yml":
				appService.discardAppConfigYMLChanges();

				break;
		}

		$rootScope.$emit("MainController::changesDiscarded");
	};

	viewModel.selectMenuByID = function(menuID) {
		var selectedMenu = _.find(viewModel.menus, {
			id: menuID
		});

		if (!selectedMenu) {
			selectedMenu = _.find(viewModel.menus, {
				id: "workflows"
			});
		}

		viewModel.menuSelected(selectedMenu);
	};

	viewModel.init = function() {
		viewModel.initAppProgress.start("<%= data[:strings][:main][:load_progress][:loading] %>");

		viewModel.menus = _.compact([{
			id: "workflows",
			title: "<%= data[:strings][:main][:menus][:workflows] %>",
			path: "<%= data[:routes][:endpoints][:workflows] %>",
			possibleURLParameterKeys: ["workflow_id"],
			cssClass: "workflows"
		}, (requestService.mode == "website" ? {
			id: "code-signing",
			title: "<%= data[:strings][:main][:menus][:code_signing] %>",
			path: "<%= data[:routes][:endpoints][:code_signing] %>",
			possibleURLParameterKeys: [],
			cssClass: "code-signing"
		} : null), {
			id: "secrets",
			title: "<%= data[:strings][:main][:menus][:secrets] %>",
			path: "<%= data[:routes][:endpoints][:secrets] %>",
			possibleURLParameterKeys: [],
			cssClass: "secrets"
		}, {
			id: "env-vars",
			title: "<%= data[:strings][:main][:menus][:env_vars] %>",
			path: "<%= data[:routes][:endpoints][:env_vars] %>",
			possibleURLParameterKeys: [],
			cssClass: "env-vars"
		}, {
			id: "triggers",
			title: "<%= data[:strings][:main][:menus][:triggers] %>",
			path: "<%= data[:routes][:endpoints][:triggers] %>",
			possibleURLParameterKeys: ["trigger_type"],
			cssClass: "triggers"
		}, (requestService.mode == "website" ? {
			id: "stack",
			title: "<%= data[:strings][:main][:menus][:stack] %>",
			path: "<%= data[:routes][:endpoints][:stack] %>",
			possibleURLParameterKeys: [],
			cssClass: "stack"
		}: null), {
			id: "yml",
			title: "<%= data[:strings][:main][:menus][:yml] %>",
			path: "<%= data[:routes][:endpoints][:yml] %>",
			possibleURLParameterKeys: [],
			cssClass: "yml"
		}]);

		$q(function(resolve, reject) {
			switch (requestService.mode) {
				case "website":
					var configureMessageRegexp = new RegExp("configure-app_slug-([a-zA-Z0-9]*)");
					iframeService.handleMessage(configureMessageRegexp, function(message) {
						requestService.appSlug = configureMessageRegexp.exec(message)[1];

						resolve();
					});

					iframeService.handleMessage("doesWorkflowEditorHaveUnsavedChanges", function() {
						iframeService.sendMessage(viewModel.hasUnsavedChanges() ? "doesWorkflowEditorHaveUnsavedChanges:yes" : "doesWorkflowEditorHaveUnsavedChanges:no");
					});

					iframeService.sendMessage("requestingConfiguration");

					var isScrollAtTop = $(window).scrollTop() == 0;
					$(window).on("scroll", function() {
						if (isScrollAtTop != ($(window).scrollTop() == 0)) {
							iframeService.sendMessage($(window).scrollTop() > 0 ? "shouldMinimizeHeader:yes" : "shouldMinimizeHeader:no");
						}

						isScrollAtTop = $(window).scrollTop() == 0;
					});

					break;
				case "cli":
					resolve();

					break;
			}
		}).then(function() {
			appService.getAppDetails();
			viewModel.initAppProgress.success();
			selectInitialMenu();
		}).catch( function(hasError) {
			viewModel.initAppProgress.error(hasError);
		})
	};

});

})();
