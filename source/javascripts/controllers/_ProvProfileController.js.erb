(function() {

"use strict";

angular.module("BitriseWorkflowEditor").controller("ProvProfileController", function($q, $timeout, requestService, stringService, Popup, Progress, ProvProfile) {

	var viewModel = this;

	var provProfilesReloadIntervalInSeconds = 2;

	viewModel.provProfiles;
	viewModel.loadProvProfilesProgress = new Progress();
	viewModel.uploadProvProfilesProgress = new Progress();
	viewModel.deleteProvProfileProgress = new Progress();
	viewModel.provProfiles;
	viewModel.provProfilesToUpload;
	viewModel.provProfileUploader;

	function loadProvProfiles(shouldClearPreviousLoad) {
		viewModel.loadProvProfilesProgress.start("<%= data[:strings][:code_signing][:prov_profile][:load_progress][:in_progress] %>");
		if (viewModel.uploadProvProfilesProgress.isIdle && viewModel.uploadProvProfilesProgress.statusMessage !== null) {
			viewModel.uploadProvProfilesProgress.reset();
		}

		if (shouldClearPreviousLoad === undefined) {
			shouldClearPreviousLoad = false;
		}

		if (shouldClearPreviousLoad) {
			viewModel.provProfiles = undefined;
		}

		requestService.getProvProfiles().then(function(provProfileDatas) {
			viewModel.provProfiles = _.map(provProfileDatas, function(aProvProfileData) {
				var provProfile = new ProvProfile();

				provProfile.databaseID = aProvProfileData.databaseID;
				provProfile.isProcessed = aProvProfileData.isProcessed;
				provProfile.expiringDownloadURL = aProvProfileData.expiringDownloadURL;

				return provProfile;
			});

			viewModel.loadProvProfilesProgress.success();

			if (_.find(viewModel.provProfiles, {
				isProcessed: false
			})) {
				$timeout(function() {
					loadProvProfiles();
				}, provProfilesReloadIntervalInSeconds * 1000);
			}
		}, function(error) {
			viewModel.loadProvProfilesProgress.error(error);
		});
	};

	viewModel.filesSelectedForUpload = function(files) {
		if (files.length == 0) {
			return;
		}

		viewModel.provProfilesToUpload = _.map(files, function(aFile) {
			var provProfile = new ProvProfile();
			provProfile.file = aFile;

			return provProfile;
		});
	};

	viewModel.uploadProvProfiles = function() {
		viewModel.uploadProvProfilesProgress.start("<%= data[:strings][:code_signing][:prov_profile][:upload_progress][:in_progress] %>");

		var uploadPromise = $q.when();
		_.each(viewModel.provProfilesToUpload, function(aProvProfile) {
			uploadPromise = uploadPromise.then(function() {
				return aProvProfile.upload();
			});
		});

		$q(function(resolve, reject) {
			uploadPromise.then(function() {
				resolve();
			}, function(error) {
				reject(error);
			});
		}).then(function() {
			Popup.showSuccessPopup("<%= data[:strings][:code_signing][:prov_profile][:upload_progress][:success] %>");
			viewModel.uploadProvProfilesProgress.success();

			viewModel.provProfilesToUpload = undefined;
			loadProvProfiles(true);
		}, function(error) {
			viewModel.uploadProvProfilesProgress.error(error);
		});
	};

	viewModel.deleteProvProfile = function(provProfile) {
		viewModel.deleteProvProfileProgress.start("<%= data[:strings][:code_signing][:prov_profile][:delete_progress][:in_progress] %>");
		if (viewModel.uploadProvProfilesProgress.isIdle && viewModel.uploadProvProfilesProgress.statusMessage !== null) {
			viewModel.uploadProvProfilesProgress.reset();
		}

		provProfile.delete().then(function() {
			Popup.showSuccessPopup("<%= data[:strings][:code_signing][:prov_profile][:delete_progress][:success] %>");
			viewModel.deleteProvProfileProgress.success();

			loadProvProfiles(true);
		}, function(error) {
			viewModel.deleteProvProfileProgress.error(error);
		});
	};

	loadProvProfiles();

});

})();
