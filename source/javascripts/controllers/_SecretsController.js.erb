(function() {

"use strict";

angular.module("BitriseWorkflowEditor").controller("SecretsController", function($scope, $rootScope, $q, $timeout, requestService, stringService, dateService, appService, Progress, Variable, Popup) {

	var viewModel = this;

	$scope.appService = appService;
	$scope.Variable = Variable;
	$scope.requestService = requestService;
	var newSecret;

	$scope.$on("$destroy", $rootScope.$on("MainController::changesDiscarded", function() {
		configure();
	}));

	$scope.$on("$destroy", $rootScope.$on("MainController::savedFinishedWithSuccess", function() {
		configure();
	}));

	$scope.$on("$destroy", $rootScope.$on("MainController::savedFinishedWithError", function() {
		configure();
	}));

	viewModel.init = function() {
		configure();
	};

	function configure() {
		_.each(appService.secrets, function(aSecret) {
			aSecret.customProperties.progress = new Progress();
			aSecret.customProperties.isEditMode = false;
		});
	}

	viewModel.addToSecrets = function() {
		newSecret = new Variable({
			"": ""
		}, Variable.defaultVariableConfig());
		newSecret.isExpand(false);

		newSecret.customProperties.progress = new Progress();
		appService.secrets.push(newSecret);

		viewModel.toggleEditModeForSecret(newSecret, true);
	};

	viewModel.secretModelsChangeOccured = function() {
		if (!appService.secretsHaveUnsavedChanges()) {
			return;
		}

		if (appService.secrets.length != appService.savedSecrets.length) {
			return;
		}

		appService.saveSecrets().then(function() {

		}, function(error) {
			Popup.showErrorPopup(error.message);

			appService.discardSecretsChanges();
		});
	};

	viewModel.toggleEditModeForSecret = function(secret, shouldEnterEditMode) {
		if (newSecret && ((secret == newSecret && !shouldEnterEditMode) || (secret != newSecret && shouldEnterEditMode))) {
			var index = _.indexOf(appService.secrets, newSecret);
			appService.secrets.splice(index, 1);

			newSecret = null;
		}

		_.each(appService.secrets, function(aSecret) {
			if (!aSecret.customProperties.savedUserVariableConfig) {
				aSecret.customProperties.savedUserVariableConfig = angular.copy(aSecret.userVariableConfig);
			}

			aSecret.userVariableConfig = angular.copy(aSecret.customProperties.savedUserVariableConfig);
			aSecret.reconfigureMeta();
			aSecret.customProperties.isEditMode = false;
		});

		if (shouldEnterEditMode) {
			secret.customProperties.savedUserVariableConfig = angular.copy(secret.userVariableConfig);
			secret.customProperties.isEditMode = true;
		}
	};

	viewModel.saveSecret = function(secret) {
		secret.customProperties.progress.start("<%= data[:strings][:env_vars][:secrets][:save][:in_progress] %>");

		$q.all([
			appService.saveSecrets(),
			$timeout(function() {}, dateService.defaultSaveDelayDurationInMilliseconds)
		]).then(function() {
			secret.customProperties.progress.success();

			if (secret == newSecret) {
				newSecret = null;
			}

			secret.customProperties.isEditMode = false;
		}, function(error) {
			secret.customProperties.progress.error(error);
		});
	};

	viewModel.deleteSecret = function(secret) {
		if (secret == newSecret) {
			var index = _.indexOf(appService.secrets, newSecret);
			appService.secrets.splice(index, 1);

			newSecret = null;

			return;
		}

		Popup.showConfirmPopup("<%= data[:strings][:env_vars][:secrets][:delete][:confirm_question] %>", "<%= data[:strings][:env_vars][:secrets][:delete][:confirm_details] %>", "<%= data[:strings][:env_vars][:secrets][:delete][:confirm_ok] %>", "<%= data[:strings][:env_vars][:secrets][:delete][:confirm_cancel] %>").then(function() {
			var index = _.indexOf(appService.secrets, secret);
			appService.secrets.splice(index, 1);

			appService.saveSecrets().then(function() {
				secret.customProperties.isEditMode = false;
			}, function(error) {
				appService.secrets.splice(index, 0, secret);

				Popup.showErrorPopup(error.message);
			});
		});
	};

	viewModel.secretValidationWarning = function(secret, keyUniquenessScope) {
		var errors = [];

		if (!Variable.isValidKey(secret.key(), keyUniquenessScope)) {
			errors.push(new Error("<%= data[:strings][:env_vars][:invalid_env_var_key] %>"));

			if (keyUniquenessScope) {
				errors.push(new Error("<%= data[:strings][:env_vars][:should_be_unique] %>"));
			}
		}

		return errors.length > 0 ? stringService.errorMessageFromErrors(errors) : null;
	};

	viewModel.valueVisibilityGetterSetterForSecret = function(secret) {
		return function(shouldShowValue) {
			if (shouldShowValue !== undefined) {
				if (shouldShowValue && !secret.customProperties.progress.isInProgress) {
					getSecretValue(secret);
				}

				secret.shouldShowValue = shouldShowValue;
			}

			return secret.shouldShowValue;
		};
	};

	function getSecretValue(secret) {
		secret.customProperties.progress.start("<%= data[:strings][:env_vars][:get_secret_env_value_progress][:in_progress] %>");

		appService.getSecretValue(secret).then(function() {
			secret.customProperties.progress.success();
		}, function(error) {
			secret.customProperties.progress.error(error);
		});
	}

	viewModel.valueGetterSetterForSecret = function(secret) {
		return function(value) {
			return (secret.value() !== null && secret.shouldShowValue) ? secret.value(value) : "******";
		};
	};

	viewModel.makeSecretProtected = function(secret) {
		Popup.showConfirmPopup("<%= data[:strings][:env_vars][:secrets][:make_protected][:confirm_question] %>", "<%= data[:strings][:env_vars][:secrets][:make_protected][:confirm_details] %>", "<%= data[:strings][:env_vars][:secrets][:make_protected][:confirm_ok] %>", "<%= data[:strings][:env_vars][:secrets][:make_protected][:confirm_cancel] %>").then(function() {
			secret.shouldShowValue = false;
			secret.isKeyChangeable = false;
			secret.isProtected(true);
		});
	};
});

})();
