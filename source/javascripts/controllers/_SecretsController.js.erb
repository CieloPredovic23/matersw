(function() {

"use strict";

angular.module("BitriseWorkflowEditor").controller("SecretsController", function($scope, $rootScope, $q, $cookies, requestService, stringService, appService, Progress, Variable, Popup) {

	var viewModel = this;

	$scope.appService = appService;
	$scope.Variable = Variable;
	$scope.requestService = requestService;

	$scope.$on("$destroy", $rootScope.$on("MainController::changesDiscarded", function() {
		configure();
	}));

	$scope.$on("$destroy", $rootScope.$on("MainController::savedFinishedWithSuccess", function() {
		configure();
	}));

	$scope.$on("$destroy", $rootScope.$on("MainController::savedFinishedWithError", function() {
		configure();
	}));

	viewModel.init = function() {
		configure();
	};

	function configure() {
		_.each(appService.secrets, function(aSecret) {
			aSecret.customProperties.progress = new Progress();
			aSecret.customProperties.isMenuVisible = false;
		});
	}

	viewModel.addToSecrets = function() {
		var newSecret = new Variable({
			"": ""
		}, Variable.defaultVariableConfig());
		newSecret.isExpand(false);

		newSecret.customProperties.progress = new Progress();
		newSecret.customProperties.isMenuVisible = false;

		appService.secrets.push(newSecret);
	};

	viewModel.removeSecretFromSecrets = function(secret) {
		var index = _.indexOf(appService.secrets, secret);

		appService.secrets.splice(index, 1);
	};

	viewModel.secretValidationWarning = function(secret, keyUniquenessScope) {
		var errors = [];

		if (!Variable.isValidKey(secret.key(), keyUniquenessScope)) {
			errors.push(new Error("<%= data[:strings][:env_vars][:invalid_env_var_key] %>"));

			if (keyUniquenessScope) {
				errors.push(new Error("<%= data[:strings][:env_vars][:should_be_unique] %>"));
			}
		}

		return errors.length > 0 ? stringService.errorMessageFromErrors(errors) : null;
	};

	viewModel.valueVisibilityGetterSetterForSecret = function(secret) {
		return function(shouldShowValue) {
			if (shouldShowValue !== undefined) {
				if (shouldShowValue && !secret.customProperties.progress.isInProgress) {
					getSecretValue(secret);
				}

				secret.shouldShowValue = shouldShowValue;
			}

			return secret.shouldShowValue;
		};
	};

	function getSecretValue(secret) {
		secret.customProperties.progress.start("<%= data[:strings][:env_vars][:get_secret_env_value_progress][:in_progress] %>");

		appService.getSecretValue(secret).then(function() {
			secret.customProperties.progress.success();
		}, function(error) {
			secret.customProperties.progress.error(error);
		});
	}

	viewModel.valueGetterSetterForSecret = function(secret) {
		return function(value) {
			return (secret.value() !== null && secret.shouldShowValue) ? secret.value(value) : "******";
		};
	};

	viewModel.makeSecretProtected = function(secret) {
		Popup.showConfirmPopup("<%= data[:strings][:env_vars][:secrets][:make_protected][:confirm_question] %>", "<%= data[:strings][:env_vars][:secrets][:make_protected][:confirm_details] %>", "<%= data[:strings][:env_vars][:secrets][:make_protected][:confirm_ok] %>", "<%= data[:strings][:env_vars][:secrets][:make_protected][:confirm_cancel] %>").then(function() {
			secret.shouldShowValue = false;
			secret.isKeyChangeable = false;
			secret.isProtected(true);
		});
	};
});

})();
