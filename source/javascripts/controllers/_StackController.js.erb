(function() {
	"use strict";

	angular
		.module("BitriseWorkflowEditor")
		.controller("StackController", function(
			$scope,
			$rootScope,
			stringService,
			appService,
			Workflow,
			Stack,
			MachineType,
			planServiceUtil
		) {
			var viewModel = this;

			viewModel.workflows;
			$scope.Stack = Stack;
			$scope.MachineType = MachineType;
			$scope.appService = appService;
			$scope.showMachineCreditCost = false;
			viewModel.defaultDockerImagesByStackIDs = {
				"linux-docker-android": "bitriseio/android-ndk:pinned",
				"linux-docker-android-20.04": "bitriseio/android-ndk-20.04:pinned",
			};
			viewModel.machineTypeTagNotes = {
				"gen1": "<%= data[:strings][:stack][:machine_type_notes][:gen1] %>",
				"gen2": "<%= data[:strings][:stack][:machine_type_notes][:gen2] %>"
			};

			viewModel.stackMachineMap = appService.availableStacks().reduce(function(result, stack) {
				var stackMachineTypes = _.filter(MachineType.all, function(machineType) {
					if (machineType.availableOnStacks) {
						return machineType.availableOnStacks.indexOf(stack.id) > -1;
					}
					return machineType.stackType === stack.type;
				});
				result[stack.id] = _.groupBy(stackMachineTypes, 'chip');

				return result;
			}, {});

			viewModel.getStackMachineTypeChipOrder = function(stackId) {
				if (viewModel.stackMachineMap) {
					return Object.keys(viewModel.stackMachineMap[stackId] || {}).sort();
				}
				return [];
      		}

			viewModel.init = function() {
				appService.getOwnerPlanData().then(() => {
					$scope.showMachineCreditCost = getShowMachineCreditCost();
					configure();
				}).catch(() => {
					$scope.showMachineCreditCost = getShowMachineCreditCost();
					configure();
				});
			};

			$scope.$on(
				"$destroy",
				$rootScope.$on("MainController::changesDiscarded", function() {
					configure();
				})
			);

			function configure() {
				viewModel.workflows = _.map(appService.appConfig.workflows, function(
					aWorkflowConfig,
					workflowID
				) {
					return new Workflow(workflowID, aWorkflowConfig);
				});
			}

			viewModel.stackOptionTitle = function(stack) {
				return stack
					? stack.name
						? stack.name
						: stack.id
					: stringService.stringReplacedWithParameters(
							"<%= data[:strings][:stack][:default_stack] %>",
							{
								stack_name: viewModel.stackOptionTitle(appService.stack)
							}
					  );
			};

			viewModel.defaultStackOptions = function() {
				var stacks = appService.availableStacks();

				if (!_.contains(stacks, appService.stack)) {
					stacks.push(appService.stack);
				}

				return stacks;
			};

			viewModel.onDefaultStackChange = function() {
				appService.dockerImage = viewModel.defaultDockerImagesByStackIDs[appService.stack.id] ? '' : null;

				var isPreviousMachineTypeAvailable = viewModel.isMachineTypeAvailableForStack(appService.defaultMachineType, appService.stack);

				if (!isPreviousMachineTypeAvailable && MachineType.defaults) {
					viewModel.setDefaultMachineType(MachineType.defaults[appService.stack.type]);
				}
			}

			viewModel.stackGetterSetterForWorkflow = function(workflow, shouldNormalize) {
				if (shouldNormalize === undefined) {
					shouldNormalize = false;
				}

				return function(stack) {
					if (stack === null && shouldNormalize) {
						stack = appService.stack;
					}

					var stacks = [];
					if (stack && !_.contains(Stack.all, stack)) {
						stacks.push(stack);
					}
					stacks = stacks.concat(Stack.all);

					var defaultMachineTypeForStack;
					if (stack) {
						var previousMachineType = viewModel.workflowMachineType(workflow);
						var isPreviousMachineTypeAvailable = viewModel.isMachineTypeAvailableForStack(previousMachineType, stack);

						if (isPreviousMachineTypeAvailable) {
							defaultMachineTypeForStack = previousMachineType;
						} else if (MachineType.defaults) {
							defaultMachineTypeForStack = MachineType.defaults[stack.type];
						}
					}
					stack = workflow.stack(stack, stacks, defaultMachineTypeForStack);

					if (stack === null && shouldNormalize) {
						return appService.stack;
					}

					return stack;
				};
			};

			viewModel.setDefaultMachineType = function(machineType) {
				if (!machineType.isAvailable) {
					return;
				}

				appService.defaultMachineType = machineType;
			}

			viewModel.setWorkflowMachineType = function(machineType, workflow) {
				if (!machineType.isAvailable) {
					return;
				}

				var stack = viewModel.stackGetterSetterForWorkflow(workflow, true)();
				workflow.machineType(stack.type, machineType, MachineType.all);
			};

			viewModel.workflowMachineType = function(workflow) {
				var stack = viewModel.stackGetterSetterForWorkflow(workflow, true)();
				var workflowMachineType = workflow.machineType(stack.type, undefined, MachineType.all);

				return workflowMachineType || appService.defaultMachineType;
			};

			viewModel.isMachineTypeAvailableForStack = function(previousMachineType, stack) {
				return Object.values(viewModel.stackMachineMap[stack.id]).some(machineTypes =>
					machineTypes.some(machineType => machineType.id === previousMachineType.id && machineType.type === previousMachineType.type)
				);
			};
			viewModel.descriptionURLForStack = function(stack) {
				if (stack.descriptionURLGen2 !== undefined) {
					return stack.descriptionURLGen2;
				}

				return stack.descriptionURL;
			};

			viewModel.hasDescriptionURLForStack = function(stack) {
				return !!viewModel.descriptionURLForStack(stack);
			}

			viewModel.osForStackWithMachineType = function(stack, machineType) {
				return stack.osForChip[machineType.chip];
			}

			function getShowMachineCreditCost() {
				if (appService.ownerPlanData) {
					return !planServiceUtil.isModernConcurrencyPlan(appService.ownerPlanData.name);
				}
				return true;
			}
		});
})();
