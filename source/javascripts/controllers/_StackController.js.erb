(function() {

"use strict";

angular.module("BitriseWorkflowEditor").controller("StackController", function($scope, $rootScope, stringService, appService, Workflow, Stack) {

	var viewModel = this;

	viewModel.workflows;
	$scope.Stack = Stack;
	$scope.appService = appService;
	viewModel.defaultDockerImagesByStackIDs = {
		"linux-docker-android": "bitriseio/android-ndk:pinned"
	};

	viewModel.init = function() {
		configure();
	};

	$scope.$on("$destroy", $rootScope.$on("MainController::changesDiscarded", function() {
		configure();
	}));

	function configure() {
		viewModel.workflows = _.map(appService.appConfig.workflows, function(aWorkflowConfig, workflowID) {
			return new Workflow(workflowID, aWorkflowConfig);
		});
	}

	viewModel.stackOptionTitle = function(stack) {
		return stack ? (stack.name ? stack.name : stack.id) : stringService.stringReplacedWithParameters("<%= data[:strings][:stack][:default_stack] %>", {
			stack_name: viewModel.stackOptionTitle(appService.stack)
		});
	};

	viewModel.defaultStackOptions = function() {
		var stacks = appService.availableStacks();

		if (!_.contains(stacks, appService.stack)) {
			stacks.push(appService.stack);
		}

		return stacks;
	}

	viewModel.stackGetterSetterForWorkflow = function(workflow, shouldNormalize) {
		if (shouldNormalize === undefined) {
			shouldNormalize = false;
		}

		return function(stack) {
			if (stack === null && shouldNormalize) {
				stack = appService.stack;
			}

			var stacks = [];
			if (stack && !_.contains(Stack.all, stack)) {
				stacks.push(stack);
			}
			stacks = stacks.concat(Stack.all);

			stack = workflow.stack(stack, stacks);

			if (stack === null && shouldNormalize) {
				return appService.stack;
			}

			return stack;
		};
	};

});

})();
