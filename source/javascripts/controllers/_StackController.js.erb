(function() {
	"use strict";

	angular
		.module("BitriseWorkflowEditor")
		.controller("StackController", function(
			$scope,
			$rootScope,
			stringService,
			appService,
			Workflow,
			Stack,
			MachineType
		) {
			var viewModel = this;

			viewModel.workflows;
			$scope.Stack = Stack;
			$scope.MachineType = MachineType;
			$scope.appService = appService;
			viewModel.defaultDockerImagesByStackIDs = {
				"linux-docker-android": "bitriseio/android-ndk:pinned"
			};

			viewModel.init = function() {
				configure();
			};

			$scope.$on(
				"$destroy",
				$rootScope.$on("MainController::changesDiscarded", function() {
					configure();
				})
			);

			function configure() {
				viewModel.workflows = _.map(appService.appConfig.workflows, function(
					aWorkflowConfig,
					workflowID
				) {
					return new Workflow(workflowID, aWorkflowConfig);
				});
			}

			viewModel.stackOptionTitle = function(stack) {
				return stack
					? stack.name
						? stack.name
						: stack.id
					: stringService.stringReplacedWithParameters(
							"<%= data[:strings][:stack][:default_stack] %>",
							{
								stack_name: viewModel.stackOptionTitle(appService.stack)
							}
					  );
			};

			viewModel.defaultStackOptions = function() {
				var stacks = appService.availableStacks();

				if (!_.contains(stacks, appService.stack)) {
					stacks.push(appService.stack);
				}

				return stacks;
			};

			viewModel.onDefaultStackChange = function() {
				appService.dockerImage = viewModel.defaultDockerImagesByStackIDs[appService.stack.id] ? '' : null;
				if (MachineType.defaults) {
					viewModel.setDefaultMachineType(MachineType.defaults[appService.stack.type]);
				}
			}

			viewModel.stackGetterSetterForWorkflow = function(workflow, shouldNormalize) {
				if (shouldNormalize === undefined) {
					shouldNormalize = false;
				}

				return function(stack) {
					if (stack === null && shouldNormalize) {
						stack = appService.stack;
					}

					var stacks = [];
					if (stack && !_.contains(Stack.all, stack)) {
						stacks.push(stack);
					}
					stacks = stacks.concat(Stack.all);

					var defaultMachineTypeForStack;
					if (stack && MachineType.defaults) {
						defaultMachineTypeForStack = MachineType.defaults[stack.type];
					}
					stack = workflow.stack(stack, stacks, defaultMachineTypeForStack);

					if (stack === null && shouldNormalize) {
						return appService.stack;
					}

					return stack;
				};
			};

			viewModel.availableMachineTypes = function(workflow) {
				var stack = workflow ? viewModel.stackGetterSetterForWorkflow(workflow, true)() : appService.stack;
				return _.filter(MachineType.all, { stackType: stack.type });
			};

			viewModel.setDefaultMachineType = function(machineType) {
				if (!machineType.isAvailable) {
					return;
				}

				appService.defaultMachineType = machineType;
			}

			viewModel.setWorkflowMachineType = function(machineType, workflow) {
				if (!machineType.isAvailable) {
					return;
				}

				var stack = viewModel.stackGetterSetterForWorkflow(workflow, true)();
				workflow.machineType(stack.type, machineType, MachineType.all);
			};

			viewModel.workflowMachineType = function(workflow) {
				var stack = viewModel.stackGetterSetterForWorkflow(workflow, true)();
				var workflowMachineType = workflow.machineType(stack.type, undefined, MachineType.all);
				
				return workflowMachineType || appService.defaultMachineType;
			};
		});
})();
