(function() {
	"use strict";

	angular
		.module("BitriseWorkflowEditor")
		.controller("TriggersController", function(
			$scope,
			$rootScope,
			$location,
			appService,
			Progress,
			Trigger,
			Workflow
		) {
			var viewModel = this;

			var addTriggerProgress = new Progress();

			viewModel.targets;

			$scope.triggerTypes = [
				{
					id: "push",
					urlParameterValue: "push",
					triggers: undefined
				},
				{
					id: "pull-request",
					urlParameterValue: "pull_request",
					triggers: undefined
				},
				{
					id: "tag",
					urlParameterValue: "tag",
					triggers: undefined
				}
			];
			viewModel.selectedTriggerType;

			viewModel.selectedTrigger = null;
			viewModel.editedTrigger;
			viewModel.editedTriggerPushBranchPattern;
			viewModel.editedTriggerPullRequestSourceBranchPattern;
			viewModel.editedTriggerPullRequestTargetBranchPattern;
			viewModel.editedTriggerTagPattern;
			viewModel.newTriggerIndex;

			$scope.$on(
				"$destroy",
				$rootScope.$on("MainController::changesDiscarded", function() {
					configureWithAppConfig();
				})
			);

			$scope.$watch(
				"triggerTypes",
				function(triggerTypes) {
					if (!appService.appConfig) {
						return;
					}

					appService.appConfig.trigger_map = [];

					_.each(triggerTypes, function(aTriggerType) {
						_.each(aTriggerType.triggers, function(aTrigger) {
							appService.appConfig.trigger_map.push(aTrigger.triggerConfig);
						});
					});

					if (_.isEmpty(appService.appConfig.trigger_map)) {
						delete appService.appConfig["trigger_map"];
					}
				},
				true
			);

			function configureWithAppConfig() {
				viewModel.targets = Object.keys(appService.appConfig.workflows)
					.map(function(workflowId) {
						return { groupLabel: "Workflows", type: "workflow", value: workflowId, disabled: workflowId[0] === "_" };
					});

				if (appService.betaTags && appService.betaTags.indexOf("can-trigger-pipeline") > -1) {
					var pipelines = Object.keys(appService.appConfig.pipelines).map(function(pipelineId) {
						return { groupLabel: "Pipelines", type: "pipeline", value: pipelineId };
					});
					viewModel.targets = viewModel.targets.concat(pipelines);	
				}

				_.each($scope.triggerTypes, function(aTriggerType) {
					aTriggerType.triggers = [];
				});

				if (addTriggerProgress.isInProgress) {
					addTriggerProgress.reset();
				}

				_.each(appService.appConfig.trigger_map, function(triggerConfig) {
					var trigger = new Trigger(triggerConfig);

					_.find($scope.triggerTypes, {
						id: trigger.type()
					}).triggers.push(trigger);
				});

				var triggerType = _.find($scope.triggerTypes, {
					urlParameterValue: $location.search().trigger_type
				});
				if (!triggerType) {
					triggerType = _.first($scope.triggerTypes);
				}

				viewModel.triggerTypeSelected(triggerType);
			}

			viewModel.triggerTypeSelected = function(triggerType) {
				if (triggerType !== undefined) {
					if (addTriggerProgress.isInProgress) {
						viewModel.triggerEditCancelled();
					}

					viewModel.selectedTriggerType = triggerType;
					$location
						.search("trigger_type", triggerType.urlParameterValue)
						.replace();
					viewModel.triggerSelected(null);
				}

				return viewModel.selectedTriggerType;
			};

			viewModel.triggerSelected = function(trigger) {
				if (addTriggerProgress.isInProgress) {
					viewModel.triggerEditCancelled();
				}

				viewModel.selectedTrigger = trigger;
				viewModel.editedTrigger = angular.copy(viewModel.selectedTrigger);

				if (viewModel.editedTrigger) {
					viewModel.editedTrigger.target = viewModel.editedTrigger.getTarget();
				}
				
				viewModel.editedTriggerPushBranchPattern = viewModel.editedTrigger
					? viewModel.editedTrigger.pushBranchPattern()
					: undefined;
				if (viewModel.editedTriggerPushBranchPattern == "*") {
					viewModel.editedTriggerPushBranchPattern = "";
				}
				viewModel.editedTriggerPullRequestSourceBranchPattern = viewModel.editedTrigger
					? viewModel.editedTrigger.pullRequestSourceBranchPattern()
					: undefined;
				if (viewModel.editedTriggerPullRequestSourceBranchPattern == "*") {
					viewModel.editedTriggerPullRequestSourceBranchPattern = "";
				}
				viewModel.editedTriggerPullRequestTargetBranchPattern = viewModel.editedTrigger
					? viewModel.editedTrigger.pullRequestTargetBranchPattern()
					: undefined;
				if (viewModel.editedTriggerPullRequestTargetBranchPattern == "*") {
					viewModel.editedTriggerPullRequestTargetBranchPattern = "";
				}
				viewModel.editedTriggerTagPattern = viewModel.editedTrigger
					? viewModel.editedTrigger.tagPattern()
					: undefined;
				if (viewModel.editedTriggerTagPattern == "*") {
					viewModel.editedTriggerTagPattern = "";
				}
			};

			viewModel.deleteTrigger = function(trigger) {
				var index = _.indexOf(viewModel.selectedTriggerType.triggers, trigger);
				viewModel.selectedTriggerType.triggers.splice(index, 1);
			};

			viewModel.addTriggerSelectedAtIndex = function(index) {
				var newTrigger = new Trigger();
				newTrigger.type(viewModel.selectedTriggerType.id);
				newTrigger.setTarget(_.first(viewModel.targets));
				switch (newTrigger.type()) {
					case "push":
						newTrigger.pushBranchPattern("");

						break;
					case "pull-request":
						newTrigger.pullRequestSourceBranchPattern("");
						newTrigger.pullRequestTargetBranchPattern("");

						break;
					case "tag":
						newTrigger.tagPattern("");

						break;
				}

				viewModel.selectedTriggerType.triggers.splice(index, 0, newTrigger);

				viewModel.triggerSelected(newTrigger);
				addTriggerProgress.start();
			};

			viewModel.triggerIsInvalid = function() {
				return _.any(
					_.without(
						viewModel.selectedTriggerType.triggers,
						viewModel.selectedTrigger
					),
					function(aTrigger) {
						switch (viewModel.editedTrigger.type()) {
							case "push":
								return (
									aTrigger.pushBranchPattern() ==
									viewModel.editedTrigger.pushBranchPattern()
								);
							case "pull-request":
								return (
									aTrigger.pullRequestSourceBranchPattern() ==
										viewModel.editedTrigger.pullRequestSourceBranchPattern() &&
									aTrigger.pullRequestTargetBranchPattern() ==
										viewModel.editedTrigger.pullRequestTargetBranchPattern()
								);

								break;
							case "tag":
								return (
									aTrigger.tagPattern() == viewModel.editedTrigger.tagPattern()
								);
						}
					}
				);
			};

			viewModel.triggerEditFinished = function() {
				viewModel.selectedTrigger.setTarget(viewModel.editedTrigger.target);

				switch (viewModel.selectedTrigger.type()) {
					case "push":
						viewModel.selectedTrigger.pushBranchPattern(
							viewModel.editedTrigger.pushBranchPattern()
						);

						break;
					case "pull-request":
						viewModel.selectedTrigger.pullRequestSourceBranchPattern(
							viewModel.editedTrigger.pullRequestSourceBranchPattern()
						);
						viewModel.selectedTrigger.pullRequestTargetBranchPattern(
							viewModel.editedTrigger.pullRequestTargetBranchPattern()
						);

						break;
					case "tag":
						viewModel.selectedTrigger.tagPattern(
							viewModel.editedTrigger.tagPattern()
						);

						break;
				}

				if (addTriggerProgress.isInProgress) {
					addTriggerProgress.success();
				}

				viewModel.triggerSelected(null);
			};

			viewModel.triggerEditCancelled = function() {
				if (addTriggerProgress.isInProgress) {
					addTriggerProgress.reset();
					viewModel.deleteTrigger(viewModel.selectedTrigger);
				}

				viewModel.triggerSelected(null);
			};

			configureWithAppConfig();
		});
})();
