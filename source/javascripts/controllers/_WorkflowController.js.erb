(function() {

"use strict";

angular.module("BitriseWorkflowEditor").controller("WorkflowController", function($scope, $rootScope, Popup, Step) {

	var viewModel = this;

	$scope.workflow;
	viewModel.isEditMode = false;
	viewModel.selectedStep = null;

	viewModel.workflowEditSelected = function() {
		viewModel.isEditMode = true;

		$rootScope.$emit("WorkflowController::workflowEditSelected", $scope.workflow);
	};

	$scope.$on("$destroy", $rootScope.$on("WorkflowController::workflowEditSelected", function(event, workflow) {
		viewModel.isEditMode = workflow == $scope.workflow;

		if (!viewModel.isEditMode) {
			viewModel.stepSelected(null);
		}
	}));

	viewModel.stepSelected = function(step) {
		if (step == viewModel.selectedStep) {
			return;
		}

		viewModel.selectedStep = step;

		if (step) {
			$rootScope.$emit("StepController::configureWithStep", viewModel.selectedStep);

			if (!viewModel.isEditMode) {
				viewModel.workflowEditSelected();
			}
		}
	};

	viewModel.addStepSelectedBeforeStep = function(step) {
		$rootScope.$emit("AddStepController::showAddStepPopupWithInsertIndex", _.indexOf($scope.workflow.steps, step));
	};

	$scope.$on("$destroy", $rootScope.$on("AddStepController::addStepAtIndex", function(event, step, index) {
		if (!$scope.workflow.steps) {
			$scope.workflow.steps = [];
		}

		var addedStep = angular.copy(step);
		$scope.workflow.steps.splice(index, 0, addedStep);

		viewModel.stepSelected(addedStep);
	}));

	viewModel.cloneStepSelected = function() {
		var clonedStep = angular.copy(viewModel.selectedStep);
		var index = _.indexOf($scope.workflow.steps, viewModel.selectedStep);
		$scope.workflow.steps.splice(index + 1, 0, clonedStep);

		viewModel.stepSelected(clonedStep);
	};

	viewModel.deleteStepSelected = function() {
		var index = _.indexOf($scope.workflow.steps, viewModel.selectedStep);
		$scope.workflow.steps.splice(index, 1);

		viewModel.stepSelected(null);
	};

	$scope.$watchCollection("workflow.steps", function(newSteps) {
		if (!$scope.workflow) {
			return;
		}

		$scope.workflow.workflowConfig.steps = _.map(newSteps, function(aStep) {
			return aStep.wrappedUserStepConfig();
		});
	});

	$scope.$on("$destroy", $rootScope.$on("StepController::stepVersionChanged", function() {
		var index = _.findIndex($scope.workflow.workflowConfig.steps, function(aWrappedUserStepConfig) {
			return aWrappedUserStepConfig[Step.cvsFromWrappedStepConfig(aWrappedUserStepConfig)] == viewModel.selectedStep.userStepConfig;
		});

		$scope.workflow.workflowConfig.steps.splice(index, 1, viewModel.selectedStep.wrappedUserStepConfig());
	}));

	$scope.$on("$destroy", $rootScope.$on("InsertVariableController::requestingParametersForInsertVariable", function() {
		$rootScope.$emit("InsertVariableController::configureInsertVariableWithParameters", viewModel.appConfig, $scope.workflow, viewModel.selectedStep);
	}));

});

})();
