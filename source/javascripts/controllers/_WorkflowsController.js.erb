(function() {

"use strict";

angular.module("BitriseWorkflowEditor").controller("WorkflowsController", function($scope, $rootScope, $q, bitriseSteplibService, Progress, Popup, Workflow) {

	var viewModel = this;

	viewModel.appConfig;
	viewModel.workflows;
	viewModel.selectedWorkflow = null;
	viewModel.selectedWorkflowChain;
	viewModel.configureWorkflowsProgress = new Progress();

	viewModel.addWorkflowPopup = new Popup({
		workflowID: ""
	});
	viewModel.addWorkflowPopup.afterDismissCallback = function() {
		viewModel.addWorkflowPopup.parameters.workflowID = "";
	};

	viewModel.addRunWorkflowPopup = new Popup();

	$scope.$on("$destroy", $rootScope.$on("MainController::appConfigLoaded", function(event, appConfig) {
		configureWorkflowsFromAppConfig(appConfig);
	}));

	$scope.$on("$destroy", $rootScope.$on("MainController::discardChanges", function(event, appConfig) {
		configureWorkflowsFromAppConfig(appConfig);
	}));

	function configureWorkflowsFromAppConfig(appConfig) {
		viewModel.configureWorkflowsProgress.start("<%= data[:strings][:workflows][:load_workflows_progress][:in_progress] %>");

		var canceler = $q.defer();

		$scope.$on("$destroy", function() {
			canceler.resolve();
		});

		var previouslySelectedWorkflowID = viewModel.selectedWorkflow ? viewModel.selectedWorkflow.id : null;

		viewModel.appConfig = appConfig;

		bitriseSteplibService.load({
			timeout: canceler.promise
		}).then(function() {
			try {
				var allWorkflowsLoadedCallbacks = [];

				viewModel.workflows = _.map(viewModel.appConfig.workflows, function(aWorkflowConfig, aWorkflowID) {
					return new Workflow(aWorkflowID, aWorkflowConfig);
				});

				var selectedWorkflow = _.find(viewModel.workflows, function(aWorkflow) {
					return aWorkflow.id == previouslySelectedWorkflowID;
				});

				if (!selectedWorkflow) {
					selectedWorkflow = _.first(viewModel.workflows);
				}

				viewModel.workflowSelected(selectedWorkflow);

				viewModel.configureWorkflowsProgress.success();
			}
			catch (error) {
				viewModel.workflows = undefined;
				console.log(error);
				viewModel.configureWorkflowsProgress.error(new Error("<%= data[:strings][:workflows][:load_workflows_progress][:error] %>"));
			}
		});
	}

	viewModel.workflowSelected = function(workflow) {
		if (workflow === undefined) {
			return viewModel.selectedWorkflow;
		}

		if (workflow == viewModel.selectedWorkflow) {
			return;
		}
		
		viewModel.selectedWorkflow = workflow;

		updateSelectedWorkflowChain();

		$rootScope.$emit("WorkflowController::workflowEditSelected", workflow);
	};

	function updateSelectedWorkflowChain() {
		viewModel.selectedWorkflowChain = [];

		_.each(viewModel.selectedWorkflow.workflowConfig.before_run, function(aWorkflowID) {
			var beforeRunWorkflow = _.find(viewModel.workflows, {
				id: aWorkflowID
			});
			beforeRunWorkflow = new Workflow(beforeRunWorkflow.id, beforeRunWorkflow.workflowConfig);
			viewModel.selectedWorkflowChain.push(beforeRunWorkflow);
		});

		viewModel.selectedWorkflowChain.push(viewModel.selectedWorkflow);

		_.each(viewModel.selectedWorkflow.workflowConfig.after_run, function(aWorkflowID) {
			var afterRunWorkflow = _.find(viewModel.workflows, {
				id: aWorkflowID
			});
			afterRunWorkflow = new Workflow(afterRunWorkflow.id, afterRunWorkflow.workflowConfig);
			viewModel.selectedWorkflowChain.push(afterRunWorkflow);
		});
	}

	viewModel.addWorkflowSelected = function() {
		viewModel.addWorkflowPopup.isVisible = true;
	};

	viewModel.addWorkflow = function() {
		viewModel.appConfig.workflows[viewModel.addWorkflowPopup.parameters.workflowID] = angular.copy(viewModel.selectedWorkflow.workflowConfig);

		configureWorkflowsFromAppConfig(viewModel.appConfig);

		viewModel.workflowSelected(_.find(viewModel.workflows, {
			id: viewModel.addWorkflowPopup.parameters.workflowID
		}));

		viewModel.addWorkflowPopup.isVisible = false;
	};

	viewModel.addRunWorkflowSelected = function(isBeforeRunMode) {
		viewModel.addRunWorkflowPopup.parameters.isBeforeRunMode = isBeforeRunMode;
		viewModel.addRunWorkflowPopup.isVisible = true;
	};

	viewModel.runWorkflowSelectedForAdd = function(workflow) {
		var runWorkflowKey = viewModel.addRunWorkflowPopup.parameters.isBeforeRunMode ? "before_run" : "after_run";
		if (!viewModel.selectedWorkflow.workflowConfig[runWorkflowKey]) {
			viewModel.selectedWorkflow.workflowConfig[runWorkflowKey] = [];
		}

		viewModel.selectedWorkflow.workflowConfig[runWorkflowKey].push(workflow.id);
		updateSelectedWorkflowChain();

		viewModel.addRunWorkflowPopup.isVisible = false;
	};

	viewModel.workflowAtIndexInChainSelectedForRemove = function(index) {
		var selectedWorkflowIndex = _.indexOf(viewModel.selectedWorkflowChain, viewModel.selectedWorkflow);
		if (index < selectedWorkflowIndex) {
			var beforeRunIndex = index;
			viewModel.selectedWorkflow.workflowConfig.before_run.splice(beforeRunIndex, 1);
		}
		else {
			var afterRunIndex = index - selectedWorkflowIndex - 1;
			viewModel.selectedWorkflow.workflowConfig.after_run.splice(afterRunIndex, 1);
		}

		updateSelectedWorkflowChain();
	};

	viewModel.availableRunWorkflows = function() {
		return _.filter(viewModel.workflows, function(aWorkflow) {
			return aWorkflow.isLoopSafeRunForWorkflow(viewModel.selectedWorkflow, viewModel.workflows);
		});
	};

	viewModel.deleteWorkflowSelected = function() {
		_.each(viewModel.workflows, function(aWorkflow) {
			_.each([aWorkflow.before_run, aWorkflow.after_run], function(aRunWorkflows) {
				if (aRunWorkflows) {
					var runWorkflowIndex = _.indexOf(aRunWorkflows, viewModel.selectedWorkflow.id);
					aRunWorkflows.splice(runWorkflowIndex, 1);
				}
			});
		});

		var triggerConfigsToRemove = _.filter(viewModel.appConfig.trigger_map, {
			workflow: viewModel.selectedWorkflow.id
		});
		_.each(triggerConfigsToRemove, function(aTriggerConfigToRemove) {
			var index = _.indexOf(viewModel.appConfig.trigger_map, aTriggerConfigToRemove);

			viewModel.appConfig.trigger_map.splice(index, 1);
		});

		delete viewModel.appConfig.workflows[viewModel.selectedWorkflow.id];

		configureWorkflowsFromAppConfig(viewModel.appConfig);
	};

	$rootScope.$emit("MainController::menuContentIsLoadedAndReady");

});

})();
