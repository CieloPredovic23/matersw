import * as monaco from "monaco-editor/esm/vs/editor/editor.api.js";
import {configureMonacoYaml} from 'monaco-yaml';

(function () {
  "use strict";

  angular
    .module("BitriseWorkflowEditor")
    .controller("YMLController", function ($scope, $timeout, appService, requestService) {
      var viewModel = this;
      var editor;
      var model;

      const defaultSchema = {
        uri: 'https://json.schemastore.org/bitrise.json',
        fileMatch: ['monaco-yaml.yaml'],
      };

      configureMonacoYaml(monaco, {
        validate: true,
        enableSchemaRequest: true,
        format: true,
        hover: true,
        completion: true,
        schemas: [defaultSchema],
      });

      viewModel.usesRepositoryYml = false;
      viewModel.appSlug = undefined;
      viewModel.repositoryYmlAvailable = true;
      viewModel.appConfigYML = undefined;
      viewModel.defaultBranch = appService.appDetails?.defaultBranch;
      viewModel.gitRepoSlug = appService.appDetails?.gitRepoSlug;
      viewModel.lines = 0;
      viewModel.split = false;
      viewModel.modularYamlSupported = undefined;
      viewModel.lastModified = null;
      viewModel.isWebsiteMode = requestService.isWebsiteMode();

      viewModel.downloadAppConfigYMLPath = function () {
        return requestService.isWebsiteMode() && !viewModel.usesRepositoryYml ? requestService.appConfigYMLDownloadPath() : null;
      }

      $scope.$watch(
        function () {
          return appService.appConfigYML;
        },
        function () {
					if (appService.appConfigYML !== model.getValue() && model && !model.isDisposed()) {
            model.setValue(appService.appConfigYML || '')
          }
        }
      );

      $scope.$watch(
        function () {
          return viewModel.usesRepositoryYml;
        },
        function (newVal, oldVal) {
          if (newVal !== oldVal) {
            editor.updateOptions({readOnly: !!newVal});
          }
        }
      );

      function init() {
        if (requestService.isWebsiteMode()) {
          viewModel.appSlug = requestService.appSlug;

          const fetchPipelineConfig = appService.getPipelineConfig()
            .then(function () {
              viewModel.usesRepositoryYml = appService.pipelineConfig.usesRepositoryYml;
              viewModel.lines = appService.pipelineConfig.lines;
              viewModel.split = appService.pipelineConfig.split;
              viewModel.modularYamlSupported = appService.pipelineConfig.modularYamlSupported;
              viewModel.lastModified = appService.pipelineConfig.lastModified;
            });

          const fetchOrgPlanData = appService.appDetails && appService.appDetails.ownerData
            ? requestService.getOrgPlanData(appService.appDetails.ownerData.slug)
              .then(function (ownerPlanData) {
                viewModel.repositoryYmlAvailable = ownerPlanData.repositoryYmlAvailable;
              })
            : Promise.resolve();
        }
      }

      init();

      function configureEditor() {
        model = monaco.editor.createModel(appService.appConfigYML, 'yaml', monaco.Uri.parse('monaco-yaml.yaml'));

        let codeContainer = document.getElementById("code-container");
        editor = monaco.editor.create(codeContainer, {
          model: model,
          language: "yaml",
          lineNumbers: "on",
          roundedSelection: false,
          scrollBeyondLastLine: false,
          readOnly: false,
          theme: "vs-dark"
        });
        editor.layout();
        editor.focus();
        editor.onDidChangeModelContent(updateAppConfigYML);
      }

      function updateAppConfigYML() {
        $timeout(function () {
          if (model && !model.isDisposed()) {
            appService.appConfigYML = model.getValue();
            viewModel.appConfigYML = model.getValue();
          }
        }, 100);
      }

      viewModel.onUsesRepositoryYmlChangeSaved = function (usesRepositoryYml) {
        appService.getAppConfigYML(true);

        appService.appConfig = undefined;
        appService.pipelineConfig.usesRepositoryYml = usesRepositoryYml;

        $timeout(function () {
          viewModel.usesRepositoryYml = usesRepositoryYml;
        }, 0);
      };

      configureEditor();

      $scope.$on("$destroy", function () {
        if (editor) {
          editor.dispose();
        }
        if (model) {
          model.dispose();
        }
      });
    });
})();
