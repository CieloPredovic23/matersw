import * as monaco from "monaco-editor/esm/vs/editor/editor.api.js";

(function() {
	"use strict";

	angular
		.module("BitriseWorkflowEditor")
		.controller("YMLController", function($scope, $timeout, appService, requestService) {
			var viewModel = this;
			var editor;

			viewModel.shouldShowYmlStorageSettings = false;
			viewModel.usesRepositoryYml = false;
			viewModel.appSlug = undefined;

			viewModel.downloadAppConfigYMLPath = function() {
				return requestService.mode == "website" && !viewModel.usesRepositoryYml ? requestService.appConfigYMLDownloadPath() : null;
			}

			$scope.$watch(
				function() {
					return appService.appConfigYML;
				},
				function() {
					if (appService.appConfigYML !== editor.getValue()) {
						editor.setValue(appService.appConfigYML);
					}
				}
			);

			$scope.$watch(
				function() {
					return viewModel.usesRepositoryYml;
				},
				function(usesRepositoryYml) {
					editor.updateOptions({ readOnly: !!usesRepositoryYml });
				}
			);

			function init() {
				if (requestService.isWebsiteMode()) {
					appService.getPipelineConfig()
						.then(function() {
							viewModel.usesRepositoryYml = appService.pipelineConfig.usesRepositoryYml;
							viewModel.shouldShowYmlStorageSettings = requestService.isWebsiteMode();
							viewModel.appSlug = appService.appDetails.slug;
						})
				}
			}

			init();

			function configureEditor() {
				editor = monaco.editor.create(document.getElementById("code-container"), {
					value: appService.appConfigYML,
					language: "yaml",
					lineNumbers: "on",
					roundedSelection: false,
					scrollBeyondLastLine: false,
					readOnly: false,
					theme: "vs-dark"
				});
				editor.layout();
				editor.focus();
				editor.onDidChangeModelContent(updateAppConfigYML);
			}

			function updateAppConfigYML() {
				$timeout(function() {
					appService.appConfigYML = editor.getValue();
				}, 100);
			}

			viewModel.onUsesRepositoryYmlChangeSaved = function(usesRepositoryYml) {
				appService.getAppConfigYML(true);

				appService.appConfig = undefined;
				appService.pipelineConfig.usesRepositoryYml = usesRepositoryYml;

				$timeout(function() {
					viewModel.usesRepositoryYml = usesRepositoryYml;
				}, 0);
			};

			configureEditor();

			$scope.$on("$destroy", function() {
				if (editor) {
					editor.dispose();
				}
			});
		});
})();
