import * as monaco from "monaco-editor/esm/vs/editor/editor.api.js";
import { configureMonacoYaml } from 'monaco-yaml';

(function() {
	"use strict";

	angular
		.module("BitriseWorkflowEditor")
		.controller("YMLController", function($scope, $timeout, appService, requestService) {
			var viewModel = this;
			var editor;
			var model;

			const defaultSchema = {
				uri: 'https://raw.githubusercontent.com/bitrise-io/bitrise-json-schemas/main/bitrise.schema.json',
				fileMatch: ['monaco-yaml.yaml'],
			};

			configureMonacoYaml(monaco, {
  			validate: true,
				enableSchemaRequest: true,
				format: true,
				hover: true,
				completion: true,
				schemas: [defaultSchema],
			});

			viewModel.shouldShowYmlStorageSettings = false;
			viewModel.usesRepositoryYml = false;
			viewModel.appSlug = undefined;
			viewModel.repositoryYmlAvailable = true;

			viewModel.downloadAppConfigYMLPath = function() {
				return requestService.mode == "website" && !viewModel.usesRepositoryYml ? requestService.appConfigYMLDownloadPath() : null;
			}

			$scope.$watch(
				function() {
					return appService.appConfigYML;
				},
				function() {
					if (model && !model.isDisposed()) {
						if (appService.appConfigYML !== model.getValue()) {
							model.setValue(appService.appConfigYML || '')
						}
					}
				}
			);

			$scope.$watch(
				function() {
					return viewModel.usesRepositoryYml;
				},
				function(usesRepositoryYml) {
					editor.updateOptions({ readOnly: !!usesRepositoryYml });
				}
			);

			function init() {
				if (requestService.isWebsiteMode()) {
					appService.getPipelineConfig()
						.then(function() {
							viewModel.usesRepositoryYml = appService.pipelineConfig.usesRepositoryYml;
							viewModel.shouldShowYmlStorageSettings = requestService.isWebsiteMode();
							viewModel.appSlug = appService.appDetails.slug;
						})
					requestService.getOrgPlanData(appService.appDetails.ownerData.slug)
					.then(function(ownerPlanData) {
						viewModel.repositoryYmlAvailable = ownerPlanData.repositoryYmlAvailable;
					})
				}
			}

			init();

			function configureEditor() {
				model = monaco.editor.createModel(appService.appConfigYML, 'yaml', monaco.Uri.parse('monaco-yaml.yaml'));
				
				const container = document.getElementById("code-container")

				editor = monaco.editor.create(container, {
					model,
					readOnly: false,
					theme: "vs-dark",
					language: "yaml",
					lineNumbers: "on",
					automaticLayout: true,
					overviewRulerLanes: 0,
					roundedSelection: false,
					minimap: { enabled: false },
					scrollBeyondLastLine: false,
					scrollbar: { alwaysConsumeMouseWheel: false },
				});

				editor.layout();
				editor.focus();
				editor.onDidChangeModelContent(updateAppConfigYML);
				
				editor.onDidContentSizeChange((e) => {
					container.style.height = `${e.contentHeight}px`;
					editor.layout({ width: container.clientWidth, height: e.contentHeight });
				});
			}

			function updateAppConfigYML() {
				$timeout(function() {
					if (model && !model.isDisposed()) {
						appService.appConfigYML = model.getValue();
					}
				}, 100);
			}

			viewModel.onUsesRepositoryYmlChangeSaved = function(usesRepositoryYml) {
				appService.getAppConfigYML(true);

				appService.appConfig = undefined;
				appService.pipelineConfig.usesRepositoryYml = usesRepositoryYml;

				$timeout(function() {
					viewModel.usesRepositoryYml = usesRepositoryYml;
				}, 0);
			};

			configureEditor();

			$scope.$on("$destroy", function() {
				if (editor) {
					editor.dispose();
				}
				if (model) {
					model.dispose();
				}
			});
		});
})();
