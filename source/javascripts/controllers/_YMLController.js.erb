import "monaco-editor/esm/vs/editor/editor.api.js";
import { safeDigest } from "../services/react-compat";

(function() {
	"use strict";

	angular
		.module("BitriseWorkflowEditor")
		.controller("YMLController", function($scope, $rootScope, $timeout, appService, requestService) {
			var viewModel = this;

			viewModel.appService = appService;

			viewModel.shouldShowYmlStorageSettings = false;
			viewModel.usesRepositoryYml = false;
			viewModel.appSlug = undefined;
			viewModel.repositoryYmlAvailable = true;

			viewModel.downloadAppConfigYMLPath = function() {
				return requestService.mode == "website" && !viewModel.usesRepositoryYml ? requestService.appConfigYMLDownloadPath() : null;
			}

			function init() {
				if (requestService.isWebsiteMode()) {
					viewModel.appSlug = requestService.appSlug;

					appService.getPipelineConfig()
						.then(function() {
							viewModel.usesRepositoryYml = appService.pipelineConfig.usesRepositoryYml;
							viewModel.shouldShowYmlStorageSettings = requestService.isWebsiteMode();
						})
					if (appService.appDetails && appService.appDetails.ownerData) {
						requestService.getOrgPlanData(appService.appDetails.ownerData.slug)
						.then(function(ownerPlanData) {
							viewModel.repositoryYmlAvailable = ownerPlanData.repositoryYmlAvailable;
						});
					} else {
						viewModel.repositoryYmlAvailable = undefined;
					}
				}
			}

			init();

			viewModel.yml;
			
			viewModel.onChangeHandler = (value) => {
				appService.appConfigYML = value;
				safeDigest($rootScope);
			};

			var unwatchYMLChange = $scope.$watch(() => {
				return appService.appConfigYML;
			}, (value) => {
				if (value !== undefined) {
					viewModel.yml = value;
					unwatchYMLChange();
				};
			});

			viewModel.onUsesRepositoryYmlChangeSaved = function(usesRepositoryYml) {
				appService.getAppConfigYML(true);

				appService.appConfig = undefined;
				appService.pipelineConfig.usesRepositoryYml = usesRepositoryYml;

				$timeout(function() {
					viewModel.usesRepositoryYml = usesRepositoryYml;
				}, 0);
			};
		});
})();
