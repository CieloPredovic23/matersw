(function() {
  "use strict";

  angular.module("BitriseWorkflowEditor").directive("checkbox", function() {
    var inheritedAttributes = [
      "ng-model",
      "ng-model-options",
      "ng-change",
      "ng-checked",
      "ng-disabled"
    ];

    return {
      restrict: "E",
      replace: true,
      transclude: false,
      priority: 1000000,
      template: function(tElement, tAttrs) {
        var parentElement = angular.element("<div></div>");
        $(parentElement).addClass("checkbox");

        var inputCheckboxElement = angular.element(
          "<input type='checkbox'></input>"
        );
        _.each(inheritedAttributes, function(anAttribute) {
          inputCheckboxElement.attr(anAttribute, tElement.attr(anAttribute));
        });
        inputCheckboxElement.attr(
          "id",
          "{{" + tAttrs.checkboxIdExpression + "}}"
        );

        $(parentElement).append(inputCheckboxElement);

        var checkboxSVGWrapperElement = angular.element("<div></div>");
        $(checkboxSVGWrapperElement).addClass("checkbox-svg-wrapper");
        $(parentElement).append(checkboxSVGWrapperElement);

        var checkElement = angular.element(
          '<%= svg("check").split("\n").join("").split("\r").join("").split("\t").join("") %>'
        );
        $(checkElement).attr("check", "");
        $(checkboxSVGWrapperElement).append(checkElement);

        var crossElement = angular.element(
          '<%= svg("cross").split("\n").join("").split("\r").join("").split("\t").join("") %>'
        );
        $(crossElement).attr("cross", "");
        $(checkboxSVGWrapperElement).append(crossElement);

        return parentElement.prop("outerHTML");
      },
      link: function(scope, element) {
        _.each(inheritedAttributes, function(anAttribute) {
          $(element).removeAttr(anAttribute);
        });
      }
    };
  });
})();
