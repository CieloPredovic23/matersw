(function() {

"use strict";

angular.module("BitriseWorkflowEditor").factory("GenericFile", function($q, $injector, requestService) {

	var GenericFile = function(envVarPartialID) {
		this.databaseID;
		this.file;
		this.envVarPartialID = envVarPartialID;
		this.isProcessed;
		this.expiringDownloadURL;
	};

	GenericFile.prototype.displayName = function() {
		if (this.expiringDownloadURL) {
			var nameRegexp = new RegExp("[^?]*\/([^?]+).*");
			var decodedExpiringDownloadURL = decodeURIComponent(this.expiringDownloadURL);

			if (nameRegexp.test(decodedExpiringDownloadURL) && nameRegexp.exec(decodedExpiringDownloadURL)[1]) {
				return nameRegexp.exec(decodedExpiringDownloadURL)[1];
			}
		}
		else if (this.file) {
			return this.file.name;
		}

		return "<%= data[:strings][:code_signing][:generic_file][:no_name_for_file] %>";
	};

	GenericFile.prototype.updateFile = function(file) {
		this.file = file;
	};

	GenericFile.prototype.fileSize = function() {
		if (!this.file) {
			return undefined;
		}

		if (this.file.size !== undefined) {
			return this.file.size;
		}

		if (this.file.fileSize !== undefined) {
			return this.file.fileSize;
		}
	};

	GenericFile.prototype.validationError = function() {
		if (this.envVarPartialID.length == 0) {
			return new Error("<%= data[:strings][:code_signing][:generic_file][:id_not_specified] %>");
		}

		var validCharactersRegexp = new RegExp("^([a-zA-Z0-9_]+)$");
		if (!validCharactersRegexp.test(this.envVarPartialID)) {
			return new Error("<%= data[:strings][:code_signing][:generic_file][:invalid_id_characters] %>");
		}

		var KeystoreFile = $injector.get("KeystoreFile");
		if (this.envVarPartialID == KeystoreFile.downloadURLEnvVarPartialID) {
			return new Error("<%= data[:strings][:code_signing][:generic_file][:id_reserved_for_keystore] %>")
		}

		return null;
	};

	GenericFile.prototype.downloadURLEnvVarKey = function() {
		if (this.envVarPartialID.length == 0) {
			return null;
		}

		return "BITRISEIO_" + this.envVarPartialID + "_URL";
	};

	GenericFile.prototype.upload = function(requestConfig) {
		if (this.validationError()) {
			return $q.reject(this.validationError());
		}
		
		var self = this;

		return $q(function(resolve, reject) {
			requestService.postGenericFileCreate(self.envVarPartialID, self.file.name, self.fileSize(), requestConfig).then(function(data) {
				var genericFileDatabaseID = data.databaseID;
				var uploadURL = data.uploadURL;

				requestService.uploadFileToStorage(uploadURL, self.file).then(function() {
					requestService.finalizeGenericFileUpload(genericFileDatabaseID, true, requestConfig).then(resolve, function(error) {
						reject(error);
					});
				}, function(error) {
					requestService.finalizeGenericFileUpload(genericFileDatabaseID, false, requestConfig).then(function() {
						reject(error);
					}, function(finalizeGenericFileUploadError) {
						reject(error);
					});
				});
			}, function(error) {
				reject(error);
			});
		})
	};

	GenericFile.prototype.download = function() {
		return requestService.downloadGenericFile(this.databaseID);
	}

	GenericFile.prototype.delete = function(requestConfig) {
		return requestService.deleteGenericFile(this.databaseID, requestConfig);
	};

	return GenericFile;

});

})();
