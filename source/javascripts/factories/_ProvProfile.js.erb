(function() {

"use strict";

angular.module("BitriseWorkflowEditor").factory("ProvProfile", function($q, requestService) {

	var ProvProfile = function() {
		this.databaseID;
		this.file;
		this.isProcessed;
		this.uploadFileName;
		this.isExpose;
		this.isDetailsLoaded = false;
		this.uuid;
		this.expirationDate;
		this.exportType;
		this.teamName;
		this.teamID;
		this.bundleID;
	};

	ProvProfile.prototype.displayName = function() {
		if (this.uploadFileName) {
			var nameRegexp = new RegExp("^(.+)\.(?:mobileprovision|provisionprofile)$");

			if (nameRegexp.test(this.uploadFileName) && nameRegexp.exec(this.uploadFileName)[1]) {
				return nameRegexp.exec(this.uploadFileName)[1];
			}
		}

		if (this.file) {
			return this.file.name;
		}

		return "<%= data[:strings][:code_signing][:prov_profile][:no_name_for_file] %>";
	};

	ProvProfile.prototype.fileSize = function() {
		if (!this.file) {
			return undefined;
		}

		if (this.file.size !== undefined) {
			return this.file.size;
		}

		if (this.file.fileSize !== undefined) {
			return this.file.fileSize;
		}
	};

	ProvProfile.prototype.validationError = function() {
		if (!_.contains(["mobileprovision", "provisionprofile"], _.last(this.file.name.split(".")))) {
			return new TypeError("<%= data[:strings][:code_signing][:prov_profile][:invalid_file_type] %>");
		}
	};

	ProvProfile.prototype.upload = function(requestConfig) {
		if (this.validationError()) {
			return $q.reject(this.validationError());
		}

		var self = this;

		return $q(function(resolve, reject) {
			requestService.postProvProfileCreate(self.file.name, self.fileSize(), requestConfig).then(function(data) {
				var provProfileDatabaseID = data.databaseID;
				var uploadURL = data.uploadURL;

				requestService.uploadFileToStorage(uploadURL, self.file).then(function() {
					requestService.finalizeProvProfileUpload(provProfileDatabaseID, true, requestConfig).then(resolve, function(error) {
						reject(error);
					});
				}, function(error) {
					requestService.finalizeProvProfileUpload(provProfileDatabaseID, false, requestConfig).then(function() {
						reject(error);
					}, function(finalizeProvProfileUploadError) {
						reject(error);
					});
				});
			}, function(error) {
				reject(error);
			});
		})
	};

	ProvProfile.prototype.getDetails = function(requestConfig) {
		requestService.getDetailsOfProvProfile(this.databaseID).then(function() {
			resolve();
		}, function(error) {
			reject(error);
		});
	};

	ProvProfile.prototype.download = function() {
		return requestService.downloadProvProfile(this.databaseID);
	};

	ProvProfile.prototype.delete = function(requestConfig) {
		return requestService.deleteProvProfile(this.databaseID, requestConfig);
	};

	return ProvProfile;

});


})();
