(function() {

"use strict";

angular.module("BitriseWorkflowEditor").service("appService", function(requestService, Step, Variable) {

	var appService = {
		appConfig: undefined,
		savedAppConfig: undefined,
		secrets: undefined,
		savedSecrets: undefined,
		appConfigYML: undefined,
		savedAppConfigYML: undefined
	};

	appService.getAppConfig = function(requestConfig) {
		return requestService.getAppConfig(requestConfig).then(function(appConfig) {
			appService.appConfig = appConfig;
			appService.minimizeAppConfig();

			appService.savedAppConfig = angular.copy(appService.appConfig);
		});
	};

	appService.minimizeAppConfig = function() {
		var variableConfigs = [];

		if (this.appConfig.app && this.appConfig.app.envs) {
			variableConfigs = _.union(variableConfigs, this.appConfig.app.envs);
		}

		if (this.appConfig.workflows) {
			_.each(this.appConfig.workflows, function(aWorkflowConfig) {
				variableConfigs = _.union(variableConfigs, aWorkflowConfig.envs);

				_.each(aWorkflowConfig.steps, function(aWrappedUserStepConfig) {
					var stepCVS = Step.cvsFromWrappedStepConfig(aWrappedUserStepConfig);
					var stepConfig = aWrappedUserStepConfig[stepCVS];

					if (stepConfig.source && _.isEmpty(stepConfig.source)) {
						delete stepConfig["source"];
					}

					if (stepConfig.deps && _.isEmpty(stepConfig.deps)) {
						delete stepConfig["deps"];
					}

					variableConfigs = _.union(variableConfigs, stepConfig.inputs);
				});
			});
		}

		_.each(variableConfigs, Variable.minimizeVariableConfig);
	};

	appService.appConfigHasDeprecatedTriggerMap = function() {
		return _.any(this.appConfig.trigger_map, function(aTriggerConfig) {
			return aTriggerConfig.pattern !== undefined;
		});
	};

	appService.updateDeprecatedTriggerMap = function() {
		var updatedTriggerMap = [];
		_.each(this.appConfig.trigger_map, function(aTriggerConfig) {
			if (aTriggerConfig.pattern === undefined) {
				updatedTriggerMap.push(aTriggerConfig);

				return;
			}

			var pushTriggerConfig = {
				workflow: aTriggerConfig.workflow,
				push_branch: aTriggerConfig.pattern
			};
			updatedTriggerMap.push(pushTriggerConfig);

			if (aTriggerConfig.is_pull_request_allowed) {
				var pullRequestTriggerConfig = {
					workflow: aTriggerConfig.workflow,
					pull_request_source_branch: aTriggerConfig.pattern,
					pull_request_target_branch: "*"
				};
				updatedTriggerMap.push(pullRequestTriggerConfig);
			}
		});

		this.appConfig.trigger_map = updatedTriggerMap;
	};

	appService.saveAppConfig = function(requestConfig) {
		return requestService.postAppConfig(this.appConfig, requestConfig).then(function() {
			appService.savedAppConfig = angular.copy(appService.appConfig);
			appService.appConfigYML = undefined;
			appService.savedAppConfigYML = undefined;
		});
	};

	appService.discardAppConfigChanges = function() {
		this.appConfig = angular.copy(this.savedAppConfig);
	};

	appService.getSecrets = function(requestConfig) {
		return requestService.getSecrets(requestConfig).then(function(secretConfigs) {
			appService.secrets = _.map(secretConfigs, function(aSecretConfig) {
				return new Variable(aSecretConfig, Variable.defaultVariableConfig());
			});

			appService.savedSecrets = angular.copy(appService.secrets);
		});
	};

	appService.saveSecrets = function() {
		return requestService.postSecrets(appService.secrets).then(function() {
			appService.savedSecrets = angular.copy(appService.secrets);
		});
	};

	appService.discardSecretsChanges = function() {
		appService.secrets = angular.copy(appService.savedSecrets);
	};

	appService.getAppConfigYML = function(requestConfig) {
		return requestService.getAppConfigYML(requestConfig).then(function(appConfigYML) {
			appService.appConfigYML = appConfigYML;
			appService.savedAppConfigYML = appConfigYML;
		});
	};

	appService.saveAppConfigYML = function() {
		return requestService.postAppConfigYML(appService.appConfigYML).then(function(appConfigYML) {
			appService.appConfig = undefined;
			appService.savedAppConfig = undefined;
			appService.savedAppConfigYML = appService.appConfigYML;
		});
	};

	appService.discardAppConfigYMLChanges = function() {
		appService.appConfigYML = angular.copy(appService.savedAppConfigYML);
	};

	return appService;

});

})();
