import jsyaml from "js-yaml";

(function() {
	"use strict";

	angular
		.module("BitriseWorkflowEditor")
		.service("requestService", function($q, $injector, $http, RequestService, stringService, dateService, logger) {
			var requestService = {
				mode: RequestService.mode,
				appSlug: RequestService.appSlug,
			};

			requestService.isWebsiteMode = function() {
				return RequestService.isWebsiteMode();
			}

			function errorFromResponse(response, defaultErrorMessage, errorMessagePrefix) {
				var status = response && response.status;

				if (status == -1 || status == 408) {
					return new Error(response.config.method.toUpperCase() + " " + response.config.url + " - Request aborted");
				}

				var messageTags = {
					status: status
				};

				var error = new Error(defaultErrorMessage);

				if (response && response.data) {
					if (response.data.error_msg) {
						error.message = response.data.error_msg;
					} else if (response.data.message) {
						error.message = response.data.message;
					} else if (response.data.errors) {
						var errors;

						if (angular.isArray(response.data.errors)) {
							if (angular.isString(response.data.errors[0])) {
								errors = _.map(response.data.errors, function(anErrorMessage) {
									return new Error(anErrorMessage);
								});
							} else {
								errors = _.map(response.data.errors, function(anErrorMap) {
									var error = new Error(anErrorMap.message);
									error.name = anErrorMap.type;

									return error;
								});
							}
						} else if (angular.isObject(response.data.errors)) {
							errors = _.map(_.flatten(_.values(response.data.errors)), function(anErrorMessage) {
								return new Error(anErrorMessage);
							});
						}

						error.name = _.pluck(errors, "name").join();
						error.message = stringService.errorMessageFromErrors(errors);
					}
				}

				if (errorMessagePrefix && error.message != defaultErrorMessage) {
					error.message = errorMessagePrefix += error.message;
				}

				if (status < 500) {
					logger.warn(error.message, messageTags);
				} else {
					logger.error(error, messageTags);
				}

				return error;
			}

			// Connection

			requestService.cancelAPIConnectionClose = function(requestConfig) {
				return $http.post(
					"<%= local_server_path(data[:routes][:local_server][:cancel_api_connection_close]) %>",
					undefined,
					requestConfig
				);
			};

			requestService.closeAPIConnection = function() {
				return $.ajax({
					type: "DELETE",
					url: "<%= local_server_path(data[:routes][:local_server][:close_api_connection]) %>",
					async: false
				});
			};

			// Current User

			requestService.getCurrentUserData = function(requestConfig) {
				var requestURL;

				switch (requestService.mode) {
					case "website":
						requestURL = "<%= webserver_path(data[:routes][:website][:current_user_get]) %>";

						break;
					case "cli":
						return $q.reject(
							new Error("<%= data[:strings][:request_service][:get_current_user_data][:not_website_mode_error] %>")
						);
				}

				return $q(function(resolve, reject) {
					$http.get(requestURL, requestConfig).then(
						function(response) {
							resolve({
								username: response.data.username,
								slug: response.data.slug,
								email: response.data.email,
								unconfirmedEmail: response.data.unconfirmed_email,
								avatarURL: response.data.avatar_url,
								showNewCodeSigningWizard: response.data.show_new_code_signing_wizard,
								dataId: response.data.data_id
							});
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:get_current_user_data][:default_error] %>",
									"<%= data[:strings][:request_service][:get_current_user_data][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			requestService.getCurrentUserBetaTags = function(requestConfig) {
				var requestURL;

				switch (requestService.mode) {
					case "website":
						requestURL = "<%= webserver_path(data[:routes][:website][:current_user_beta_tags_get]) %>";

						break;
					case "cli":
						return $q.reject(
							new Error("<%= data[:strings][:request_service][:get_current_user_beta_tags][:not_website_mode_error] %>")
						);
				}

				return $q(function(resolve, reject) {
					$http.get(requestURL, requestConfig).then(
						function(response) {
							resolve(response.data.beta_tags);
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:get_current_user_beta_tags][:default_error] %>",
									"<%= data[:strings][:request_service][:get_current_user_beta_tags][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			// Codesigndoc Bash Command

			requestService.getCodeSigningBashCommand = function(requestConfig) {
				var requestURL;

				switch (requestService.mode) {
					case "website":
						requestURL = stringService.stringReplacedWithParameters(
							"<%= webserver_path(data[:routes][:website][:app_codesigndoc_script_get]) %>",
							{
								app_slug: requestService.appSlug
							}
						);

						break;
					case "cli":
						return $q.reject(
							new Error(
								"<%= data[:strings][:request_service][:get_codesigndoc_bash_script][:not_website_mode_error] %>"
							)
						);
				}

				return $q(function(resolve, reject) {
					$http.get(requestURL, requestConfig).then(
						function(response) {
							resolve({
								bashScriptCommand: response.data.script_command
							});
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:get_codesigndoc_bash_script][:default_error] %>",
									"<%= data[:strings][:request_service][:get_codesigndoc_bash_script][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			// App details

			requestService.getAppDetails = function(requestConfig) {
				switch (requestService.mode) {
					case "website":
						var requestURL = stringService.stringReplacedWithParameters(
							"<%= webserver_path(data[:routes][:website][:app_data_get]) %>",
							{
								app_slug: requestService.appSlug
							}
						);

						return $q(function(resolve, reject) {
							$http.get(requestURL, requestConfig).then(
								function(response) {
									resolve({
										avatarURL: response.data.avatar_icon_url,
										slug: response.data.slug,
										title: response.data.title,
										projectTypeID: response.data.project_type,
										providerID: response.data.provider,
										repositoryURL: response.data.url,
										stack: response.data.stack_identifier,
										isPublic: response.data.is_public,
										isCurrentUserOwner: response.data.owner_is_current_user,
										isMachineTypeSelectorAvailable: response.data.is_machine_type_selector_available,
										ownerData: {
											slug: response.data.owner_slug,
											type: response.data.owner_type,
											name: response.data.owner_type == "User" ? response.data.owner_username : response.data.owner_name
										}
									});
								},
								function(response) {
									reject(
										errorFromResponse(
											response,
											"<%= data[:strings][:request_service][:get_app_data][:default_error] %>",
											"<%= data[:strings][:request_service][:get_app_data][:error_prefix] %>"
										)
									);
								}
							);
						});
					case "cli": {
						return $q.reject(
							new Error(
								"<%= data[:strings][:request_service][:update_app_with_apple_credential][:not_website_mode_error] %>"
							)
						);
					}
				}
			};

			requestService.updateAppleCredentialUser = function(userSlug, requestConfig) {
				var requestURL;
				var requestData;

				switch (requestService.mode) {
					case "website":
						requestURL = stringService.stringReplacedWithParameters(
							"<%= webserver_path(data[:routes][:website][:app_update]) %>",
							{
								app_slug: requestService.appSlug
							}
						);

						requestData = {
							apple_credential_user_slug: userSlug
						};

						break;
					case "cli":
						return $q.reject(
							new Error(
								"<%= data[:strings][:request_service][:update_app_with_apple_credential][:not_website_mode_error] %>"
							)
						);
				}

				return $q(function(resolve, reject) {
					$http.put(requestURL, requestData, requestConfig).then(
						function() {
							resolve();
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:update_app_with_apple_credential][:default_error] %>",
									"<%= data[:strings][:request_service][:update_app_with_apple_credential][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			// App config

			requestService.postAppConfig = function(appConfig, requestConfig, tabOpenDuringSave) {
				var requestURL;
				var requestData;

				switch (requestService.mode) {
					case "website":
						requestURL = stringService.stringReplacedWithParameters(
							"<%= webserver_path(data[:routes][:website][:app_config_post]) %>",
							{
								app_slug: requestService.appSlug
							}
						);
						requestData = {
							app_config_datastore_yaml: appConfig,
							tab_open_during_save: tabOpenDuringSave
						};

						break;
					case "cli":
						requestURL = "<%= local_server_path(data[:routes][:local_server][:app_config_post]) %>";
						requestData = {
							bitrise_yml: appConfig
						};

						break;
				}

				return $q(function(resolve, reject) {
					$http.post(requestURL, requestData, requestConfig).then(
						function(response) {
							resolve(response.data);
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:save_app_config][:default_error] %>",
									"<%= data[:strings][:request_service][:save_app_config][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			requestService.getAppConfig = function(requestConfig) {
				var requestURL;

				switch (requestService.mode) {
					case "website":
						requestURL = stringService.stringReplacedWithParameters(
							"<%= webserver_path(data[:routes][:website][:app_config_get]) %>",
							{
								app_slug: requestService.appSlug
							}
						);

						break;
					case "cli":
						requestURL = "<%= local_server_path(data[:routes][:local_server][:app_config_get]) %>";

						break;
				}

				return $q(function(resolve, reject) {
					$http.get(requestURL, requestConfig).then(
						function(response) {
							resolve(response.data);
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:load_app_config][:default_error] %>",
									"<%= data[:strings][:request_service][:load_app_config][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			// App config YML

			requestService.postAppConfigYML = function(appConfigYML, requestConfig) {
				var requestURL;
				var requestData;

				switch (requestService.mode) {
					case "website":
						requestURL = stringService.stringReplacedWithParameters(
							"<%= webserver_path(data[:routes][:website][:yml_post]) %>",
							{
								app_slug: requestService.appSlug,
							}
						);
						requestData = {
							app_config_datastore_yaml: appConfigYML,
							tab_open_during_save: 'yml'
						};

						break;
					case "cli":
						requestURL = "<%= local_server_path(data[:routes][:local_server][:yml_post]) %>";
						requestData = {
							bitrise_yml: appConfigYML
						};

						break;
				}

				return $q(function(resolve, reject) {
					$http.post(requestURL, requestData, requestConfig).then(
						function(response) {
							resolve(response.data);
						},
						function(response) {
							var error = new Error("<%= data[:strings][:request_service][:save_app_config][:default_error] %>");
							if (response && response.data && response.data.error) {
								error.message = response.data.error;
							}
							reject(
								errorFromResponse(
									response,
									error.message,
									"<%= data[:strings][:request_service][:save_app_config][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			requestService.getAppConfigYML = function(requestConfig) {
				return $q(function(resolve, reject) {
					RequestService.getAppConfigYML(requestConfig && requestConfig.timeout).then(resolve, reject);
				});
			};

			requestService.appConfigYMLDownloadPath = function() {
				return stringService.stringReplacedWithParameters(
					"<%= webserver_path(data[:routes][:website][:yml_download]) %>",
					{
						app_slug: requestService.appSlug
					}
				);
			};

			// Secrets

			requestService.postSecrets = function(secrets, requestConfig) {
				var requestURL;
				var requestData;

				switch (requestService.mode) {
					case "website":
						requestURL = stringService.stringReplacedWithParameters(
							"<%= webserver_path(data[:routes][:website][:secrets_post]) %>",
							{
								app_slug: requestService.appSlug
							}
						);
						requestData = {
							app_secrets: {
								envs: _.map(secrets, function(aSecret) {
									return aSecret.userVariableConfig;
								})
							}
						};

						break;
					case "cli":
						requestURL = "<%= local_server_path(data[:routes][:local_server][:secrets_post]) %>";
						requestData = {
							envs: _.map(secrets, function(aSecret) {
								return aSecret.userVariableConfig;
							})
						};

						break;
				}

				return $q(function(resolve, reject) {
					$http.post(requestURL, requestData, requestConfig).then(
						function(response) {
							resolve(response.data);
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:save_secrets][:default_error] %>",
									"<%= data[:strings][:request_service][:save_secrets][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			requestService.getPipelineConfig = function(requestConfig) {
				var requestURL;

				switch (requestService.mode) {
					case "website":
						requestURL = stringService.stringReplacedWithParameters(
							"<%= webserver_path(data[:routes][:website][:pipeline_config_get]) %>",
							{
								app_slug: requestService.appSlug
							}
						);

						break;
					case "cli":
						return $q.reject(
							new Error(
								"<%= data[:strings][:request_service][:get_pipeline_config][:not_website_mode_error] %>"
							)
						);
				}

				return $q(function(resolve, reject) {
					$http.get(requestURL, requestConfig).then(
						function(response) {
							resolve({
								usesRepositoryYml: response.data.uses_repository_yml
							});
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:get_pipeline_config][:default_error] %>",
									"<%= data[:strings][:request_service][:get_pipeline_config][:error_prefix] %>"
								)
							);
						}
					);
				});
			}

			requestService.getSecrets = function(requestConfig) {
				var requestURL;

				switch (requestService.mode) {
					case "website":
						requestURL = stringService.stringReplacedWithParameters(
							"<%= webserver_path(data[:routes][:website][:secrets_get]) %>",
							{
								app_slug: requestService.appSlug
							}
						);

						break;
					case "cli":
						requestURL = "<%= local_server_path(data[:routes][:local_server][:secrets_get]) %>";

						break;
				}

				return $q(function(resolve, reject) {
					$http.get(requestURL, requestConfig).then(
						function(response) {
							resolve(response.data.envs);
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:load_secrets][:default_error] %>",
									"<%= data[:strings][:request_service][:load_secrets][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			requestService.getSecretValue = function(secret, requestConfig) {
				var requestURL;

				switch (requestService.mode) {
					case "website":
						requestURL = stringService.stringReplacedWithParameters(
							"<%= webserver_path(data[:routes][:website][:secret_value_get]) %>",
							{
								app_slug: requestService.appSlug,
								secret_key: secret.key()
							}
						);

						break;
					case "cli":
						return $q.reject(
							new Error(
								"<%= data[:strings][:request_service][:get_secret_environment_value][:not_website_mode_error] %>"
							)
						);
				}

				return $q(function(resolve, reject) {
					$http.get(requestURL, requestConfig).then(
						function(response) {
							resolve(response.data.value);
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:get_secret_environment_value][:default_error] %>",
									"<%= data[:strings][:request_service][:get_secret_environment_value][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			// Steps

			requestService.libraryFetch = function(libraryURLs, requestConfig) {
				var requestMethod;
				var requestURL;
				var requestData;

				if (libraryURLs) {
					requestData = {
						libraries: libraryURLs
					};
				}

				switch (requestService.mode) {
					case "website":
						requestMethod = "get";
						requestURL = "<%= webserver_path(data[:routes][:website][:bitrise_steplib_get]) %>";

						break;
					case "cli":
						requestMethod = "post";
						requestURL = "<%= local_server_path(data[:routes][:local_server][:libraries_fetch]) %>";

						break;
				}

				return $q(function(resolve, reject) {
					$http[requestMethod](requestURL, requestData, requestConfig).then(
						function(response) {
							switch (requestService.mode) {
								case "website":
									var libraryMap = {};
									libraryMap[response.data.steplib_source] = response.data;

									resolve(libraryMap);

									break;
								case "cli":
									resolve(response.data.library_map);

									break;
							}
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:libraries_fetch][:default_error] %>",
									"<%= data[:strings][:request_service][:libraries_fetch][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			requestService.stepConfigFetch = function(step, requestConfig) {
				var requestURL = "<%= local_server_path(data[:routes][:local_server][:step_config_fetch]) %>";
				var requestData = {};

				if (step.localPath) {
					requestData.library = "path";
					requestData.id = step.localPath;
				} else if (step.gitURL) {
					switch (requestService.mode) {
						case "website":
							var stepYMLurl;

							var githubGitURLRegexp = new RegExp(
								"^(?:(?:http|https)://){0,1}(?:www.){0,1}(?:(?:github).com/)(.*?)(?:.git){0,1}$"
							);
							if (githubGitURLRegexp.test(step.gitURL)) {
								stepYMLurl = stringService.stringReplacedWithParameters(
									"<%= data[:routes][:other][:github_step_yml_path] %>",
									{
										step_path: githubGitURLRegexp.exec(step.gitURL)[1],
										step_version: step.version ? step.version : "master"
									}
								);
							}

							if (stepYMLurl) {
								return $q(function(resolve, reject) {
									$http.get(stepYMLurl, requestConfig).then(
										function(response) {
											try {
												var defaultStepConfig = jsyaml.load(response.data);
												resolve(defaultStepConfig);
											} catch (error) {
												reject(
													new Error("<%= data[:strings][:request_service][:step_config_fetch][:default_error] %>")
												);
											}
										},
										function(response) {
											reject(
												new Error(
													"<%= data[:strings][:request_service][:step_config_fetch][:error_prefix] %><%= data[:strings][:request_service][:step_config_fetch][:github_error] %>"
												)
											);
										}
									);
								});
							} else {
								return $q.reject(
									new Error(
										"<%= data[:strings][:request_service][:step_config_fetch][:error_prefix] %><%= data[:strings][:request_service][:step_config_fetch][:not_supported_host] %>"
									)
								);
							}

							break;
						case "cli":
							requestData.library = "git";
							requestData.id = step.gitURL;
							requestData.version = step.version;

							break;
					}
				} else {
					requestData.library = step.libraryURL;
					requestData.id = step.id;
					requestData.version = step.version;
				}

				return $q(function(resolve, reject) {
					$http.post(requestURL, requestData, requestConfig).then(
						function(response) {
							resolve(response.data.step);
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:step_config_fetch][:default_error] %>",
									"<%= data[:strings][:request_service][:step_config_fetch][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			// Variables

			requestService.getDefaultOutputs = function(requestConfig) {
				var requestURL;

				switch (requestService.mode) {
					case "website":
						requestURL = stringService.stringReplacedWithParameters(
							"<%= webserver_path(data[:routes][:website][:default_outputs_get]) %>",
							{
								app_slug: requestService.appSlug
							}
						);

						break;
					case "cli":
						requestURL = "<%= local_server_path(data[:routes][:local_server][:default_outputs_get]) %>";

						break;
				}

				return $q(function(resolve, reject) {
					$http.get(requestURL, requestConfig).then(
						function(response) {
							resolve(response.data);
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:load_default_outputs][:default_error] %>",
									"<%= data[:strings][:request_service][:load_default_outputs][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			// Project types

			requestService.getAppAvailableProjectTypes = function(requestConfig) {
				var requestURL = stringService.stringReplacedWithParameters(
					"<%= webserver_path(data[:routes][:website][:stack_info_get]) %>",
					{
						app_slug: requestService.appSlug
					}
				);

				return $q(function(resolve, reject) {
					$http.get(requestURL, requestConfig).then(
						function(response) {
							resolve(response.data ? response.data.project_types : []);
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:get_app_available_project_types][:default_error] %>",
									"<%= data[:strings][:request_service][:get_app_available_project_types][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			// Machine Type

			requestService.getMachineTypeConfigs = function(requestConfig) {
				var requestURL;

				switch (requestService.mode) {
					case "website":
						requestURL = stringService.stringReplacedWithParameters(
							"<%= webserver_path(data[:routes][:website][:machine_type_configs_get]) %>",
							{
								app_slug: requestService.appSlug
							}
						);

						break;
					case "cli":
						return $q.reject(
							new Error("<%= data[:strings][:request_service][:get_machine_types][:not_website_mode_error] %>")
						);
				}

				return $q(function(resolve, reject) {
					$http.get(requestURL, requestConfig).then(
						function(response) {
							var machineTypeConfigs = _.each(response.data.available_machine_type_configs, function(
								aStackSpecificMachineTypeConfigs,
								aStackType
							) {
								var machineTypeSpecificConfig = {};
								var stackSpecificMachineTypeConfigs = {};
								return (stackSpecificMachineTypeConfigs[aStackType] = {
									defaultMachineType: aStackSpecificMachineTypeConfigs.default_machine_type,
									machineTypes: _.map(aStackSpecificMachineTypeConfigs.machine_types, function(
										aMachineTypeConfig,
										aMachineType
									) {
										return (machineTypeSpecificConfig[aMachineType] = {
											name: aMachineTypeConfig.name,
											cpuCount: aMachineTypeConfig.cpu_count,
											cpuDescription: aMachineTypeConfig.cpu_description,
											ram: aMachineTypeConfig.ram,
											creditPerMin: aMachineTypeConfig.credit_per_min,
											isAvailable: aMachineTypeConfig.is_available,
											note: aMachineTypeConfig.note
										});
									})
								});
							});

							resolve({
								machineTypeConfigs: machineTypeConfigs
							});
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:get_machine_types][:default_error] %>",
									"<%= data[:strings][:request_service][:get_machine_types][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			// Stacks

			requestService.getStack = function(requestConfig) {
				var requestURL;

				switch (requestService.mode) {
					case "website":
						requestURL = stringService.stringReplacedWithParameters(
							"<%= webserver_path(data[:routes][:website][:stack_get]) %>",
							{
								app_slug: requestService.appSlug
							}
						);

						break;
					case "cli":
						return $q.reject(new Error("<%= data[:strings][:request_service][:get_stack][:not_website_mode_error] %>"));
				}

				return $q(function(resolve, reject) {
					$http.get(requestURL, requestConfig).then(
						function(response) {
							resolve({
								stackID: response.data.stack_identifier,
								dockerImage: response.data.docker_image_name,
								denTags: response.data.den_tags
							});
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:get_stack][:default_error] %>",
									"<%= data[:strings][:request_service][:get_stack][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			requestService.getStacks = function(requestConfig) {
				var requestURL;

				switch (requestService.mode) {
					case "website":
						requestURL = stringService.stringReplacedWithParameters(
							"<%= webserver_path(data[:routes][:website][:stacks_get]) %>",
							{
								app_slug: requestService.appSlug
							}
						);

						break;
					case "cli":
						return $q.reject(
							new Error("<%= data[:strings][:request_service][:get_stacks][:not_website_mode_error] %>")
						);
				}

				return $q(function(resolve, reject) {
					$http.get(requestURL, requestConfig).then(
						function(response) {
							var stackDatas = _.map(response.data.available_stacks, function(aStackData, stackID) {
								return {
									id: stackID,
									name: aStackData.title,
									description: aStackData.description,
									descriptionURL: aStackData["description-link"],
									preInstalledToolsLink: aStackData["pre-installed-tools-link"],
									projectTypes: aStackData["project-types"],
									queueInfo: aStackData["queueInfo"]
								};
							});

							var projecTypeDatas = _.map(response.data.project_types_with_default_stacks, function(
								aProjectTypeData,
								projectTypeID
							) {
								return {
									id: projectTypeID,
									defaultStackID: aProjectTypeData.default_stack
								};
							});

							resolve({
								stackDatas: stackDatas,
								projectTypeDatas: projecTypeDatas
							});
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:get_stacks][:default_error] %>",
									"<%= data[:strings][:request_service][:get_stacks][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			requestService.saveStack = function(stackID, dockerImage, denTags, requestConfig) {
				var requestURL;
				var requestData;

				switch (requestService.mode) {
					case "website":
						requestURL = stringService.stringReplacedWithParameters(
							"<%= webserver_path(data[:routes][:website][:stack_save]) %>",
							{
								app_slug: requestService.appSlug
							}
						);
						requestData = {
							stack_identifier: stackID,
							den_tags: denTags
						};
						if (dockerImage !== null) {
							requestData.docker_image_name = dockerImage;
						}

						break;
					case "cli":
						return $q.reject(
							new Error("<%= data[:strings][:request_service][:save_stack][:not_website_mode_error] %>")
						);
				}

				return $q(function(resolve, reject) {
					$http.post(requestURL, requestData, requestConfig).then(
						function() {
							resolve();
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:save_stack][:default_error] %>",
									"<%= data[:strings][:request_service][:save_stack][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			// Apple Developer Portal

			requestService.getAppleDeveloperAccount = function(requestConfig) {
				var requestURL;

				switch (requestService.mode) {
					case "website":
						requestURL = "<%= webserver_path(data[:routes][:website][:apple_developer_account_get]) %>";

						break;
					case "cli":
						return $q.reject(
							new Error(
								"<%= data[:strings][:request_service][:get_apple_developer_account_data_from_database][:not_website_mode_error] %>"
							)
						);
				}

				return $q(
					function(resolve, reject) {
						$http.get(requestURL, requestConfig).then(function(response) {
							var responseData = {
								isAccepted: response.data.status == 200
							};

							if (responseData.isAccepted) {
								responseData.connectedAccount = {
									appleID: response.data.connected_account.apple_id,
									authExpiresAt: dateService.dateFromString(response.data.connected_account.auth_expires_at),
									selectedTeamIDs: response.data.connected_account.selected_team_ids
								};
							}

							resolve(responseData);
						});
					},
					function(response) {
						reject(
							errorFromResponse(
								response,
								"<%= data[:strings][:request_service][:get_apple_developer_account_data_from_database][:default_error] %>",
								"<%= data[:strings][:request_service][:get_apple_developer_account_data_from_database][:error_prefix] %>"
							)
						);
					}
				);
			};

			requestService.addAppleDeveloperAccountWithAuthentication = function(appleID, password, requestConfig) {
				var requestURL;
				var requestData = {};

				switch (requestService.mode) {
					case "website":
						requestURL = "<%= webserver_path(data[:routes][:website][:apple_developer_account_connect]) %>";

						break;
					case "cli":
						return $q.reject(
							new Error(
								"<%= data[:strings][:request_service][:save_apple_developer_account_data_to_database_and_authenticate][:not_website_mode_error] %>"
							)
						);
				}

				if (appleID && password) {
					requestData.apple_id = appleID;
					requestData.password = password;
				} else {
					requestData.use_connected_account_credentials = true;
				}

				return $q(
					function(resolve, reject) {
						$http.post(requestURL, requestData, requestConfig).then(function(response) {
							var responseData = {
								isMoreInfoNeeded: response.data.status == 100
							};

							if (response.data.headers) {
								responseData.headers = response.data.headers;
							}

							if (response.data.cookies) {
								responseData.cookies = response.data.cookies;
							}

							if (responseData.isMoreInfoNeeded) {
								responseData.trustedDevices = response.data.trusted_devices
									? _.map(response.data.trusted_devices, function(aTrustedDevice) {
											return {
												id: aTrustedDevice.id,
												phoneNumber: aTrustedDevice.phone_number
											};
									  })
									: [];
								responseData.isTwoFactorAuthRequired = !response.data.trusted_devices;
								responseData.isTwoStepAuthRequired = !responseData.isTwoFactorAuthRequired;
							} else {
								responseData.connectedAccount = {
									fullName: response.data.account_data.full_name,
									email: response.data.account_data.email,
									appleID: response.data.account_data.apple_id,
									authExpiryDate: dateService.dateFromString(response.data.account_data.auth_expires_at),
									selectedTeamIDs: response.data.account_data.selected_team_ids
								};

								var teamsWithAgentRole = [];
								var teamsWithAdminRole = [];
								var teamsWithMemberRole = [];
								_.each(response.data.apple_developer_account_teams, function(aTeam) {
									if (aTeam.current_team_member.is_agent) {
										teamsWithAgentRole.push(aTeam);
									} else if (aTeam.current_team_member.is_admin) {
										teamsWithAdminRole.push(aTeam);
									} else {
										teamsWithMemberRole.push(aTeam);
									}
								});

								responseData.appleDeveloperAccountTeams = response.data.apple_developer_account_teams
									? _.map(_.union(teamsWithAgentRole, teamsWithAdminRole, teamsWithMemberRole), function(aTeam) {
											var devicesByType = {
												ipad: undefined,
												iphone: undefined,
												ipod: undefined,
												watch: undefined,
												tvOS: undefined
											};

											_.each(aTeam.devices_data.devices_by_type, function(devicesOfType, aDeviceType) {
												devicesByType[aDeviceType] = _.map(devicesOfType, function(aDevice) {
													return {
														id: aDevice.id,
														name: aDevice.name,
														model: aDevice.model,
														number: aDevice.number,
														status: aDevice.status,
														platform: aDevice.platform
													};
												});
											});

											return {
												id: aTeam.id,
												name: aTeam.name,
												entityType: aTeam.entity_type,
												status: aTeam.status,
												createdAt: dateService.dateFromString(aTeam.created_at),
												teamAgent: aTeam.team_agent,
												memberships: _.sortBy(
													_.map(aTeam.memberships, function(aMembership) {
														return {
															name: aMembership.name,
															platform: aMembership.platform,
															status: aMembership.status,
															membershipID: aMembership.membershipId,
															membershipProductID: aMembership.membershipProductId,
															startAt: dateService.dateFromString(aMembership.dateStart),
															expireAt: aMembership.dateExpire
																? dateService.dateFromString(aMembership.dateExpire)
																: null
														};
													}),
													"expireAt"
												),
												currentTeamMember: {
													teamMemberID: aTeam.current_team_member.team_member_id,
													roles: {
														isAdmin: {
															name: "Admin",
															status: aTeam.current_team_member.is_admin
														},
														isMember: {
															name: "Member",
															status: aTeam.current_team_member.is_member
														},
														isAgent: {
															name: "Agent",
															status: aTeam.current_team_member.is_agent
														}
													}
												},
												devicesData: aTeam.devices_data.error_type
													? {
															error: new Error(
																"The team’s Admin needs to accept the latest Program License Agreement rider, which can be reviewed in their developer account."
															)
													  }
													: {
															pageNumber: aTeam.devices_data.page_number,
															pageSize: aTeam.devices_data.page_size,
															totalRecords: aTeam.devices_data.total_records,
															devicesByType: devicesByType
													  }
											};
									  })
									: [];
							}

							resolve(responseData);
						});
					},
					function(response) {
						reject(
							errorFromResponse(
								response,
								"<%= data[:strings][:request_service][:save_apple_developer_account_data_to_database_and_authenticate][:default_error] %>",
								"<%= data[:strings][:request_service][:save_apple_developer_account_data_to_database_and_authenticate][:error_prefix] %>"
							)
						);
					}
				);
			};

			requestService.deleteAppleDeveloperAccount = function(requestConfig) {
				var requestURL;

				switch (requestService.mode) {
					case "website":
						requestURL = "<%= webserver_path(data[:routes][:website][:apple_developer_account_connection_delete]) %>";

						break;
					case "cli":
						return $q.reject(
							new Error(
								"<%= data[:strings][:request_service][:delete_apple_developer_account_data_from_database][:not_website_mode_error] %>"
							)
						);
				}

				return $q(function(resolve, reject) {
					$http.delete(requestURL, requestConfig).then(
						function() {
							resolve();
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:delete_apple_developer_account_data_from_database][:default_error] %>",
									"<%= data[:strings][:request_service][:get_apple_developer_account_data_from_database][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			requestService.selectTrustedDeviceForAppleDeveloperAccountAuthentication = function(
				headers,
				selectedDeviceID,
				requestConfig
			) {
				var requestURL;
				var requestData = {
					headers: headers,
					selected_device_id: selectedDeviceID
				};

				switch (requestService.mode) {
					case "website":
						requestURL =
							"<%= webserver_path(data[:routes][:website][:apple_developer_account_two_step_auth_select_device_post]) %>";

						break;
					case "cli":
						return $q.reject(
							new Error(
								"<%= data[:strings][:request_service][:post_apple_developer_account_two_step_auth_select_device][:not_website_mode_error] %>"
							)
						);
				}

				return $q(function(resolve, reject) {
					$http.post(requestURL, requestData, requestConfig).then(
						function(response) {
							resolve({
								headers: response.data.headers
							});
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:post_apple_developer_account_two_step_auth_select_device][:default_error] %>",
									"<%= data[:strings][:request_service][:post_apple_developer_account_two_step_auth_select_device][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			requestService.verifyCodeForAppleDeveloperAccountAuthentication = function(
				headers,
				appleID,
				password,
				verificationCode,
				selectedDeviceID,
				requestConfig
			) {
				var requestURL;
				var requestData = {
					headers: headers,
					verification_code: verificationCode
				};

				if (selectedDeviceID !== null) {
					requestData.selected_device_id = selectedDeviceID;
				}

				if (appleID && password) {
					requestData.apple_id = appleID;
					requestData.password = password;
				} else {
					requestData.use_connected_account_credentials = true;
				}

				switch (requestService.mode) {
					case "website":
						if (selectedDeviceID == null) {
							requestURL =
								"<%= webserver_path(data[:routes][:website][:apple_developer_account_two_factor_auth_verify_code_post]) %>";
						} else {
							requestURL =
								"<%= webserver_path(data[:routes][:website][:apple_developer_account_two_step_auth_verify_code_post]) %>";
						}

						break;
					case "cli":
						return $q.reject(
							new Error(
								"<%= data[:strings][:request_service][:post_apple_developer_account_verify_code][:not_website_mode_error] %>"
							)
						);
				}

				return $q(function(resolve, reject) {
					$http.post(requestURL, requestData, requestConfig).then(
						function(response) {
							var responseData = {
								connectedAccount: {
									displayName: response.data.account_data.full_name,
									email: response.data.account_data.email,
									appleID: response.data.account_data.apple_id,
									authExpiryDate: dateService.dateFromString(response.data.account_data.auth_expires_at),
									selectedTeamIDs: response.data.account_data.selected_team_ids
								}
							};

							var teamsWithAgentRole = [];
							var teamsWithAdminRole = [];
							var teamsWithMemberRole = [];
							_.each(response.data.apple_developer_account_teams, function(aTeam) {
								if (aTeam.current_team_member.is_agent) {
									teamsWithAgentRole.push(aTeam);
								} else if (aTeam.current_team_member.is_admin) {
									teamsWithAdminRole.push(aTeam);
								} else {
									teamsWithMemberRole.push(aTeam);
								}
							});

							responseData.appleDeveloperAccountTeams = response.data.apple_developer_account_teams
								? _.map(_.union(teamsWithAgentRole, teamsWithAdminRole, teamsWithMemberRole), function(aTeam) {
										var devicesByType = {
											ipad: undefined,
											iphone: undefined,
											ipod: undefined,
											watch: undefined,
											tvOS: undefined
										};

										_.each(aTeam.devices_data.devices_by_type, function(devicesOfType, aDeviceType) {
											devicesByType[aDeviceType] = _.map(devicesOfType, function(aDevice) {
												return {
													id: aDevice.id,
													name: aDevice.name,
													model: aDevice.model,
													number: aDevice.number,
													status: aDevice.status,
													platform: aDevice.platform
												};
											});
										});

										return {
											id: aTeam.id,
											name: aTeam.name,
											entityType: aTeam.entity_type,
											status: aTeam.status,
											createdAt: dateService.dateFromString(aTeam.created_at),
											teamAgent: aTeam.team_agent,
											memberships: _.sortBy(
												_.map(aTeam.memberships, function(aMembership) {
													return {
														name: aMembership.name,
														platform: aMembership.platform,
														status: aMembership.status,
														membershipID: aMembership.membershipId,
														membershipProductID: aMembership.membershipProductId,
														startAt: dateService.dateFromString(aMembership.dateStart),
														expireAt: aMembership.dateExpire ? dateService.dateFromString(aMembership.dateExpire) : null
													};
												}),
												"expireAt"
											),
											currentTeamMember: {
												teamMemberID: aTeam.current_team_member.team_member_id,
												roles: {
													isAdmin: {
														name: "Admin",
														status: aTeam.current_team_member.is_admin
													},
													isMember: {
														name: "Member",
														status: aTeam.current_team_member.is_member
													},
													isAgent: {
														name: "Agent",
														status: aTeam.current_team_member.is_agent
													}
												}
											},
											devicesData: aTeam.devices_data.error_type
												? {
														error:
															"The team’s Admin needs to accept the latest Program License Agreement rider, which can be reviewed in their developer account."
												  }
												: {
														pageNumber: aTeam.devices_data.page_number,
														pageSize: aTeam.devices_data.page_size,
														totalRecords: aTeam.devices_data.total_records,
														devicesByType: devicesByType
												  }
										};
								  })
								: [];

							resolve(responseData);
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:post_apple_developer_account_verify_code][:default_error] %>",
									"<%= data[:strings][:request_service][:post_apple_developer_account_verify_code][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			requestService.saveSelectedDefaultTeamIDForAppFromAppleDeveloperAccountTeams = function(teamID, requestConfig) {
				var requestURL;
				var requestData = {
					team_id: teamID,
					app_slug: requestService.appSlug
				};

				switch (requestService.mode) {
					case "website":
						requestURL = "<%= webserver_path(data[:routes][:website][:apple_developer_account_default_team_post]) %>";

						break;
					case "cli":
						return $q.reject(
							new Error(
								"<%= data[:strings][:request_service][:post_apple_developer_account_default_team][:not_website_mode_error] %>"
							)
						);
				}

				return $q(function(resolve, reject) {
					$http.post(requestURL, requestData, requestConfig).then(
						function(response) {
							resolve();
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:post_apple_developer_account_default_team][:default_error] %>",
									"<%= data[:strings][:request_service][:post_apple_developer_account_default_team][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			// Provisioning profiles

			requestService.getDetailsOfProvProfile = function(databaseID, requestConfig) {
				var requestURL;

				switch (requestService.mode) {
					case "website":
						requestURL = stringService.stringReplacedWithParameters(
							"<%= webserver_path(data[:routes][:website][:prov_profile_get_details]) %>",
							{
								prov_profile_id: databaseID
							}
						);

						break;
					case "cli":
						return $q.reject(
							new Error(
								"<%= data[:strings][:request_service][:get_details_of_prov_profile][:not_website_mode_error] %>"
							)
						);
				}

				return $q(function(resolve, reject) {
					$http.get(requestURL, requestConfig).then(
						function(response) {
							resolve({
								uuid: response.data.prov_profile_details.uuid,
								expiresAt: dateService.dateFromString(response.data.prov_profile_details.expiration_date),
								exportType: response.data.prov_profile_details.export_type,
								teamName: response.data.prov_profile_details.team_name,
								teamID: response.data.prov_profile_details.team_id,
								bundleID: response.data.prov_profile_details.bundle_id,
								developerCertificateIdentities: _.map(
									response.data.prov_profile_details.developer_certificates,
									function(aCertificateIdentity) {
										return {
											commonName: aCertificateIdentity.common_name,
											startDate: dateService.dateFromString(aCertificateIdentity.start_date),
											endDate: dateService.dateFromString(aCertificateIdentity.end_date),
											teamName: aCertificateIdentity.team_name,
											teamID: aCertificateIdentity.team_id,
											serial: aCertificateIdentity.serial
										};
									}
								),
								capabilityKeys: _.keys(response.data.prov_profile_details.entitlements),
								provisionedDevices: _.map(response.data.prov_profile_details.provisioned_devices, function(udid) {
									return {
										udid: udid
									};
								})
							});
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:get_details_of_prov_profile][:default_error] %>",
									"<%= data[:strings][:request_service][:get_details_of_prov_profile][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			requestService.fetchAllTestDevicesOfRepository = function(requestConfig) {
				var requestURL;

				switch (requestService.mode) {
					case "website":
						requestURL = stringService.stringReplacedWithParameters(
							"<%= webserver_path(data[:routes][:website][:team_test_devices]) %>",
							{
								app_slug: requestService.appSlug
							}
						);

						break;
					case "cli":
						return $q.reject(
							new Error(
								"<%= data[:strings][:request_service][:get_all_test_devices_of_repository][:not_website_mode_error] %>"
							)
						);
				}

				return $q(function(resolve, reject) {
					$http.get(requestURL, requestConfig).then(
						function(response) {
							resolve(
								_.map(response.data, function(aDeviceData) {
									return {
										udid: aDeviceData.device_identifier,
										databaseID: aDeviceData.id,
										ownerUsername: aDeviceData.owner,
										title: aDeviceData.title
									};
								})
							);
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:get_all_test_devices_of_repository][:default_error] %>",
									"<%= data[:strings][:request_service][:get_all_test_devices_of_repository][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			requestService.postProvProfileCreate = function(fileName, fileSize, requestConfig) {
				var requestURL = stringService.stringReplacedWithParameters(
					"<%= webserver_path(data[:routes][:website][:prov_profile_create]) %>",
					{
						app_slug: requestService.appSlug
					}
				);

				var requestData = {
					upload_file_name: fileName,
					upload_file_size: fileSize
				};

				return $q(function(resolve, reject) {
					$http.post(requestURL, requestData, requestConfig).then(
						function(response) {
							resolve({
								databaseID: response.data.id,
								uploadURL: response.data.upload_url
							});
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:create_prov_profile][:default_error] %>",
									"<%= data[:strings][:request_service][:create_prov_profile][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			requestService.finalizeProvProfileUpload = function(databaseID, isSuccess, requestConfig) {
				var requestURL = stringService.stringReplacedWithParameters(
					"<%= webserver_path(data[:routes][:website][:prov_profile_finalize_upload]) %>",
					{
						prov_profile_id: databaseID
					}
				);

				var requestData = {
					success: isSuccess
				};

				return $q(function(resolve, reject) {
					return $http.post(requestURL, requestData, requestConfig).then(
						function() {
							resolve();
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:finalize_prov_profile_upload][:default_error] %>",
									"<%= data[:strings][:request_service][:finalize_prov_profile_upload][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			requestService.getProvProfiles = function(requestConfig) {
				var requestURL = stringService.stringReplacedWithParameters(
					"<%= webserver_path(data[:routes][:website][:prov_profiles_get]) %>",
					{
						app_slug: requestService.appSlug
					}
				);

				return $q(function(resolve, reject) {
					$http.get(requestURL, requestConfig).then(
						function(response) {
							resolve(
								_.map(response.data.prov_profile_documents, function(aProvProfileData) {
									return {
										databaseID: aProvProfileData.id,
										isProcessed: aProvProfileData.processed,
										uploadFileName: aProvProfileData.upload_file_name,
										isExpose: aProvProfileData.is_expose,
										isProtected: aProvProfileData.is_protected
									};
								})
							);
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:load_prov_profiles][:default_error] %>",
									"<%= data[:strings][:request_service][:load_prov_profiles][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			requestService.updateProvProfileIsExposeState = function(databaseID, isExpose, requestConfig) {
				var requestURL = stringService.stringReplacedWithParameters(
					"<%= webserver_path(data[:routes][:website][:prov_profile_is_expose_state_update]) %>",
					{
						prov_profile_id: databaseID
					}
				);

				var requestData = {
					is_expose: isExpose
				};

				return $q(function(resolve, reject) {
					$http.post(requestURL, requestData, requestConfig).then(
						function() {
							resolve();
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:update_prov_profile_is_expose_state][:default_error] %>",
									"<%= data[:strings][:request_service][:update_prov_profile_is_expose_state][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			requestService.protectProvProfile = function(databaseID, requestConfig) {
				var requestURL = stringService.stringReplacedWithParameters(
					"<%= webserver_path(data[:routes][:website][:prov_profile_protect]) %>",
					{
						prov_profile_id: databaseID
					}
				);

				return $q(function(resolve, reject) {
					$http.post(requestURL, undefined, requestConfig).then(
						function() {
							resolve();
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:protect_prov_profile][:default_error] %>",
									"<%= data[:strings][:request_service][:protect_prov_profile][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			requestService.downloadProvProfile = function(databaseID) {
				return stringService.stringReplacedWithParameters(
					"<%= webserver_path(data[:routes][:website][:prov_profile_download]) %>",
					{
						prov_profile_id: databaseID
					}
				);
			};

			requestService.deleteProvProfile = function(databaseID, requestConfig) {
				var requestURL = stringService.stringReplacedWithParameters(
					"<%= webserver_path(data[:routes][:website][:prov_profile_delete]) %>",
					{
						prov_profile_id: databaseID
					}
				);

				return $q(function(resolve, reject) {
					$http.delete(requestURL, requestConfig).then(
						function(response) {
							resolve();
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:delete_prov_profile][:default_error] %>",
									"<%= data[:strings][:request_service][:delete_prov_profile][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			requestService.deleteAllProvProfiles = function(requestConfig) {
				var requestURL = stringService.stringReplacedWithParameters(
					"<%= webserver_path(data[:routes][:website][:prov_profiles_delete_all]) %>",
					{
						app_slug: requestService.appSlug
					}
				);

				return $q(function(resolve, reject) {
					$http.delete(requestURL, requestConfig).then(
						function(response) {
							resolve();
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:delete_all_prov_profiles][:default_error] %>",
									"<%= data[:strings][:request_service][:delete_all_prov_profiles][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			// Certificates

			requestService.getDetailsOfCertificate = function(certificateDatabaseID, certificatePassword, requestConfig) {
				var requestURL;

				switch (requestService.mode) {
					case "website":
						requestURL = stringService.stringReplacedWithParameters(
							"<%= webserver_path(data[:routes][:website][:certificate_get_details]) %>",
							{
								certificate_id: certificateDatabaseID,
								password: certificatePassword
							}
						);

						break;
					case "cli":
						return $q.reject(
							new Error("<%= data[:strings][:request_service][:get_details_of_certificate][:not_website_mode_error] %>")
						);
				}

				return $q(function(resolve, reject) {
					$http.get(requestURL, requestConfig).then(
						function(response) {
							resolve(
								_.map(response.data.build_certificate_details, function(aCertificateData) {
									return {
										commonName: aCertificateData.common_name,
										startDate: dateService.dateFromString(aCertificateData.start_date),
										endDate: dateService.dateFromString(aCertificateData.end_date),
										teamName: aCertificateData.team_name,
										teamID: aCertificateData.team_id,
										serial: aCertificateData.serial
									};
								})
							);
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:get_details_of_certificate][:default_error] %>",
									"<%= data[:strings][:request_service][:get_details_of_certificate][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			requestService.postCertificateCreate = function(fileName, fileSize, requestConfig) {
				var requestURL = stringService.stringReplacedWithParameters(
					"<%= webserver_path(data[:routes][:website][:certificate_create]) %>",
					{
						app_slug: requestService.appSlug
					}
				);

				var requestData = {
					upload_file_name: fileName,
					upload_file_size: fileSize
				};

				return $q(function(resolve, reject) {
					$http.post(requestURL, requestData, requestConfig).then(
						function(response) {
							resolve({
								databaseID: response.data.id,
								uploadURL: response.data.upload_url
							});
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:create_certificate][:default_error] %>",
									"<%= data[:strings][:request_service][:create_certificate][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			requestService.finalizeCertificateUpload = function(databaseID, isSuccess, requestConfig) {
				var requestURL = stringService.stringReplacedWithParameters(
					"<%= webserver_path(data[:routes][:website][:certificate_finalize_upload]) %>",
					{
						certificate_id: databaseID
					}
				);

				var requestData = {
					success: isSuccess
				};

				return $q(function(resolve, reject) {
					return $http.post(requestURL, requestData, requestConfig).then(
						function() {
							resolve();
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:finalize_certificate_upload][:default_error] %>",
									"<%= data[:strings][:request_service][:finalize_certificate_upload][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			requestService.getCertificates = function(requestConfig) {
				var requestURL = stringService.stringReplacedWithParameters(
					"<%= webserver_path(data[:routes][:website][:certificates_get]) %>",
					{
						app_slug: requestService.appSlug
					}
				);

				return $q(function(resolve, reject) {
					$http.get(requestURL, requestConfig).then(
						function(response) {
							resolve(
								_.map(response.data.build_certificates, function(aCertificateData) {
									return {
										databaseID: aCertificateData.id,
										isProcessed: aCertificateData.processed,
										uploadFileName: aCertificateData.upload_file_name,
										password: aCertificateData.certificate_password,
										isExpose: aCertificateData.is_expose,
										isProtected: aCertificateData.is_protected
									};
								})
							);
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:load_certificates][:default_error] %>",
									"<%= data[:strings][:request_service][:load_certificates][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			requestService.updateCertificateIsExposeState = function(databaseID, isExpose, requestConfig) {
				var requestURL = stringService.stringReplacedWithParameters(
					"<%= webserver_path(data[:routes][:website][:certificate_is_expose_state_update]) %>",
					{
						certificate_id: databaseID
					}
				);

				var requestData = {
					is_expose: isExpose
				};

				return $q(function(resolve, reject) {
					$http.post(requestURL, requestData, requestConfig).then(
						function() {
							resolve();
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:update_certificate_is_expose_state][:default_error] %>",
									"<%= data[:strings][:request_service][:update_certificate_is_expose_state][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			requestService.protectCertificate = function(databaseID, requestConfig) {
				var requestURL = stringService.stringReplacedWithParameters(
					"<%= webserver_path(data[:routes][:website][:certificate_protect]) %>",
					{
						certificate_id: databaseID
					}
				);

				return $q(function(resolve, reject) {
					$http.post(requestURL, undefined, requestConfig).then(
						function() {
							resolve();
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:protect_certificate][:default_error] %>",
									"<%= data[:strings][:request_service][:protect_certificate][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			requestService.downloadCertificate = function(databaseID) {
				return stringService.stringReplacedWithParameters(
					"<%= webserver_path(data[:routes][:website][:certificate_download]) %>",
					{
						certificate_id: databaseID
					}
				);
			};

			requestService.putCertificatePasswordSave = function(databaseID, password, requestConfig) {
				var requestURL = stringService.stringReplacedWithParameters(
					"<%= webserver_path(data[:routes][:website][:certificate_password_save]) %>",
					{
						certificate_id: databaseID
					}
				);

				var requestData = {
					certificate_password: password
				};

				return $q(function(resolve, reject) {
					return $http.put(requestURL, requestData, requestConfig).then(
						function() {
							resolve();
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:save_certificate_password][:default_error] %>",
									"<%= data[:strings][:request_service][:save_certificate_password][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			requestService.deleteCertificate = function(databaseID, requestConfig) {
				var requestURL = stringService.stringReplacedWithParameters(
					"<%= webserver_path(data[:routes][:website][:certificate_delete]) %>",
					{
						certificate_id: databaseID
					}
				);

				return $q(function(resolve, reject) {
					$http.delete(requestURL, requestConfig).then(
						function(response) {
							resolve();
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:delete_certificate][:default_error] %>",
									"<%= data[:strings][:request_service][:delete_certificate][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			requestService.deleteAllCertificates = function(requestConfig) {
				var requestURL = stringService.stringReplacedWithParameters(
					"<%= webserver_path(data[:routes][:website][:certificates_delete_all]) %>",
					{
						app_slug: requestService.appSlug
					}
				);

				return $q(function(resolve, reject) {
					$http.delete(requestURL, requestConfig).then(
						function(response) {
							resolve();
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:delete_all_certificates][:default_error] %>",
									"<%= data[:strings][:request_service][:delete_all_certificates][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			// Generic files

			requestService.postGenericFileCreate = function(envVarPartialID, fileName, fileSize, requestConfig) {
				var requestURL = stringService.stringReplacedWithParameters(
					"<%= webserver_path(data[:routes][:website][:generic_file_create]) %>",
					{
						app_slug: requestService.appSlug
					}
				);

				var requestData = {
					user_env_key: envVarPartialID,
					upload_file_name: fileName,
					upload_file_size: fileSize
				};

				return $q(function(resolve, reject) {
					$http.post(requestURL, requestData, requestConfig).then(
						function(response) {
							resolve({
								databaseID: response.data.id,
								uploadURL: response.data.upload_url
							});
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:create_generic_file][:default_error] %>",
									"<%= data[:strings][:request_service][:create_generic_file][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			requestService.finalizeGenericFileUpload = function(databaseID, isSuccess, requestConfig) {
				var requestURL = stringService.stringReplacedWithParameters(
					"<%= webserver_path(data[:routes][:website][:generic_file_finalize_upload]) %>",
					{
						generic_file_id: databaseID
					}
				);

				var requestData = {
					success: isSuccess
				};

				return $q(function(resolve, reject) {
					return $http.post(requestURL, requestData, requestConfig).then(
						function() {
							resolve();
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:finalize_generic_file_upload][:default_error] %>",
									"<%= data[:strings][:request_service][:finalize_generic_file_upload][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			requestService.getGenericFiles = function(requestConfig) {
				var requestURL = stringService.stringReplacedWithParameters(
					"<%= webserver_path(data[:routes][:website][:generic_files_get]) %>",
					{
						app_slug: requestService.appSlug
					}
				);

				return $q(function(resolve, reject) {
					$http.get(requestURL, requestConfig).then(
						function(response) {
							var KeystoreFile = $injector.get("KeystoreFile");

							resolve(
								_.map(
									_.filter(response.data.project_file_storage_documents, function(aGenericFileData) {
										return aGenericFileData.user_env_key != KeystoreFile.downloadURLEnvVarPartialID;
									}),
									function(aGenericFileData) {
										return {
											databaseID: aGenericFileData.id,
											isProcessed: aGenericFileData.processed,
											envVarPartialID: aGenericFileData.user_env_key,
											uploadFileName: aGenericFileData.upload_file_name,
											isExpose: aGenericFileData.is_expose,
											isProtected: aGenericFileData.is_protected
										};
									}
								)
							);
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:load_generic_files][:default_error] %>",
									"<%= data[:strings][:request_service][:load_generic_files][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			requestService.updateGenericFileIsExposeState = function(databaseID, isExpose, requestConfig) {
				var requestURL = stringService.stringReplacedWithParameters(
					"<%= webserver_path(data[:routes][:website][:generic_file_is_expose_state_update]) %>",
					{
						generic_file_id: databaseID
					}
				);

				var requestData = {
					is_expose: isExpose
				};

				return $q(function(resolve, reject) {
					$http.post(requestURL, requestData, requestConfig).then(
						function() {
							resolve();
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:update_generic_file_is_expose_state][:default_error] %>",
									"<%= data[:strings][:request_service][:update_generic_file_is_expose_state][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			requestService.protectGenericFile = function(databaseID, requestConfig) {
				var requestURL = stringService.stringReplacedWithParameters(
					"<%= webserver_path(data[:routes][:website][:generic_file_protect]) %>",
					{
						generic_file_id: databaseID
					}
				);

				return $q(function(resolve, reject) {
					$http.post(requestURL, undefined, requestConfig).then(
						function() {
							resolve();
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:protect_generic_file][:default_error] %>",
									"<%= data[:strings][:request_service][:protect_generic_file][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			requestService.downloadGenericFile = function(databaseID) {
				return stringService.stringReplacedWithParameters(
					"<%= webserver_path(data[:routes][:website][:generic_file_download]) %>",
					{
						generic_file_id: databaseID
					}
				);
			};

			requestService.deleteGenericFile = function(databaseID, requestConfig) {
				var requestURL = stringService.stringReplacedWithParameters(
					"<%= webserver_path(data[:routes][:website][:generic_file_delete]) %>",
					{
						generic_file_id: databaseID
					}
				);

				return $q(function(resolve, reject) {
					$http.delete(requestURL, requestConfig).then(
						function(response) {
							resolve();
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:delete_generic_file][:default_error] %>",
									"<%= data[:strings][:request_service][:delete_generic_file][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			// Android Keystore file

			requestService.postKeystoreFileCreate = function(fileName, fileSize, requestConfig) {
				var requestURL = stringService.stringReplacedWithParameters(
					"<%= webserver_path(data[:routes][:website][:generic_file_create]) %>",
					{
						app_slug: requestService.appSlug
					}
				);

				var KeystoreFile = $injector.get("KeystoreFile");

				var requestData = {
					user_env_key: KeystoreFile.downloadURLEnvVarPartialID,
					upload_file_name: fileName,
					upload_file_size: fileSize
				};

				return $q(function(resolve, reject) {
					$http.post(requestURL, requestData, requestConfig).then(
						function(response) {
							resolve({
								databaseID: response.data.id,
								uploadURL: response.data.upload_url
							});
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:create_keystore_file][:default_error] %>",
									"<%= data[:strings][:request_service][:create_keystore_file][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			requestService.finalizeKeystoreFileUpload = function(databaseID, isSuccess, requestConfig) {
				var requestURL = stringService.stringReplacedWithParameters(
					"<%= webserver_path(data[:routes][:website][:generic_file_finalize_upload]) %>",
					{
						generic_file_id: databaseID
					}
				);

				var requestData = {
					success: isSuccess
				};

				return $q(function(resolve, reject) {
					return $http.post(requestURL, requestData, requestConfig).then(
						function() {
							resolve();
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:finalize_keystore_file_upload][:default_error] %>",
									"<%= data[:strings][:request_service][:finalize_keystore_file_upload][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			requestService.getKeystoreFile = function(requestConfig) {
				var requestURL = stringService.stringReplacedWithParameters(
					"<%= webserver_path(data[:routes][:website][:generic_files_get]) %>",
					{
						app_slug: requestService.appSlug
					}
				);

				return $q(function(resolve, reject) {
					$http.get(requestURL, requestConfig).then(
						function(response) {
							var KeystoreFile = $injector.get("KeystoreFile");
							var keystoreFileData = _.find(response.data.project_file_storage_documents, {
								user_env_key: KeystoreFile.downloadURLEnvVarPartialID
							});

							var responseData = null;

							if (keystoreFileData) {
								responseData = {
									databaseID: keystoreFileData.id,
									isProcessed: keystoreFileData.processed,
									envVarPartialID: keystoreFileData.user_env_key,
									uploadFileName: keystoreFileData.upload_file_name,
									isExpose: keystoreFileData.is_expose,
									isProtected: keystoreFileData.is_protected
								};

								if (keystoreFileData.exposed_meta_datastore) {
									responseData.password = keystoreFileData.exposed_meta_datastore.PASSWORD;
									responseData.alias = keystoreFileData.exposed_meta_datastore.ALIAS;
									responseData.privateKeyPassword = keystoreFileData.exposed_meta_datastore.PRIVATE_KEY_PASSWORD;
								}
							}

							resolve(responseData);
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:load_keystore_file][:default_error] %>",
									"<%= data[:strings][:request_service][:load_keystore_file][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			requestService.updateKeystoreFileIsExposeState = function(databaseID, isExpose, requestConfig) {
				var requestURL = stringService.stringReplacedWithParameters(
					"<%= webserver_path(data[:routes][:website][:generic_file_is_expose_state_update]) %>",
					{
						generic_file_id: databaseID
					}
				);

				var requestData = {
					is_expose: isExpose
				};

				return $q(function(resolve, reject) {
					$http.post(requestURL, requestData, requestConfig).then(
						function() {
							resolve();
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:update_generic_file_is_expose_state][:default_error] %>",
									"<%= data[:strings][:request_service][:update_generic_file_is_expose_state][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			requestService.downloadKeystoreFile = function(databaseID) {
				return stringService.stringReplacedWithParameters(
					"<%= webserver_path(data[:routes][:website][:generic_file_download]) %>",
					{
						generic_file_id: databaseID
					}
				);
			};

			requestService.putKeystoreFileMetadataSave = function(
				databaseID,
				password,
				alias,
				privateKeyPassword,
				requestConfig
			) {
				var requestURL = stringService.stringReplacedWithParameters(
					"<%= webserver_path(data[:routes][:website][:keystore_file_metadata_save]) %>",
					{
						keystore_file_id: databaseID
					}
				);

				var requestData = {
					exposed_meta: {
						PASSWORD: password,
						ALIAS: alias,
						PRIVATE_KEY_PASSWORD: privateKeyPassword
					}
				};

				return $q(function(resolve, reject) {
					return $http.put(requestURL, requestData, requestConfig).then(
						function() {
							resolve();
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:save_keystore_file_metadata][:default_error] %>",
									"<%= data[:strings][:request_service][:save_keystore_file_metadata][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			requestService.protectKeystoreFile = function(databaseID, requestConfig) {
				var requestURL = stringService.stringReplacedWithParameters(
					"<%= webserver_path(data[:routes][:website][:generic_file_protect]) %>",
					{
						generic_file_id: databaseID
					}
				);

				return $q(function(resolve, reject) {
					$http.post(requestURL, undefined, requestConfig).then(
						function() {
							resolve();
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:protect_keystore_file][:default_error] %>",
									"<%= data[:strings][:request_service][:protect_keystore_file][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			requestService.deleteKeystoreFile = function(databaseID, requestConfig) {
				var requestURL = stringService.stringReplacedWithParameters(
					"<%= webserver_path(data[:routes][:website][:generic_file_delete]) %>",
					{
						generic_file_id: databaseID
					}
				);

				return $q(function(resolve, reject) {
					$http.delete(requestURL, requestConfig).then(
						function(response) {
							resolve();
						},
						function(response) {
							reject(
								errorFromResponse(
									response,
									"<%= data[:strings][:request_service][:delete_keystore_file][:default_error] %>",
									"<%= data[:strings][:request_service][:delete_keystore_file][:error_prefix] %>"
								)
							);
						}
					);
				});
			};

			// Amazon S3

			requestService.uploadFileToStorage = function(uploadURL, file) {
				return $q(function(resolve, reject) {
					$.ajax({
						type: "PUT",
						url: uploadURL,
						contentType: "binary/octet-stream",
						processData: false,
						data: file
					}).then(
						function() {
							resolve();
						},
						function(response) {
							reject(new Error("<%= data[:strings][:request_service][:upload_file_to_storage][:default_error] %>"));
						}
					);
				});
			};

			return requestService;
		});
})();
