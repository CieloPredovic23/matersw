"use strict";

angular.module("BitriseWorkflowEditor").factory("semverService", function() {
    var WILDCARD = 'x';
    var WILDCARD_REGEX = new RegExp('\.' + WILDCARD, 'g');
    var validVersionRegex = /^\d+\.\d+\.\d+$/g;

    var semverService = {
        WILDCARD: WILDCARD,
        WILDCARD_REGEX: WILDCARD_REGEX,
        semver: _.template('{{ major }}.{{ minor }}.{{ patch }}'),
    };

    semverService.isVersionMatching = function(wildcard, version) {
        var semverParts = version.split('.');
        var wildcardParts = wildcard.split('.');

        var matchingNonMajor = true;
        for (var i = 1; matchingNonMajor && i < semverParts.length; i++) {
            matchingNonMajor = semverParts[i] == wildcardParts[i] || wildcardParts[i] == WILDCARD;
        }

        return semverParts[0] == wildcardParts[0] && matchingNonMajor;
    };

    semverService.removeWildcardVersionParts = function(version) {
        return version.replace(WILDCARD_REGEX, '');
    };

    semverService.normalizeVersion = function(version) {
        if (!version || validVersionRegex.test(version)) {
            return version;
        }

        var semverParts = version.split('.');

        return semverService.semver({
            major: semverParts[0] || WILDCARD,
            minor: semverParts[1] || WILDCARD,
            patch: semverParts[2] || WILDCARD,
        });
    };

    semverService.convertListToWildcardVersions = function(versions) {
        return _.chain(versions)
            .map(function(version) {
                var semVerParts = version.split(".");
                var major = semVerParts[0];
                var minor = semVerParts[1];

                return [
                    semverService.semver({ major: major, minor: WILDCARD, patch: WILDCARD }),
                    semverService.semver({ major: major, minor: minor, patch: WILDCARD })
                ];
            })
            .flatten()
            .uniq()
            .reverse()
            .value();
    };

    semverService.resolveVersion = function(version, stepId, stepCatalogue) {
        version = semverService.normalizeVersion(version);

        if (!version) {
            return stepCatalogue.latestStepVersions[stepId];
        }

        var matcher = _.partial(semverService.isVersionMatching, version);
        var stepVersions = Object.keys(stepCatalogue.steps[stepId]);

        return _.chain(stepVersions)
            .sort()
            .reverse()
            .find(matcher)
            .value();
    };

    return semverService;
});