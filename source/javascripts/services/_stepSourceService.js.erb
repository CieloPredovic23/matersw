(function() {
	"use strict";

	angular.module("BitriseWorkflowEditor").factory("stepSourceService", [
		"$q",
		"requestService",
		"appService",
		"semverService",
		"stepLibSearchService",
		"logger",
		"Step",
		function($q, requestService, appService, semverService, stepLibSearchService, logger, Step) {
			var stepSourceService = {
				defaultLibraryURL: undefined,
				libraries: [],
				localSteps: [],
				gitSteps: []
			};

			var LATEST_VERSION = null;

			var getLibraryForStep = function(step) {
				if (!step.isLibraryStep()) {
					return null;
				}

				var library = _.find(stepSourceService.libraries, {
					url: step.libraryURL
				});

				if (!library) {
					throw new Error("Library not found for step");
				}

				return library;
			};

			var logStepVersionMissing = function(step, requestedVersion, library) {
				logger.warn("Step version could not be resolved", {
					id: step.id,
					version: step.version,
					requestedVersion: requestedVersion,
					stepsLength: Object.keys(library.steps).length,
				});
			};

			var configureStepFromLib = function(step, library) {
				var requestedVersion = semverService.resolveVersion(step.version, step.id, library);
				var stepVersions = library.steps[step.id];
				var shouldLoadOnlyStepIcon = !requestedVersion || !(stepVersions && stepVersions[requestedVersion]);

				if (shouldLoadOnlyStepIcon) {
					requestedVersion = library.latestStepVersions[step.id];
					step.assetUrls(library.steps[step.id][requestedVersion].defaultStepConfig.asset_urls);
				} else {
					step.version = semverService.normalizeVersion(step.version);
					step.defaultStepConfig = library.steps[step.id][requestedVersion].defaultStepConfig;
				}

				if (!step.isConfigured()) {
					logger.warn("Step is not configured", {
						id: step.id,
						version: step.version,
						stepsLength: Object.keys(library.steps).length
					});
				}
			};

			stepSourceService.stepFromCVS = function(cvs) {
				var step = new Step(cvs);

				var idStartIndex = cvs.indexOf("::") != -1 ? cvs.indexOf("::") + 2 : 0;
				var versionStartIndex =
					cvs.lastIndexOf("@") != -1 && cvs.indexOf("::") < cvs.lastIndexOf("@") ? cvs.lastIndexOf("@") + 1 : -1;

				var source =
					idStartIndex > 0 && cvs.slice(0, idStartIndex - 2).length > 0 ? cvs.slice(0, idStartIndex - 2) : null;
				var id = cvs.slice(idStartIndex, versionStartIndex != -1 ? versionStartIndex - 1 : undefined);
				var version =
					versionStartIndex != -1 && versionStartIndex != cvs.length ? cvs.slice(versionStartIndex) : LATEST_VERSION;

				switch (source) {
					case "path":
						if (id.length == 0) {
							throw new Error("<%= data[:strings][:step_source_service][:step_from_cvs][:no_path] %>");
						}

						step.localPath = id;

						var localStep = _.find(stepSourceService.localSteps, {
							localPath: step.localPath
						});

						if (localStep) {
							step.defaultStepConfig = localStep.defaultStepConfig;
						}

						break;
					case "git":
						if (id.length == 0) {
							throw new Error("<%= data[:strings][:step_source_service][:step_from_cvs][:no_git_url] %>");
						}

						step.gitURL = id;
						step.version = version;

						var gitStep = _.find(stepSourceService.gitSteps, {
							gitURL: step.gitURL,
							version: step.version
						});

						if (gitStep) {
							step.defaultStepConfig = gitStep.defaultStepConfig;
						}

						break;
					default:
						if (!source && !stepSourceService.defaultLibraryURL) {
							throw new Error("<%= data[:strings][:step_source_service][:step_from_cvs][:no_library] %>");
						}

						if (id.length == 0) {
							throw new Error("<%= data[:strings][:step_source_service][:step_from_cvs][:no_id] %>");
						}

						step.libraryURL = source != null ? source : stepSourceService.defaultLibraryURL;
						step.id = id;
						step.version = version;

						var library = _.find(stepSourceService.libraries, {
							url: step.libraryURL
						});

						if (!library) {
							break;
						}

						configureStepFromLib(step, library);
				}

				return step;
			};

			stepSourceService.versionsOfStep = function(step) {
				var library;

				try {
					library = getLibraryForStep(step);

					if (!library) {
						return step.isLocal() ? null : [step.version];
					}
				} catch (err) {
					logger.error(err);
					return null;
				}

				return semverService.extractWildcardVersions(step, library);
			};

			stepSourceService.latestVersion = function(step) {
				var library = getLibraryForStep(step);
				return library && library.latestStepVersions[step.id];
			};

			stepSourceService.isLatestStepVersion = function(step) {
				var library = getLibraryForStep(step);

				if (!library) {
					// broken state
					return !step.isLocal();
				}

				var stepVersion = semverService.resolveVersion(step.version, step.id, library);

				if (!stepVersion) {
					logStepVersionMissing(step, step.version, library);
				}

				return stepVersion === stepSourceService.latestVersion(step);
			};

			stepSourceService.changeStepToVersion = function(step, version) {
				var library = getLibraryForStep(step);

				if (!library) {
					return;
				}

				var indexOfVersionInCurrentCVS = step.cvs.lastIndexOf("@") != -1 ? step.cvs.lastIndexOf("@") + 1 : -1;
				if (indexOfVersionInCurrentCVS != -1) {
					step.cvs = step.cvs.slice(0, indexOfVersionInCurrentCVS - 1);
				}

				version = version || semverService.findLatestMajorVersion(step, library);

				step.cvs += "@" + semverService.shortenWildcardVersion(version);
				step.version = version;

				configureStepFromLib(step, library);
			};

			stepSourceService.resolveRequestedStepVersion = function(requestedVersion, step) {
				var library = getLibraryForStep(step);

				if (!library) {
					return requestedVersion;
				}

				var version = semverService.resolveVersion(requestedVersion, step.id, library);

				if (!version) {
					logStepVersionMissing(step, requestedVersion, library);
				}

				return version;
			};

			stepSourceService.loadStepsWithCVSs = function(CVSs, requestConfig) {
				var loadPromises = [];
				var libraryURLs = [];
				var stepLibSearchCVSs = [];
				var error;

				var defaultStepLibUrl = appService.appConfig.default_step_lib_source;
				_.every(CVSs, function(aCVS) {
					var step;
					try {
						step = stepSourceService.stepFromCVS(aCVS);
					} catch (_error) {
						error = _error;

						return false;
					}

					if (step.libraryURL !== undefined) {
						if (step.libraryURL === defaultStepLibUrl) {
							stepLibSearchCVSs.push(aCVS);
						} else {
							libraryURLs.push(step.libraryURL);
						}
					} else if (step.localPath !== undefined) {
						if (requestService.mode == "cli") {
							loadPromises.push(loadStepWithCVS(aCVS, requestConfig));
						}
					} else if (step.gitURL !== undefined) {
						loadPromises.push(
							$q(function(resolve, reject) {
								loadStepWithCVS(aCVS, requestConfig).then(
									function(defaultStepConfig) {
										resolve(defaultStepConfig);
									},
									function(_error) {
										if (requestService.mode == "cli") {
											reject(_error);
										} else {
											logger.error(_error);

											resolve(null);
										}
									}
								);
							})
						);
					}

					return true;
				});

				if (error) {
					logger.error(error);
					return $q.reject(error);
				}

				var stepLibSearchPromise = stepLibSearchService
					.list({
						stepIDs: stepLibSearchCVSs.map(function(cvs) {
							return cvs.split("@").shift();
						}),
						includeInputs: true
					})
					.then(function(steps) {
						addStepsToDefaultLibrary(steps);
					});

				loadPromises.push(stepSourceService.loadLibrariesWithURLs(libraryURLs, requestConfig), stepLibSearchPromise);

				return $q.all(loadPromises);
			};

			function addStepsToDefaultLibrary(steps) {
				Object.keys(steps).forEach(function(stepId) {
					var stepVersions = {};
					var latestStepVersion;
					Object.values(steps[stepId].versions).forEach(function(stepVersion) {
						var step = new Step(stepVersion.cvs);
						latestStepVersion = stepVersion.latest_version_number;
						step.libraryURL = stepSourceService.defaultLibraryURL;
						step.id = stepVersion.id;
						step.version = stepVersion.version;
						step.defaultStepConfig = Object.assign({}, stepVersion, stepVersion.step);
						stepVersions[stepVersion.version] = step;
					});

					var library;
					library = stepSourceService.libraries.find(function(library) {
						return library.url === stepSourceService.defaultLibraryURL;
					});

					if (!library) {
						library = {
							url: stepSourceService.defaultLibraryURL,
							steps: {},
							latestStepVersions: {}
						};

						stepSourceService.libraries.push(library);
					}

					library.steps[stepId] = Object.assign({}, library.steps[stepId], stepVersions);
					library.latestStepVersions[stepId] = latestStepVersion;
				});
			}

			stepSourceService.loadStepVersions = function(stepId) {
				// This only works for official Bitrise steps
				return stepLibSearchService.getStepVersions(stepId).then(function(step) {
					var steps = {};
					steps[stepId] = step;
					addStepsToDefaultLibrary(steps);
				});
			};

			function loadStepWithCVS(cvs, requestConfig) {
				var step;
				try {
					step = stepSourceService.stepFromCVS(cvs);

					if (
						step.libraryURL !== undefined &&
						_.find(stepSourceService.libraries, {
							url: step.libraryURL
						})
					) {
						return $q.when();
					}

					if (
						step.localPath !== undefined &&
						_.find(stepSourceService.localSteps, {
							localPath: step.localPath
						})
					) {
						return $q.when();
					}

					if (
						step.gitURL !== undefined &&
						_.find(stepSourceService.gitSteps, {
							gitURL: step.gitURL,
							version: step.version
						})
					) {
						return $q.when();
					}
				} catch (error) {
					logger.error(error);
					return $q.reject(error);
				}

				return requestService.stepConfigFetch(step, requestConfig).then(function(defaultStepConfig) {
					step.defaultStepConfig = defaultStepConfig;
					if (step.localPath) {
						stepSourceService.localSteps.push(step);
					} else if (step.gitURL) {
						stepSourceService.gitSteps.push(step);
					} else {
						// TODO: implement single library step load if neccessary
						logger.warn("Single library step load not implemented");
					}
				});
			}

			function normalizeStepLib(steps, libraryURL) {
				var library = {
					url: libraryURL
				};

				var stepIDs = _.keys(steps).sort();

				library.steps = {};
				library.latestStepVersions = {};
				_.each(stepIDs, function(aStepID) {
					var stepData = steps[aStepID];
					var latestVersion =
						stepData.latest_version_number || Object.values(stepData.versions).shift().latest_version_number;

					library.steps[aStepID] = {};
					library.latestStepVersions[aStepID] = latestVersion;
					library.steps[aStepID] = _.mapObject(stepData.versions, function(aStepConfig, version) {
						var cvs = aStepID + "@" + version;

						var step = stepSourceService.stepFromCVS(cvs);
						step.defaultStepConfig = aStepConfig;

						return step;
					});
				});

				return library;
			}

			stepSourceService.loadLatestOfficialSteps = function(projectType) {
				var projectTypes = projectType && [projectType];

				return stepLibSearchService
					.list({ latestOnly: true, projectTypes: projectTypes, includeDeprecated: false })
					.then(function(steps) {
						addStepsToDefaultLibrary(steps);
					});
			};

			stepSourceService.searchOfficialSteps = function(query) {
				return stepLibSearchService
					.fuzzySearch({ query: query, latestOnly: true, attributesToRetrieve: ["id", "version", "cvs"] })
					.then(function(steps) {
						return Object.keys(steps);
					});
			};

			stepSourceService.loadLibrariesWithURLs = function(libraryURLs, requestConfig) {
				return $q(function(resolve, reject) {
					var notLoadedLibraryURLs = _.reject(_.uniq(libraryURLs), function(aLibraryURL) {
						return _.find(stepSourceService.libraries, {
							url: aLibraryURL
						});
					});

					if (notLoadedLibraryURLs.length == 0) {
						resolve();

						return;
					}

					return requestService.libraryFetch(notLoadedLibraryURLs, requestConfig).then(
						function(data) {
							_.each(data, function(aLibraryData, aLibraryURL) {
								try {
									var library = normalizeStepLib(aLibraryData.steps, aLibraryURL);

									stepSourceService.libraries.push(library);

									resolve();
								} catch (error) {
									logger.error(error);
									reject(new Error("<%= data[:strings][:step_source_service][:load_library][:default_error] %>"));
								}
							});
						},
						function(error) {
							logger.error(error);
							reject(error);
						}
					);
				});
			};

			return stepSourceService;
		}
	]);
})();
