@import "default";
@import "constants";

.tab-triggers {

	ul.triggers {
		margin-top: 1em;
	}
	.type-filter {
		$border: 1px solid $def-purple;

		@include display-flex;
		border: $border;
		@include border-radius($def-radius);

		.type {
			@include flex-grow(1);
			position: relative;
			color: $def-purple;

			input[type="radio"] {
				@include position(absolute, 0, 0);
				@include size(100%);
				margin: 0;
				opacity: 0;
			}

			label {
				display: block;
				padding: 12px 15px;
				text-align: center;
				font-size: 13px;
				font-weight: 400;
				color: $def-purple;
				text-transform: uppercase;
				@include transition(color $def-transition_duration, background-color $def-transition_duration);
			}

			input[type="radio"]:checked + label, input[type="radio"]:hover + label, input[type="radio"]:focus + label {
				background-color: $def-purple;
				color: white;
			}
		}

		.type:not(:first-child) {
			border-left: $border;
		}
	}

	ul {
		$entry_height: 60px;
		$deletebutton_size: $entry_height;
		$spacing: 10px;

		padding-left: 0;
		list-style: none;

		li {
			$manage_trigger-border: 1px solid $def-lightgrey;
			$manage_trigger-border_radius: $def-radius;

			position: relative;
			padding-right: $deletebutton_size;

			button.add-trigger {
				text-transform: uppercase;

				&:before {
					content: "+";
					margin-right: 8px;
				}
			}

			button.add-trigger, .trigger .trigger-info {
				@include box-sizing(border-box);
				width: 50%;
			}

			.add-trigger + .trigger, .trigger + .add-trigger {
				margin-top: $spacing;
			}

			.trigger {
				$arrow-reserved_width: 80px;

				@include display-flex;

				.manage-trigger .trigger-infos, button.select-trigger {
					background-color: $def-lightgrey;

					.trigger-info {
						height: $entry_height;
						@include padding-x(15px);
					}

					&:not(.ninja) > svg {
						$width: 10px;

						@include size($width, 16px);
						@include margin-x(0.5 * ($arrow-reserved_width - $width));
						vertical-align: middle;
						@include transform(rotate(-90deg));
						fill: $def-darkgrey;
					}
				}

				.manage-trigger {
					display: flex;
					flex-wrap: wrap;
					width: 100%;

					.trigger-infos {
						@include display-flex;
						@include align-items(center);
						@include border-radius($manage_trigger-border_radius);
						overflow: hidden;
						flex: 1;

						.pattern {
							@include flex-shrink(0);
							border: $manage_trigger-border;
							border-right: none;
							@include border-left-radius($manage_trigger-border_radius);
							background-color: white;

							label {
								@include order(1);
								@include flex-shrink(0);
								font-size: 13px;
								text-transform: uppercase;
								color: $def-grey;
								@include transition(color $def-transition_duration);

								&:after {
									content: ":";
									margin-right: 15px;
								}
							}

							input.value {
								@include order(2);
								@include flex-grow(1);
								@include align-self(stretch);
								border: none;
								font-size: 15px;
							}

							input.value.ng-not-empty + label {
								color: $def-green;
							}
						}

						.pattern.push, .pattern.tag {
							@include display-inline-flex;
							@include align-items(center);
						}

						.pattern.pull-request {
							@include display-inline-flex;
							@include flex-direction(column);
							@include padding-x(0);
							width: calc(50% + 169px);
							line-height: 1.5;

							.source, .target {
								@include flex-grow(1);
								@include display-flex;
								@include align-items(center);
								@include padding-x(20px);

								label {
									width: 8.5rem;
								}
							}

							&:not(.ninja) > :not(:last-child) {
								border-bottom: $manage_trigger-border;
							}
						}

						&:not(.ninja) > svg {
							@include flex-shrink(0);
						}

						select.workflow {
							border: $manage_trigger-border;
							border-left: none;
							@include border-left-radius(0);
							@include border-right-radius($manage_trigger-border_radius);
							width: calc(50% - 169px);
						}

						&.stacked {
							border-top-right-radius: 0;
							border-bottom-right-radius: 0;

							select {
								border-top-right-radius: 0;
								border-bottom-right-radius: 0;
							}
						}
					}

					.draft-pr {
						flex: 0;
						border: $manage_trigger-border;
						border-left: 0;
					}

					.actions {
						@include display-flex;
						width: 50%;
						margin-top: $spacing;
						flex-basis: 100%;
						margin-right: 50%;

						button {
							@include flex-grow(1);
						}

						button:not(:last-child) {
							margin-right: $spacing;
						}
					}
				}

				button.select-trigger {
					$transition_duration: $def-transition_duration;

					width: 100%;
					overflow: hidden;
					@include border-radius($def-radius);
					@include transition(background-color $transition_duration);

					&.stacked {
						border-top-right-radius: 0;
						border-bottom-right-radius: 0;

						span.pull-request {
							width: calc(50% + 169px);
						}

						span.workflow {
							width: calc(50% - 169px);
						}
					}

					span.trigger-info {
						@include display-inline-flex;
						@include flex-direction(column);
						@include justify-content(center);
						@include box-sizing(border-box);

						vertical-align: middle;
						text-align: left;
						@include transition(background-color $transition_duration);

						strong.value {
							@include ellipsis-oneliner;
						}
					}

					span.pattern {
						$icon_size: 40px;

						position: relative;
						padding-left: $icon_size;
						background-color: $def-verylightgrey;

						&:before {
							content: "";
							@include position(absolute, 0, null, null, 0);
							@include size($icon_size, 100%);
							background-repeat: no-repeat;
							background-position: center;
							@include transition(background-color $transition_duration);
						}

						&.push:before {
							background-image: background_image_from_svg_content('<%= svg("trigger/icon-push") %>');
							background-size: auto 24px;
						}

						&.pull-request:before {
							background-image: background_image_from_svg_content('<%= svg("trigger/icon-pull_request") %>');
							background-size: auto 22px;
						}

						&.tag:before {
							background-image: background_image_from_svg_content('<%= svg("trigger/icon-tag") %>');
							background-size: auto 20px;
						}

						span.label {
							color: $def-mediumdarkgrey;
						}
					}

					span.pull-request {

						span.source, span.target {
							@include display-flex;

							span.label {
								@include flex-shrink(0);
								@include box-sizing(border-box);
								width: 120px;
								margin-right: 5px;
								@include border-radius($def-radius);
								@include padding-y(2px);
								text-align: center;
								font-size: 13px;
								text-transform: uppercase;
								font-weight: 400;
								background-color: $def-purple;
								color: white;
							}
						}

						span.source + span.target {
							margin-top: 2px;
						}
					}

					span.workflow {
						margin-left: - $arrow-reserved_width;
						border-left: $arrow-reserved_width solid transparent;
						background-color: $def-green-verylight;
						background-clip: padding-box;
						color: $def-green;
					}
				}

				button.select-trigger:hover, button.select-trigger:focus {
					background-color: $def-grey;

					.pattern {
						background-color: $def-lightgrey;
					}

					.workflow {
						background-color: $def-green-light;

						&:before {
							background-color: $def-grey;
						}
					}
				}

				button.delete {
					$width: $deletebutton_size;

					@include position(relative, null, 0, 0, $width);
					@include flex-shrink(0);
					width: $width;
					margin-left: - $width;

					svg {
						@include size(18px, 19px);
						fill: $def-grey;
						@include transition(fill $def-transition_duration);
					}
				}

				button.delete:hover, button.delete:focus {

					svg {
						fill: $def-danger;
					}
				}

				.draft-pr {
					display: flex;
					align-items: center;
					gap: 8px;
					justify-content: center;
					text-wrap: nowrap;
					padding: 16px;
					border: 1px solid $def-green-verylight;
					border-left: none;
					@include border-left-radius(0);
					@include border-right-radius($manage_trigger-border_radius);
					height: 60px;
				}
			}

			@include media-below-mid {

				button.add-trigger {
					width: 100%;
				}

				.trigger {
					flex-wrap: wrap;

					.manage-trigger .trigger-infos, button.select-trigger {

						.trigger-info {
							width: auto;
						}

						&:not(.ninja) > svg {
							display: block;
							margin: 15px auto;
							@include transform(rotate(0deg));
						}
					}

					.manage-trigger {
						flex-direction: column;

						.trigger-infos {
							@include flex-direction(column);
							@include align-items(stretch);
							flex-grow: 1;
							order: 1;

							.pattern {
								border: $manage_trigger-border;
								border-bottom: none;
								@include border-top-radius($manage_trigger-border_radius);
								@include border-bottom-radius(0);
							}

							select.workflow {
								border: $manage_trigger-border;
								border-top: none;
								@include border-top-radius(0);
								@include border-bottom-radius($manage_trigger-border_radius);
								width: 100%;
							}

							&.stacked {
								@include border-radius($def-radius);
								border-bottom-left-radius: 0;
								border-bottom-right-radius: 0;

								select {
									border-bottom-left-radius: 0;
									border-bottom-right-radius: 0;
								}
							}
						}

						.trigger-info.pattern.pull-request {
							width: 100%;
						}

						.draft-pr {
							order: 2;
							border: $manage_trigger-border;
							border-top: 0;
						}

						.actions {
							flex-basis: content;
							margin: 0;
							margin-top: 10px;
							order: 3;
							width: auto;
						}
					}

					button.select-trigger {
						flex-grow: 1;

						span.trigger-info {
							@include display-flex;
						}

						span.workflow {
							margin-left: 0;
							border-left: none;
						}

						&.stacked {
							@include border-radius($def-radius);
							border-bottom-left-radius: 0;
							border-bottom-right-radius: 0;
							
							span.trigger-info {
								width: 100%;
							}
						}
					}

					.draft-pr {
						border: 1px solid $def-green-verylight;
						@include border-radius($manage_trigger-border_radius);
						border-top-left-radius: 0px;
						border-top-right-radius: 0px;
						order: 3;
						flex-basis: "100%";
						flex-grow: 1;
					}

					button.delete {
						order: 2;
					}
				}
			}

			@include media-below-small {

				.trigger {

					.manage-trigger {

						.trigger-infos {

							.pattern.push, .pattern.tag, .pattern.pull-request .source, .pattern.pull-request .target {
								@include flex-direction(column);
								@include align-items(flex-start);
								@include padding-y(12px);

								input.value {
									height: 32px;
								}
							}

							.pattern {
								height: auto;
							}
						}
					}
				}
			}
		}

		li:not(:last-child) {
			margin-bottom: $spacing;
		}
	}

	ul.drag-in-progress li {

		button.add-trigger {
			visibility: hidden;
		}

		.trigger {

			button.delete {
				visibility: hidden;
			}
		}
	}

	ul.drag-in-progress li.dragged-element {
		z-index: $zindex-dragged_element;
	}
}
