@import "default";
@import "constants";

// Major layouts

@import "_index";
@import "_tab-workflows";
@import "_tab-code_signing";
@import "_tab-code_signing-certificates";
@import "_auto_code_signing";
@import "_tab-secrets";
@import "_tab-env_vars";
@import "_tab-triggers";
@import "_tab-stack";
@import "_tab-yml";
@import "_workflows-workflow_description";
@import "_add_step_sidebar";
@import "_add_step_sidebar_step";

// Common elements

@import "_rebo";
@import "_cardo";
@import "_furto";
@import "_popup";
@import "_popover";
@import "_notification-progress-indicator";
@import "_file_uploader";
@import "_order-by-drag";
@import "_clear-value";

@import "~monaco-editor/min/vs/editor/editor.main";

// Fonts

@font-face {
	font-family: "TTNorms";
	src: url("../fonts/35C30F_7_0.eot");
	src: url("../fonts/35C30F_7_0.eot?#iefix") format("embedded-opentype"),
		url("../fonts/35C30F_7_0.woff2") format("woff2"), url("../fonts/35C30F_7_0.woff") format("woff"),
		url("../fonts/35C30F_7_0.ttf") format("truetype"), url("../fonts/35C30F_7_0.svg#wf") format("svg");
	font-weight: 100;
}

@font-face {
	font-family: "TTNorms";
	src: url("../fonts/35C30F_C_0.eot");
	src: url("../fonts/35C30F_C_0.eot?#iefix") format("embedded-opentype"),
		url("../fonts/35C30F_C_0.woff2") format("woff2"), url("../fonts/35C30F_C_0.woff") format("woff"),
		url("../fonts/35C30F_C_0.ttf") format("truetype"), url("../fonts/35C30F_C_0.svg#wf") format("svg");
	font-weight: 200;
}

@font-face {
	font-family: "TTNorms";
	src: url("../fonts/35C30F_F_0.eot");
	src: url("../fonts/35C30F_F_0.eot?#iefix") format("embedded-opentype"),
		url("../fonts/35C30F_F_0.woff2") format("woff2"), url("../fonts/35C30F_F_0.woff") format("woff"),
		url("../fonts/35C30F_F_0.ttf") format("truetype"), url("../fonts/35C30F_F_0.svg#wf") format("svg");
	font-weight: 400;
}

@font-face {
	font-family: "TTNorms";
	src: url("../fonts/35C30F_D_0.eot");
	src: url("../fonts/35C30F_D_0.eot?#iefix") format("embedded-opentype"),
		url("../fonts/35C30F_D_0.woff2") format("woff2"), url("../fonts/35C30F_D_0.woff") format("woff"),
		url("../fonts/35C30F_D_0.ttf") format("truetype"), url("../fonts/35C30F_D_0.svg#wf") format("svg");
	font-weight: 500;
}

@font-face {
	font-family: "TTNorms";
	src: url("../fonts/35C30F_1_0.eot");
	src: url("../fonts/35C30F_1_0.eot?#iefix") format("embedded-opentype"),
		url("../fonts/35C30F_1_0.woff2") format("woff2"), url("../fonts/35C30F_1_0.woff") format("woff"),
		url("../fonts/35C30F_1_0.ttf") format("truetype"), url("../fonts/35C30F_1_0.svg#wf") format("svg");
	font-weight: 700;
}

@font-face {
	font-family: "TTNorms";
	src: url("../fonts/35C30F_3_0.eot");
	src: url("../fonts/35C30F_3_0.eot?#iefix") format("embedded-opentype"),
		url("../fonts/35C30F_3_0.woff2") format("woff2"), url("../fonts/35C30F_3_0.woff") format("woff"),
		url("../fonts/35C30F_3_0.ttf") format("truetype"), url("../fonts/35C30F_3_0.svg#wf") format("svg");
	font-weight: 900;
}

@font-face {
	font-family: "SourceCodePro";
	font-style: normal;
	font-weight: 200;
	src: url("../fonts/SourceCodePro-ExtraLight.ttf") format("truetype");
}
@font-face {
	font-family: "SourceCodePro";
	font-style: normal;
	font-weight: 300;
	src: url("../fonts/SourceCodePro-Light.ttf") format("truetype");
}
@font-face {
	font-family: "SourceCodePro";
	font-style: normal;
	font-weight: 400;
	src: url("../fonts/SourceCodePro-Regular.ttf") format("truetype");
}
@font-face {
	font-family: "SourceCodePro";
	font-style: normal;
	font-weight: 500;
	src: url("../fonts/SourceCodePro-Medium.ttf") format("truetype");
}
@font-face {
	font-family: "SourceCodePro";
	font-style: normal;
	font-weight: 600;
	src: url("../fonts/SourceCodePro-Semibold.ttf") format("truetype");
}
@font-face {
	font-family: "SourceCodePro";
	font-style: normal;
	font-weight: 700;
	src: url("../fonts/SourceCodePro-Bold.ttf") format("truetype");
}
@font-face {
	font-family: "SourceCodePro";
	font-style: normal;
	font-weight: 900;
	src: url("../fonts/SourceCodePro-Black.ttf") format("truetype");
}

// Basic settings

:focus {
	outline: none;
}

input,
textarea,
select {
	font-family: inherit;
}

input::-moz-focus-inner,
button::-moz-focus-inner,
select::-moz-focus-inner {
	border: 0;
	padding: 0;
}

select:-moz-focusring {
	color: rgba(0, 0, 0, 0);
	text-shadow: 0 0 0 black;
}

html {
	@include display-flex;
	@include flex-direction(column);
	width: 100%;
	min-height: 100%;
}

body {
	@include flex-grow(1);
	@include display-flex;
	@include flex-direction(column);
	@include size(100%);
	@include min-size($screen-minimum, $screen-small);
	margin: 0;
	-webkit-font-smoothing: subpixel-antialiased;
	@include TTNormsWithFallback;
}

button,
input[type="submit"],
input[type="radio"] {
	cursor: pointer;

	&:disabled {
		cursor: not-allowed;
	}
}

button {
	margin: 0;
	border: none;
	@include border-radius(0);
	padding: 0;
	font: inherit;
	color: inherit;
	background-color: transparent;
}

input[type="submit"] {
	@include appearance(none);
}

select,
.mak {
	$select-horizontalpadding: 12px;
	$arrow_width: 8px;

	@include appearance(none);
	margin: 0;
	border: 1px solid $def-mediumlightgrey;
	@include border-radius($def-radius);
	padding: 7px $select-horizontalpadding;
	padding-right: $select-horizontalpadding + $arrow_width + $select-horizontalpadding;
	text-align: left;
	font-size: 16px;
	@include transition(background-color $def-transition_duration);
	background-color: white;
	background-image: url("../images/arrow-down.svg");
	background-size: $arrow_width auto;
	background-position: right $select-horizontalpadding center;
	background-repeat: no-repeat;
	cursor: pointer;
}

select:hover,
select:focus,
.mak:hover,
.mak:focus {
	background-color: $def-verylightgrey;
}

.checkbox {
	$transition_duration: $def-transition_duration;

	z-index: $zindex-checkbox;
	position: relative;
	@include size(46px, 22px);
	@include border-radius($def-radius);
	overflow: hidden;

	&:before {
		z-index: -2;
		content: "";
		@include position(absolute, 0, 0);
		@include size(100%);
		background-color: $def-lightgrey;
	}

	input[type="checkbox"] {
		display: block;
		@include size(100%);
		@include appearance(none);
		margin: 0;
		opacity: 0;
		cursor: pointer;
	}

	.checkbox-svg-wrapper {
		z-index: -1;
		@include position(absolute, 0, 0);
		@include size(50%, 100%);
		@include transition(
			right $transition_duration,
			background-color $transition_duration,
			opacity $transition_duration
		);
		background-color: $def-green;

		svg[check],
		svg[cross] {
			position: absolute;
			@include transition(opacity $transition_duration);
			fill: white;
		}

		svg[check] {
			@include size(24px, 24px);
			top: -1px;
			left: 0;
		}

		svg[cross] {
			@include size(24px, 24px);
			top: -1px;
			left: 0;
		}
	}

	input[type="checkbox"]:not(:checked) + .checkbox-svg-wrapper {
		right: 50%;
		background-color: $def-danger;
	}

	input[type="checkbox"]:disabled + .checkbox-svg-wrapper {
		opacity: 0.5;
	}

	input[type="checkbox"]:not(:checked) + .checkbox-svg-wrapper svg[check],
	input[type="checkbox"]:checked + .checkbox-svg-wrapper svg[cross] {
		opacity: 0;
	}

	input[type="checkbox"]:checked:not(:disabled):hover + .checkbox-svg-wrapper,
	input[type="checkbox"]:checked:not(:disabled):focus + .checkbox-svg-wrapper {
		background-color: $def-green-shade;
	}

	input[type="checkbox"]:not(:checked):not(:disabled):hover + .checkbox-svg-wrapper,
	input[type="checkbox"]:not(:checked):not(:disabled):focus + .checkbox-svg-wrapper {
		background-color: $def-danger-shade;
	}

	&.small {
		@include size(36px, 16px);

		.checkbox-svg-wrapper {
			svg[check] {
				@include size(10px, 9px);
				top: 3px;
				left: 4px;
			}

			svg[cross] {
				@include size(8px, 8px);
				top: 4px;
				left: 5px;
			}
		}
	}
}

.eye-checkbox {
	$transition_duration: $def-transition_duration;

	z-index: $zindex-checkbox;
	position: relative;
	@include size(32px, 26px);
	@include border-radius($def-radius);
	overflow: hidden;

	input[type="checkbox"] {
		@include size(100%);
		@include appearance(none);
		margin: 0;
		opacity: 0;
		cursor: pointer;
	}

	.checkbox-svg-wrapper {
		z-index: -1;
		@include position(absolute, 0, 0);
		@include size(100%);
		opacity: 0.6;

		span.eye,
		span.crossed-eye {
			@include position(absolute, 50%, null, null, 50%);
			@include transform(translateX(-50%) translateY(-50%));
			@include transition(opacity $transition_duration);

			svg {
				display: block;
				@include size(22px, 14px);
				fill: $def-mediumdarkgrey;
			}
		}
	}

	input[type="checkbox"]:not(:checked) + .checkbox-svg-wrapper {
		span.eye {
			display: none;
		}
	}

	input[type="checkbox"]:checked + .checkbox-svg-wrapper {
		span.crossed-eye {
			display: none;
		}
	}

	input[type="checkbox"]:hover + .checkbox-svg-wrapper,
	input[type="checkbox"]:focus + .checkbox-svg-wrapper {
		opacity: 1;
	}
}

.toggleable-info {
	$horizontalpadding-basic: $cardo-horizontalpadding;
	$horizontalpadding-additional: 30px;
	$verticalpadding: $cardo-verticalpadding;
	$arrow-width: 16px;

	border: 1px solid $def-green;
	@include border-radius($cardo-borderradius);
	font-size: 16px;
	font-weight: 400;
	color: $def-green;
	background-color: $def-green-ultralight;

	h2.info-heading {
		position: relative;
		@include margin-y(0);
		padding: $verticalpadding $horizontalpadding-basic;
		font-size: inherit;
		font-weight: inherit;

		.content {
			@include display-flex;
			margin-right: $horizontalpadding-basic + $arrow-width;

			.icon {
				$icon-width: 20px;
				margin-right: $horizontalpadding-additional - $icon-width;

				svg {
					display: block;
					width: $icon-width;
					height: 20px;
					fill: $def-green;
				}
			}
		}

		.toggle {
			@include position(absolute, 0, 0);
			@include size(100%);
			padding: $verticalpadding $horizontalpadding-basic;

			svg {
				display: block;
				width: $arrow-width;
				height: 8px;
				margin-left: auto;
				fill: $def-green;
				@include transition(transform $def-transition_duration);
			}

			&.open svg {
				@include transform(rotate(180deg));
			}
		}
	}

	ul {
		@include margin-y(0);
		border-top: 1px solid $def-green;
		padding: $verticalpadding $horizontalpadding-basic;
	}
}

[sanitized-markdown] {
	a {
		color: $def-green;

		&:not(:hover):not(:focus) {
			text-decoration: none;
		}
	}

	code {
		@include SourceCodeProWithFallback;
		color: black;
		background-color: $def-verylightgrey;
	}

	&.oneliner {
		@include ellipsis-oneliner;

		* {
			display: inline;
			white-space: nowrap;
			font-size: inherit;
			font-weight: inherit;
		}

		p {
			color: inherit;
			text-decoration: none;
		}

		ul,
		ol {
			padding-left: 0;
			list-style: none;

			li {
				display: inline;

				&:after {
					content: ", ";
				}
			}
		}

		pre {
			white-space: nowrap !important;
		}
	}
}

// Common classes

.vertical-scroll {
	overflow-y: auto;
}
