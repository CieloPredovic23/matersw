article.editor[ng-controller="EditorController as editorCtrl"]
	p.progress-indicator[progress-model="editorCtrl.loadWorkflowsProgress"]
	div[ng-if="editorCtrl.loadWorkflowsProgress.isIdle && editorCtrl.selectedWorkflow"]
		ul.run-workflows[ng-repeat="runWorkflows in [editorCtrl.selectedWorkflow.beforeRunWorkflows, editorCtrl.selectedWorkflow.afterRunWorkflows]" ng-init="isBeforeRun = runWorkflows == editorCtrl.selectedWorkflow.beforeRunWorkflows" ng-class="isBeforeRun ? 'before-run' : 'after-run'"]
			li[ng-repeat="workflow in runWorkflows track by $index + '-' + workflow.id"]
				button[ng-click="editorCtrl.selectedWorkflow = workflow"]
					span.uppercase[ng-bind="workflow.id"]
					span< == data[:strings][:editor][:run_workflows][:postfix]
		section.manage-workflows
			select[ng-options="workflow.id for workflow in editorCtrl.workflows" ng-model="editorCtrl.workflowSelectedGetterSetter" ng-model-options="{getterSetter: true}"]
			button[ng-click="editorCtrl.addWorkflowSelected()"] == data[:strings][:editor][:add_workflow][:action]
			button[ng-click="editorCtrl.manageWorkflowEnvVarsSelected()"] == data[:strings][:editor][:manage_workflow_env_vars]
			button[ng-click="editorCtrl.addRunWorkflowSelected(false)"] == data[:strings][:editor][:add_workflow_after]
			button[ng-click="editorCtrl.addRunWorkflowSelected(true)"] == data[:strings][:editor][:add_workflow_before]
			button[ng-click="editorCtrl.deleteWorkflowSelected()" ng-disabled="editorCtrl.workflows.length == 1"] == data[:strings][:editor][:delete_workflow]
		section.manage-workflow
			ul.steps[order-by-drag="{models: editorCtrl.selectedWorkflow.steps, draggableSelector: ':not(.pseudo-step)'}"]
				li[ng-repeat="step in editorCtrl.stepsIncludingPseudoSteps()" ng-class="{'selected': step == editorCtrl.selectedStep, 'pseudo-step': editorCtrl.stepType(step) == 'pseudo-step'}"]
					button.add-step[ng-click="editorCtrl.addStepSelectedAtIndex($index)" ng-if="!$first"] == data[:strings][:editor][:steps][:add][:action]
					button.step[ng-click="editorCtrl.stepSelected(step)"]
						span.icon[ng-style="editorCtrl.stepType(step) == 'pseudo-step' ? {} : {'background-image': (step | normalizedStepIconURL | backgroundImagePropertyValue)}"]
						span.info
							span.title[ng-bind="editorCtrl.stepDisplayName(step)"]
							span[ng-if="editorCtrl.stepType(step) == 'bitrise-steplib-step'"]
								strong.verified[ng-if="step.isVerified()"] == data[:strings][:editor][:steps][:verified]
								em.version[ng-bind="step.version"]
			aside.step-details[ng-if="step = editorCtrl.selectedStep"]
				div.pseudo-step-details[ng-if="editorCtrl.stepType(step) == 'pseudo-step'"]
					h2.title[ng-bind="editorCtrl.stepDisplayName(step)"]
					/ TODO: Add pseudo-step content here
				p.notification.notice[ng-if="editorCtrl.stepType(step) == 'non-bitrise-steplib-step'"] == data[:strings][:editor][:steps][:non_bitrise_steplib_step_info]
				p.notification.error[ng-if="editorCtrl.stepType(step) == 'errorous-step'"] == data[:strings][:editor][:steps][:cvs_error]
				div.bitrise-steplib-step-details[ng-if="editorCtrl.stepType(step) == 'bitrise-steplib-step'"]
					header.manage-step
						div[ng-if="!editorCtrl.renamedStep"]
							h2.title[ng-bind="step.title()"]
							strong.verified[ng-if="step.isVerified()"] == data[:strings][:editor][:steps][:verified]
							button[ng-click="editorCtrl.renameStepSelected()"] == data[:strings][:editor][:steps][:rename]
						div[ng-if="editorCtrl.renamedStep"]
							input[type="text" ng-model="editorCtrl.renamedStepTitle"]
							button[ng-click="editorCtrl.renameStepConfirmed()"] == data[:strings][:editor][:steps][:rename_confirm]
							button[ng-click="editorCtrl.renamedStepCancelled()"] == data[:strings][:editor][:steps][:rename_cancel]
						aside
							button.clone[ng-click="editorCtrl.cloneStepSelected()"] == data[:strings][:editor][:steps][:clone]
							a.source[href="{{ step.sourceURL() }}" target="_blank" ng-class="step | stepSourceCSSClass"] == data[:strings][:editor][:steps][:source]
							button.delete[ng-click="editorCtrl.deleteStepSelected()"] == data[:strings][:editor][:steps][:delete]
					section.description[ng-if="step.description() !== undefined" ng-class="{'open': editorCtrl.shouldShowStepDescription}"]
						p[ng-bind-html="step.description()"]
						button[ng-click="editorCtrl.shouldShowStepDescription = true"] == data[:strings][:editor][:steps][:show_description]
					section.version
						label[for="selected-step-version-select"] == data[:strings][:editor][:steps][:version]
						select#selected-step-version-select[ng-options="(version ? version : '#{ data[:strings][:editor][:steps][:always_latest] }') for version in [null].concat(bitriseSteplibService.versionsOfStep(step))" ng-model="editorCtrl.selectedStepRequestedVersion" ng-change="bitriseSteplibService.changeStepToVersion(step, editorCtrl.selectedStepRequestedVersion)"]
					section.always-run[ng-if="step.isAlwaysRun() !== undefined"]
						label[for="selected-step-is-always-run-checkbox"] == data[:strings][:editor][:steps][:is_always_run]
						input#selected-step-is-always-run-checkbox[type="checkbox" ng-model="step.isAlwaysRun" ng-model-options="{getterSetter: true}"]
					section.inputs
						h3 == data[:strings][:editor][:inputs][:header]
						ul
							li[ng-repeat="defaultInputConfig in step.defaultStepConfig.inputs" ng-init="input = editorCtrl.inputFromStepDefaultInputConfig(step, defaultInputConfig); id = input.key()"]
								div.manage-input[ng-if="input == editorCtrl.selectedInput"]
									h4.title[ng-bind="input.title()"]
									button[ng-click="editorCtrl.insertVariableSelected()"] == data[:strings][:editor][:inputs][:insert_variable][:action]
									textarea[ng-model="input.value" ng-model-options="{getterSetter: true}" ng-blur="editorCtrl.inputBlurred($event)"]
									input[type="checkbox" ng-model="input.isExpand" ng-model-options="{getterSetter: true}" id="{{ id }}"]
									label[for="{{ id }}"]
										span == data[:strings][:editor][:inputs][:replace_variables_in_input]
										em == string_with_urls(data[:strings][:editor][:inputs][:replace_variables_in_input_learn_more], [data[:routes][:devcenter][:step_inputs]])
									button[ng-click="editorCtrl.inputSelected(null)"] == data[:strings][:editor][:inputs][:close]
								button[ng-if="input != editorCtrl.selectedInput" ng-click="editorCtrl.inputSelected(input)"]
									span.title[ng-bind="input.title() + ':'"]
									span.key[ng-bind="input | prettifiedVariableKey"]
									span.uppercase == data[:strings][:editor][:inputs][:change]
					section.outputs
						h3 == data[:strings][:editor][:outputs][:header]
						p[ng-if="!step.defaultStepConfig.outputs"] == data[:strings][:editor][:outputs][:no_outputs]
						ul[ng-if="step.defaultStepConfig.outputs"]
							li[ng-repeat="defaultOutputConfig in step.defaultStepConfig.outputs" ng-init="output = new Variable(undefined, defaultOutputConfig);"]
								strong[ng-bind="output | prettifiedVariableKey"]
								p[ng-bind="output.description() ? output.description() : '#{ data[:strings][:editor][:outputs][:no_description] }'"]
					button[ng-click="editorCtrl.deleteStepSelected()"] == data[:strings][:editor][:steps][:delete]
		popup[model="editorCtrl.workflowEnvVarsPopup"]
			.popup-body-manage-workflow-env-vars.vertical-scroll.white
				p.progress-indicator[progress-model="editorCtrl.workflowEnvVarsPopup.parameters.templateLoadProgress"]
				ng-include[ng-if="editorCtrl.workflowEnvVarsPopup.isVisible" src="'#{ template_path(data[:routes][:templates][:env_var_editor]) }'" onload="editorCtrl.workflowEnvVarsPopup.parameters.templateLoadProgress.success()"]
		popup[model="editorCtrl.addWorkflowPopup"]
			.popup-body-add-workflow.vertical-scroll.white
				p == data[:strings][:editor][:add_workflow][:specify_id]
				input[type="text" ng-model="editorCtrl.addWorkflowPopup.parameters.workflowID"]
				p
					em == data[:strings][:editor][:add_workflow][:new_workflow_info]
				button[ng-click="editorCtrl.addWorkflow()" ng-disabled="editorCtrl.addWorkflowPopup.parameters.workflowID.length == 0 || (editorCtrl.workflows | filter: { id: editorCtrl.addWorkflowPopup.parameters.workflowID } : true).length > 0"] == data[:strings][:editor][:add_workflow][:action]
		popup[model="editorCtrl.addRunWorkflowPopup"]
			.popup-body-add-run-workflow.vertical-scroll.white
				p[ng-if="editorCtrl.availableRunWorkflows().length == 0"]
					span[ng-if="editorCtrl.addRunWorkflowPopup.parameters.isBeforeRunMode"] == data[:strings][:editor][:before_run_workflows][:no_other_workflows]
					span[ng-if="!editorCtrl.addRunWorkflowPopup.parameters.isBeforeRunMode"] == data[:strings][:editor][:after_run_workflows][:no_other_workflows]
				div[ng-if="editorCtrl.availableRunWorkflows().length > 0"]
					p == data[:strings][:editor][:run_workflows][:select]
					ul
						li[ng-repeat="workflow in editorCtrl.availableRunWorkflows()"]
							button[ng-bind="workflow.id" ng-click="editorCtrl.runWorkflowSelected(workflow)"]
		popup[model="editorCtrl.addStepPopup"]
			.popup-body-add-step.vertical-scroll.white
				p == data[:strings][:editor][:steps][:add][:select]
				label[for="add-step-popup-title-filter"] == data[:strings][:editor][:steps][:add][:filter_by_title]
				input#add-step-popup-title-filter[type="text" ng-model="editorCtrl.addStepPopup.parameters.titleFilter" placeholder="#{ data[:strings][:editor][:steps][:add][:title_filter_placeholder] }"]
				button[ng-if="editorCtrl.addStepPopup.parameters.typeTagFilter" ng-click="editorCtrl.addStepPopup.parameters.typeTagFilter = null"] == data[:strings][:editor][:steps][:add][:clear_type_tag_filter]
				fieldset
					legend == data[:strings][:editor][:steps][:add][:filter_by_type_tag]
					.type-tag-filter[ng-repeat="typeTagFilter in editorCtrl.addStepPopup.parameters.availableTypeTagFilters"]
						input[type="radio" ng-model="editorCtrl.addStepPopup.parameters.typeTagFilter" id="{{ typeTagFilter }}" ng-value="typeTagFilter"]
						label[for="{{ typeTagFilter }}" ng-bind="typeTagFilter"]
				p[ng-if="editorCtrl.filteredSteps().length == 0"] == data[:strings][:editor][:steps][:add][:no_steps_matching_filter]
				ul
					li[ng-repeat="step in editorCtrl.filteredSteps()"]
						button[ng-click="editorCtrl.addStep(step)"]
							span.icon[ng-style="{'background-image': (step | normalizedStepIconURL | backgroundImagePropertyValue)}"]
							strong.id[ng-bind="step.id"]
							span.summary[ng-bind="step.summary"]
		popup[model="editorCtrl.insertVariablePopup" ng-controller="InsertVariableController as insertVariableCtrl" ng-init="insertVariableCtrl.popup = editorCtrl.insertVariablePopup"]
			.popup-body-insert-variable.vertical-scroll.white
				h2 == data[:strings][:editor][:inputs][:insert_variable][:select]
				label[for="insert-variable-popup-filter-by-key"] == data[:strings][:editor][:inputs][:insert_variable][:filter_by_key]
				span $
				input[type="text" ng-model="insertVariableCtrl.keyFilter" placeholder="#{ data[:strings][:editor][:inputs][:insert_variable][:key_filter_placeholder] }"]
				div[ng-repeat="variablesOfSource in insertVariableCtrl.insertableVariables"]
					button[ng-repeat="variable in variablesOfSource.variables | filter: { key: insertVariableCtrl.keyFilter }" ng-click="editorCtrl.insertVariable(variable)"]
						span[ng-bind="variable | prettifiedVariableKey"]
						em[ng-bind="variablesOfSource.source.title"]
