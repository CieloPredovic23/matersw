.tab-secrets.menu-content-padding[ng-controller="EnvVarsController as envVarsCtrl" ng-init="envVarsCtrl.configureWithMode('secrets'); envVarsOfSource = envVarsCtrl.envVarsBySource[0]"]
	section.secrets-info
		h2
			span.icon = svg("support")
			span == data[:strings][:env_vars][:secrets][:info][:heading]
			button.toggle[ng-click="envVarsOfSource.shouldShowInfoBox = !envVarsOfSource.shouldShowInfoBox" ng-class="{'open': envVarsOfSource.shouldShowInfoBox}"] = svg("arrow_slim-down")
		ul[ng-if="envVarsOfSource.shouldShowInfoBox"]
			li == data[:strings][:env_vars][:secrets][:info][:store_separate]
			li[ng-if="requestService.mode == 'website'"] == data[:strings][:env_vars][:secrets][:info][:encrypted]
			li[ng-if="requestService.mode == 'website'"] == data[:strings][:env_vars][:secrets][:info][:no_expose]
	section.cardo
		header
			h2 == data[:strings][:env_vars][:secrets][:title]
		article
			ul.env-vars[order-by-drag models="envVarsOfSource.envVars"]
				li[ng-repeat="envVar in envVarsOfSource.envVars"]
					p.progress-indicator[progress-model="envVar.customProperties.progress"]
					form[name="envVarForm" ng-if="!envVar.customProperties.progress.isInProgress" autocomplete="off" autocapitalize="none"]
						.key-value-delete
							input.key[type="text" name="key" ng-model="envVar.key" ng-model-options="{getterSetter: true}" ng-disabled="!envVar.isKeyChangeable" custom-validators="{'key': Variable.isValidKey(envVar.key(), envVarsOfSource.envVars)}" placeholder="#{ data[:strings][:env_vars][:key_placeholder] }" autocomplete="off" autocorrect="off" autocapitalize="none" spellcheck="false" skip-drag-order]
							.value-with-actions.secret
								textarea.value[name="value" msd-elastic ng-model="envVarsCtrl.valueGetterSetterForEnvVar(envVar)" ng-class="{'protected' : requestService.mode == 'website' && envVar.isProtected()}" ng-disabled="!envVar.shouldShowValue" ng-model-options="{getterSetter: true}" ng-trim="false" placeholder="#{ data[:strings][:env_vars][:value_placeholder] }" skip-drag-order]
								.lock[ng-if="requestService.mode == 'website' && !envVar.isKeyChangeable && envVar.isProtected()"] = svg("main/menuicon-secrets")
								eye-checkbox[ng-if="requestService.mode == 'website' && !envVar.isKeyChangeable && !envVar.isProtected()" ng-model="envVarsCtrl.valueVisibilityGetterSetterForEnvVar(envVar)" ng-model-options="{getterSetter: true}" checkbox-id-expression="'secret-env-var-show-value-checkbox-' + $index"]
								.should-show-value[ng-if="requestService.mode == 'website' && !envVar.isKeyChangeable && !envVar.isProtected()"]
									checkbox.small[ng-model="envVarsCtrl.valueVisibilityGetterSetterForEnvVar(envVar)" ng-model-options="{getterSetter: true}" checkbox-id-expression="'env-var-editor-is-expand-checkbox-' + $index"]
									label[for="env-var-editor-is-expand-checkbox-{{ $index }}"] == data[:strings][:env_vars][:actions][:show_value]
							.actions[floating-menu toggle="envVar.customProperties.isMenuVisible"]
								button.dropdown-toggle[ng-click="envVar.customProperties.isMenuVisible = !envVar.customProperties.isMenuVisible"] = svg("three-horizontal-dots")
								.dropdown[ng-if="envVar.customProperties.isMenuVisible"]
									button.dropdown-option.make-it-protected[ng-if="requestService.mode == 'website' && !envVar.isProtected()" ng-click="envVarsCtrl.makeEnvVarProtected(envVar)"] == data[:strings][:env_vars][:actions][:make_it_protected]
									button.dropdown-option.delete-env-var[ng-click="envVarsCtrl.removeEnvVarFromEnvVars(envVar, envVarsOfSource.envVars)"] == data[:strings][:env_vars][:actions][:delete_env_var]
						.env-var-settings
							.is-expand
								checkbox.small[name="isExpand" ng-model="envVar.isExpand" ng-model-options="{getterSetter: true}" ng-disabled="envVar.isProtected()" checkbox-id-expression="'env-var-editor-is-expand-checkbox-' + $index"]
								label[for="env-var-editor-is-expand-checkbox-{{ $index }}"] == data[:strings][:env_vars][:replace_variables_label]
							.is-expose-with-popover
								.is-expose[trigger-popover="#{ data[:strings][:env_vars][:expose_for_pr_popover_content] }"]
									checkbox.small[name="isExpose" ng-model="envVar.isExpose" ng-model-options="{getterSetter: true}" ng-disabled="envVar.isProtected()" checkbox-id-expression="'env-var-editor-is-expose-checkbox-' + $index"]
									label[for="env-var-editor-is-expose-checkbox-{{ $index }}"] == data[:strings][:env_vars][:expose_for_pr_label]
						.actions.small
							button.option.make-it-protected.rebo.hollow.grey[ng-if="requestService.mode == 'website' && !envVar.isProtected()" ng-click="envVarsCtrl.makeEnvVarProtected(envVar)"] == data[:strings][:env_vars][:actions][:make_it_protected]
							button.option.delete-env-var.rebo.danger[ng-click="envVarsCtrl.removeEnvVarFromEnvVars(envVar, envVarsOfSource.envVars)"] == data[:strings][:env_vars][:actions][:delete_env_var]
						p.notification.warning[ng-if="envVarForm.key.$invalid && !envVarForm.key.$pristine" ng-bind="envVarsCtrl.envVarValidationWarning(envVar, envVarsOfSource.envVars)"]
			button.add.rebo.green[ng-click="envVarsCtrl.addToEnvVars(envVarsOfSource.envVars)"] == data[:strings][:env_vars][:add_new]
