.tab-stack.menu-content-padding[ng-controller="StackController as stackCtrl" ng-init="stackCtrl.init()"]
	section.cardo.stack-settings.default
		header
			h2 == data[:strings][:stack][:default_stack_settings][:header_title]
			p.header-description == replaced_string(data[:strings][:stack][:default_stack_settings][:header_description], [data[:routes][:other][:bitrise_available_stacks]])
		article
			section
				.max-width-wrapper
					p.notification.warning.stack-error[ng-if="Stack.all.indexOf(appService.stack) == -1"] == data[:strings][:stack][:invalid_stack]
					p.notification.warning.stack-error[ng-if="Stack.all.indexOf(appService.stack) != -1 && appService.availableStacks().indexOf(appService.stack) == -1"] == data[:strings][:stack][:incompatible_stack]
					.stack-selector-wrapper
						select.stack-selector[ng-model="appService.stack" ng-options="stackCtrl.stackOptionTitle(stack) for stack in stackCtrl.defaultStackOptions()" ng-change="appService.dockerImage = stackCtrl.defaultDockerImagesByStackIDs[stack.id] !== undefined ? '' : null"]
					.stack-info
						.info-badge-wrapper  == svg("info_badge")
						.stack-info-text
							.stack-description[sanitized-markdown="appService.stack.description"]
							a.stack-info-link[ng-href="{{ appService.stack.descriptionURL }}" target="_blank"] == data[:strings][:stack][:more_info_about]
					.docker-image-settings[ng-if="stackCtrl.defaultDockerImagesByStackIDs[appService.stack.id] !== undefined"]
						label.docker-image-label == data[:strings][:stack][:docker_image_to_use]
						input.docker-image[type="text" ng-model="appService.dockerImage" ng-model-options="{getterSetter: true}" placeholder="{{ stackCtrl.defaultDockerImagesByStackIDs[appService.stack.id] }}"]
					.den-tag-settings[ng-if="appService.stack.id == 'self-hosted'"]
						label.den-tag-label == data[:strings][:stack][:den_tags_label]
						input.den-tags[type="text" ng-model="appService.denTags" ng-model-options="{getterSetter: true}" placeholder="#{ data[:strings][:stack][:den_tags_placeholder] }"]
			section.machine-type-settings[ng-if="appService.appDetails.isMachineTypeSelectorAvailable"]
				h4.machine-type-header  == data[:strings][:machine_type][:workflow_specific_settings][:header_title]
				.machine-types
					.machine-type-wrapper[ng-repeat="machineType in stackCtrl.defaultMachineTypeOptions() track by machineType.id" ng-click="machineType.isAvailable && machineType.id !== appService.defaultMachineType.id ? stackCtrl.setNewDefaultMachineType(machineType) : ''" ng-class="{'selected': machineType.id == appService.defaultMachineType.id, 'not-available': !machineType.isAvailable}" class="{{ machineType.stackType }}"]
						.machine-type-icon[ng-if="machineType.cssClass == 'elite-xl'"]  == svg("elite_xl-machine-type-icon")
						.machine-type-icon[ng-if="machineType.cssClass == 'elite'"]  == svg("elite-machine-type-icon")
						.machine-type-icon[ng-if="machineType.cssClass == 'standard'"]  == svg("standard-machine-type-icon")
						.machine-type-data
							.top
								span.icon-and-name-and-note
									span.stack-type-icon[ng-if="machineType.stackType == 'osx'"]  == svg("osx-stack-type-icon")
									span.stack-type-icon[ng-if="machineType.stackType == 'linux'"]  == svg("ubuntu-stack-type-icon")
									span.name[ng-bind="machineType.name"]
									span.note[ng-if="machineType.note" ng-bind="machineType.note"]
								span.credit-per-min[ng-if='0 == 1']
									span.value[ng-bind="machineType.creditPerMin"]
									span.unit< credit/min
							.separator
							.bottom
								span.cpu
									span.count[ng-bind="machineType.cpuCount"]
									span.at @
									span.description[ng-bind="machineType.cpuDescription"]
								span.ram[ng-bind="machineType.ram"]
					/ a.machine-type-info-link[ng-href="{{ cpuDescriptionURL }}" target="_blank"] == data[:strings][:machine_type][:learn_more_about]
	section.cardo.stack-settings.workflow-specific
		header
			h2 == data[:strings][:stack][:workflow_specific_settings][:header_title]
			p == replaced_string(data[:strings][:stack][:workflow_specific_settings][:header_description], [data[:routes][:other][:bitrise_available_stacks]])
		article
			section.workflow[ng-repeat="workflow in stackCtrl.workflows"]
				.max-width-wrapper
					h4.workflow-header
						strong.workflow-id[ng-bind="workflow.id"]
						span == data[:strings][:stack][:workflow_id_postfix]
					p.notification.warning.stack-error[ng-if="Stack.all.indexOf(stackCtrl.stackGetterSetterForWorkflow(workflow, true)()) == -1"] == data[:strings][:stack][:invalid_stack]
					p.notification.warning.stack-error[ng-if="Stack.all.indexOf(stackCtrl.stackGetterSetterForWorkflow(workflow, true)()) != -1 && appService.availableStacks().indexOf(stackCtrl.stackGetterSetterForWorkflow(workflow, true)()) == -1"] == data[:strings][:stack][:incompatible_stack]
					.stack-selector-wrapper[ng-class="{'default': stackCtrl.stackGetterSetterForWorkflow(workflow)() === null}"]
						select.stack-selector[ng-model="stackCtrl.stackGetterSetterForWorkflow(workflow)" ng-model-options="{getterSetter: true}" ng-options="stackCtrl.stackOptionTitle(stack) for stack in [null].concat(appService.availableStacks())"]
						label.default-stack == data[:strings][:stack][:default]
					.stack-info
						.info-badge-wrapper  == svg("info_badge")
						.stack-info-text
							.stack-description[sanitized-markdown="stackCtrl.stackGetterSetterForWorkflow(workflow, true)().description"]
							a.stack-info-link[ng-href="{{ stackCtrl.stackGetterSetterForWorkflow(workflow, true)().descriptionURL }}" target="_blank"] == data[:strings][:stack][:more_info_about]
				.machine-type-settings[ng-if="appService.appDetails.isMachineTypeSelectorAvailable"]
					h4.machine-type-header  == data[:strings][:machine_type][:workflow_specific_settings][:header_title]
					.machine-types
						.machine-type-wrapper[ng-repeat="machineType in appService.availableMachineTypes(workflow)" ng-click="machineType.isAvailable && machineType.id != stackCtrl.selectedWorkflowSpecificMachineType(workflow).id ? stackCtrl.setNewDefaultMachineType(machineType, workflow) : ''" ng-class="{'selected': machineType.id == stackCtrl.selectedWorkflowSpecificMachineType(workflow).id, 'not-available': !machineType.isAvailable}" class="{{ machineType.stackType }}"]
							.machine-type-icon[ng-if="machineType.cssClass == 'elite-xl'"]  == svg("elite_xl-machine-type-icon")
							.machine-type-icon[ng-if="machineType.cssClass == 'elite'"]  == svg("elite-machine-type-icon")
							.machine-type-icon[ng-if="machineType.cssClass == 'standard'"]  == svg("standard-machine-type-icon")
							.machine-type-data
								.top
									span.icon-and-name-and-note
										span.stack-type-icon[ng-if="machineType.stackType == 'osx'"]  == svg("osx-stack-type-icon")
										span.stack-type-icon[ng-if="machineType.stackType == 'linux'"]  == svg("ubuntu-stack-type-icon")
										span.name[ng-bind="machineType.name"]
										span.note[ng-if="machineType.note" ng-bind="machineType.note"]
									span.credit-per-min[ng-if='0 == 1']
										span.value[ng-bind="machineType.creditPerMin"]
										span.unit< credit/min
								.separator
								.bottom
									span.cpu
										span.count[ng-bind="machineType.cpuCount"]
										span.at @
										span.description[ng-bind="machineType.cpuDescription"]
									span.ram[ng-bind="machineType.ram"]
						/ a.machine-type-info-link[ng-href="{{ cpuDescriptionURL }}" target="_blank"] == data[:strings][:machine_type][:learn_more_about]
