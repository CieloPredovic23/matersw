.tab-workflows[ng-controller="WorkflowsController as workflowsCtrl"]
	p.progress-indicator[progress-model="workflowsCtrl.configureWorkflowsProgress"]
	div[ng-if="workflowsCtrl.configureWorkflowsProgress.isIdle && workflowsCtrl.selectedWorkflow"]
		ul.run-workflows[ng-repeat="runWorkflows in [workflowsCtrl.selectedWorkflow.workflowConfig.before_run, workflowsCtrl.selectedWorkflow.workflowConfig.after_run] track by $index" ng-if="runWorkflows.length > 0" ng-class="$first ? 'before-run' : 'after-run'"]
			li[ng-repeat="workflowID in runWorkflows track by $index + '-' + workflowID"]
				button[ng-click="workflowsCtrl.workflowSelectedWithID(workflowID)"]
					span.uppercase[ng-bind="workflowID"]
					span< == data[:strings][:workflows][:run_workflows][:postfix]
		section.manage-workflows
			select[ng-options="workflow.id for workflow in workflowsCtrl.workflows" ng-model="workflowsCtrl.workflowSelected" ng-model-options="{getterSetter: true}"]
			button[ng-click="workflowsCtrl.addWorkflowSelected()"] == data[:strings][:workflows][:add_workflow][:action]
			button[ng-click="workflowsCtrl.manageWorkflowEnvVarsSelected()"] == data[:strings][:workflows][:manage_workflow_env_vars]
			button[ng-click="workflowsCtrl.addRunWorkflowSelected(false)"] == data[:strings][:workflows][:add_workflow_after]
			button[ng-click="workflowsCtrl.addRunWorkflowSelected(true)"] == data[:strings][:workflows][:add_workflow_before]
			button[ng-click="workflowsCtrl.deleteWorkflowSelected()" ng-disabled="workflowsCtrl.workflows.length == 1"] == data[:strings][:workflows][:delete_workflow]
		section.manage-workflow
			ul.steps[order-by-drag models="workflowsCtrl.selectedWorkflow.workflowConfig.steps" draggable-selector="':not(.pseudo-step)'"]
				li[ng-repeat="step in workflowsCtrl.selectedWorkflowSteps" ng-class="{'selected': step == workflowsCtrl.selectedStep, 'pseudo-step': step.type() == 'pseudo-step'}"]
					button.add-step[ng-click="workflowsCtrl.addStepSelectedBeforeStep(step)" ng-if="step != workflowsCtrl.buildEnvironmentPreparePseudoStep"] = svg("plus")
					button.step[ng-click="workflowsCtrl.stepSelected(step)" tabindex="{{ step == workflowsCtrl.selectedStep ? '-1' : '0' }}"]
						span.icon[ng-style="step.type() == 'pseudo-step' ? {} : {'background-image': (step | normalizedStepIconURL | backgroundImagePropertyValue)}"]
						span.info
							strong
								span.title[ng-bind="step.displayName()"]
								span.verified[ng-if="step.isVerified()"] = svg("step/badge-verified")
							em.version[ng-if="step.version !== undefined" ng-bind="step.version"]
			aside.step-details[ng-if="workflowsCtrl.selectedStep" ng-controller="StepController as stepCtrl" ng-init="stepCtrl.configureWithStep(workflowsCtrl.selectedStep)"]
				div.pseudo-step-details[ng-if="stepCtrl.step.type() == 'pseudo-step'"]
					h2.title[ng-bind="stepCtrl.step.displayName()"]
					/ TODO: Add pseudo-step content here
				p.notification[ng-if="stepCtrl.step.type() == 'non-bitrise-steplib-step'"] == data[:strings][:workflows][:steps][:non_bitrise_steplib_step_info]
				p.notification.error[ng-if="stepCtrl.step.type() == 'errorous-step'"] == data[:strings][:workflows][:steps][:cvs_error]
				div.bitrise-steplib-step-details[ng-if="stepCtrl.step.type() == 'bitrise-steplib-step'"]
					header.manage-step
						.title[ng-if="!stepCtrl.renamedStep"]
							button.rename[ng-bind="stepCtrl.step.title()" ng-click="stepCtrl.renameStepSelected()"]
							strong.verified[ng-if="stepCtrl.step.isVerified()"] == data[:strings][:workflows][:steps][:verified]
						.rename-title[ng-if="stepCtrl.renamedStep"]
							input[type="text" ng-model="stepCtrl.renamedStepTitle"]
							button.ok[ng-click="stepCtrl.renameStepConfirmed()"] == data[:strings][:workflows][:steps][:rename_confirm]
						aside
							button.clone[ng-click="workflowsCtrl.cloneStepSelected()"] = svg("step/clone")
							a.source[href="{{ stepCtrl.step.sourceURL() }}" target="_blank" ng-class="stepCtrl.step | stepSourceCSSClass"] = svg("logo/github")
							button.delete[ng-click="workflowsCtrl.deleteStepSelected()"] = svg("trash")
					section.description[ng-if="stepCtrl.step.description() !== undefined && stepCtrl.step.description().length > 0" ng-class="{'open': stepCtrl.shouldShowDescription}"]
						span.icon
							= svg("step/description")
						p[ng-bind-html="stepCtrl.step.description()"]
						span.toggle-visibility
							button[ng-click="stepCtrl.shouldShowDescription = !stepCtrl.shouldShowDescription"]
							= svg("arrow-down")
					section.version
						span.icon
						label[for="selected-step-version-select"] == data[:strings][:workflows][:steps][:version]
						select#selected-step-version-select[ng-options="(version ? version : '#{ data[:strings][:workflows][:steps][:always_latest] }') for version in [null].concat(bitriseSteplibService.versionsOfStep(stepCtrl.step))" ng-model="stepCtrl.requestedVersion" ng-change="bitriseSteplibService.changeStepToVersion(stepCtrl.step, stepCtrl.requestedVersion)"]
					section.always-run[ng-if="stepCtrl.step.isAlwaysRun() !== undefined"]
						span.icon
							= svg("step/is_always_run")
						label[for="selected-step-is-always-run-checkbox"] == data[:strings][:workflows][:steps][:is_always_run]
						checkbox[ng-model="stepCtrl.step.isAlwaysRun" ng-model-options="{getterSetter: true}" checkbox-id-expression="'selected-step-is-always-run-checkbox'"]
					section.inputs[ng-if="stepCtrl.step.defaultStepConfig.inputs.length > 0"]
						h3 == data[:strings][:workflows][:inputs][:header]
						ul
							li[ng-repeat="defaultInputConfig in stepCtrl.step.defaultStepConfig.inputs" ng-controller="InputController as inputCtrl" ng-init="inputCtrl.init(stepCtrl.step, defaultInputConfig); id = inputCtrl.input.key()" ng-class="{'selected': inputCtrl.input == stepCtrl.selectedInput}"]
								.input-info
									h4
										span.title[ng-bind="inputCtrl.input.title()"]
										button.insert-variable[ng-click="inputCtrl.insertVariableSelected()" ng-if="inputCtrl.input == stepCtrl.selectedInput && !inputCtrl.input.valueOptions()"] == data[:strings][:workflows][:inputs][:insert_variable][:action]
									strong.value[ng-bind="inputCtrl.input.value() ? inputCtrl.input.value() : '#{ data[:strings][:workflows][:inputs][:empty_value] }'" ng-if="inputCtrl.input != stepCtrl.selectedInput"]
									.manage-input[ng-if="inputCtrl.input == stepCtrl.selectedInput"]
										textarea[ng-model="inputCtrl.input.value" ng-model-options="{getterSetter: true}" ng-blur="inputCtrl.inputValueBlurred($event)" ng-if="!inputCtrl.input.valueOptions()" placeholder="#{ data[:strings][:workflows][:inputs][:value_placeholder] }"]
										select[ng-model="inputCtrl.input.value" ng-model-options="{getterSetter: true}" ng-if="inputCtrl.input.valueOptions()" ng-options="valueOption for valueOption in inputCtrl.input.valueOptions()"]
										.is-expand
											checkbox[ng-model="inputCtrl.input.isExpand" ng-model-options="{getterSetter: true}" checkbox-id-expression="id"]
											label[for="{{ id }}"]
												strong == data[:strings][:workflows][:inputs][:replace_variables_in_input]
												em == string_with_urls(data[:strings][:workflows][:inputs][:replace_variables_in_input_learn_more], [data[:routes][:devcenter][:step_inputs]])
								button.change[ng-click="stepCtrl.inputSelected(inputCtrl.input)"]
									span == data[:strings][:workflows][:inputs][:change]
									= svg("arrow-down")
					section.outputs
						h3 == data[:strings][:workflows][:outputs][:header]
						p.no-outputs[ng-if="!stepCtrl.step.defaultStepConfig.outputs"] == data[:strings][:workflows][:outputs][:no_outputs]
						table[ng-if="stepCtrl.step.defaultStepConfig.outputs"]
							tr[ng-repeat="defaultOutputConfig in stepCtrl.step.defaultStepConfig.outputs" ng-init="output = stepCtrl.outputFromDefaultOutputConfig(defaultOutputConfig);"]
								td.key[ng-bind="output | prettifiedVariableKey"]
								td.description[ng-bind="output.description() ? output.description() : '#{ data[:strings][:workflows][:outputs][:no_description] }'"]
				button.delete-step[ng-click="workflowsCtrl.deleteStepSelected()" ng-bind="stepCtrl.deleteStepButtonText()"]
		popup[model="workflowsCtrl.workflowEnvVarsPopup"]
			.popup-body-manage-workflow-env-vars.vertical-scroll.white
				p.progress-indicator[progress-model="workflowsCtrl.workflowEnvVarsPopup.parameters.templateLoadProgress"]
				ng-include[ng-if="workflowsCtrl.workflowEnvVarsPopup.isVisible" src="'#{ template_path(data[:routes][:templates][:env_var_editor]) }'" onload="workflowsCtrl.workflowEnvVarsPopup.parameters.templateLoadProgress.success()"]
		popup[model="workflowsCtrl.addWorkflowPopup"]
			.popup-body-add-workflow.vertical-scroll.white
				p == data[:strings][:workflows][:add_workflow][:specify_id]
				input[type="text" ng-model="workflowsCtrl.addWorkflowPopup.parameters.workflowID"]
				p
					em == data[:strings][:workflows][:add_workflow][:new_workflow_info]
				button[ng-click="workflowsCtrl.addWorkflow()" ng-disabled="workflowsCtrl.addWorkflowPopup.parameters.workflowID.length == 0 || (workflowsCtrl.workflows | filter: { id: workflowsCtrl.addWorkflowPopup.parameters.workflowID } : true).length > 0"] == data[:strings][:workflows][:add_workflow][:action]
		popup[model="workflowsCtrl.addRunWorkflowPopup"]
			.popup-body-add-run-workflow.vertical-scroll.white
				p[ng-if="workflowsCtrl.availableRunWorkflows().length == 0"]
					span[ng-if="workflowsCtrl.addRunWorkflowPopup.parameters.isBeforeRunMode"] == data[:strings][:workflows][:before_run_workflows][:no_other_workflows]
					span[ng-if="!workflowsCtrl.addRunWorkflowPopup.parameters.isBeforeRunMode"] == data[:strings][:workflows][:after_run_workflows][:no_other_workflows]
				div[ng-if="workflowsCtrl.availableRunWorkflows().length > 0"]
					p == data[:strings][:workflows][:run_workflows][:select]
					ul
						li[ng-repeat="workflow in workflowsCtrl.availableRunWorkflows()"]
							button[ng-bind="workflow.id" ng-click="workflowsCtrl.runWorkflowSelected(workflow)"]
popup[model="addStepCtrl.popup" ng-controller="AddStepController as addStepCtrl"]
	.popup-body-add-step.vertical-scroll.white
		p == data[:strings][:workflows][:steps][:add][:select]
		label[for="add-step-popup-title-filter"] == data[:strings][:workflows][:steps][:add][:filter_by_title]
		input#add-step-popup-title-filter[type="text" ng-model="addStepCtrl.titleFilter" placeholder="#{ data[:strings][:workflows][:steps][:add][:title_filter_placeholder] }"]
		button[ng-if="addStepCtrl.typeTagFilter" ng-click="addStepCtrl.typeTagFilter = null"] == data[:strings][:workflows][:steps][:add][:clear_type_tag_filter]
		fieldset
			legend == data[:strings][:workflows][:steps][:add][:filter_by_type_tag]
			.type-tag-filter[ng-repeat="typeTagFilter in addStepCtrl.availableTypeTagFilters"]
				input[type="radio" ng-model="addStepCtrl.typeTagFilter" id="{{ typeTagFilter }}" ng-value="typeTagFilter"]
				label[for="{{ typeTagFilter }}" ng-bind="typeTagFilter"]
		p[ng-if="addStepCtrl.filteredSteps().length == 0"] == data[:strings][:workflows][:steps][:add][:no_steps_matching_filter]
		ul
			li[ng-repeat="step in addStepCtrl.filteredSteps()"]
				button[ng-click="addStepCtrl.addStep(step)"]
					span.icon[ng-style="{'background-image': (step | normalizedStepIconURL | backgroundImagePropertyValue)}"]
					strong.id[ng-bind="step.id"]
					span.summary[ng-bind="step.summary()"]
popup[model="insertVariableCtrl.popup" ng-controller="InsertVariableController as insertVariableCtrl"]
	.popup-body-insert-variable.vertical-scroll.white
		h2 == data[:strings][:workflows][:inputs][:insert_variable][:select]
		label[for="insert-variable-popup-filter-by-key"] == data[:strings][:workflows][:inputs][:insert_variable][:filter_by_key]
		span $
		input[type="text" ng-model="insertVariableCtrl.keyFilter" placeholder="#{ data[:strings][:workflows][:inputs][:insert_variable][:key_filter_placeholder] }"]
		div[ng-repeat="variablesOfSource in insertVariableCtrl.insertableVariables"]
			button[ng-repeat="variable in variablesOfSource.variables | variablesfilteredByKey: insertVariableCtrl.keyFilter" ng-click="insertVariableCtrl.insertVariable(variable)"]
				span[ng-bind="variable | prettifiedVariableKey"]
				em[ng-bind="variablesOfSource.source.title"]
