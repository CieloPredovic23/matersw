.tab-workflows[ng-controller="WorkflowsController as workflowsCtrl" ng-init="workflowsCtrl.init()"]
  p.progress-indicator[progress-model="workflowsCtrl.loadWorkflowsProgress"]
  .content[ng-if="workflowsCtrl.loadWorkflowsProgress.isIdle"]
    div[ng-if="workflowsCtrl.selectedWorkflowChain.length === 0" ng-style="{ padding: '32px'}"]
      r-workflow-empty-state[
        on-add-workflow="workflowsCtrl.openAddWorkflowPopupWithDigest"
      ]
    section.manage-workflows[ng-if="workflowsCtrl.selectedWorkflowChain.length > 0"]
      r-workflow-main-toolbar.react-toolbar[
        default-branch="workflowsCtrl.defaultBranch"
        can-run-workflow="workflowsCtrl.canRunWorkflow"
        is-run-workflow-disabled="mainCtrl.hasUnsavedChanges()"
        selected-workflow="workflowsCtrl.selectedWorkflow"
        workflows="workflowsCtrl.workflows"
        select-workflow="workflowsCtrl.selectWorkflowWithDigest"
        rename-workflow-confirmed="workflowsCtrl.confirmRenameWorkflowWithDigest"
        on-add-new-workflow="workflowsCtrl.openAddWorkflowPopupWithDigest"
        on-insert-before-workflow="workflowsCtrl.addRunWorkflowBeforeSelectedWithDigest"
        on-insert-after-workflow="workflowsCtrl.addRunWorkflowAfterSelectedWithDigest"
        on-rearrange-workflow="workflowsCtrl.openRearrangeWorkflowsPopupWithDigest"
        on-delete-selected-workflow="workflowsCtrl.deleteWorkflowSelectedWithDigest"
        on-run-workflow="workflowsCtrl.runWorkflowWithDigest"
        unique-step-count="workflowsCtrl.uniqueStepCount"
        unique-step-limit="workflowsCtrl.uniqueStepLimit"
        organization-slug="appService.appDetails.ownerData.slug"
      ]
    .workflows[ng-init="workflowsCtrl.getAvailableHeightForWorkflows()" ng-if="workflowsCtrl.selectedWorkflowChain.length > 0"]
      .workflows-container[ng-show="workflowsCtrl.shouldShowWorkflowsContent" ng-style="{'max-height': workflowsCtrl.workflowsHeight + 'px', 'min-height': workflowsCtrl.workflowsHeight + 'px'}"]
        .steps-container
          section.workflow[ng-repeat="workflowChainLink in workflowsCtrl.selectedWorkflowChain" workflow-index-setter="{{ workflowIndex = $index }}" ng-init="workflow = workflowChainLink.workflow" ng-class="{'edited': workflowIndex == workflowsCtrl.editedWorkflowIndex, 'selected': workflow == workflowsCtrl.selectedWorkflow}" ng-attr-scroll-target="{{ workflowIndex == workflowsCtrl.editedWorkflowIndex ? '' : undefined }}" scroll-padding="30" id="steps-container"]
            header.workflow-header.with-flow-decoration
              .header-info
                h2
                  button.edit[ng-click="workflowsCtrl.editWorkflowAtIndex(workflowIndex); workflowsCtrl.deselectStep()"]
                  span.icons-and-name
                    span.icon[ng-if="workflowChainLink.isBeforeRunWorkflow"] == svg("workflow/icon-before_run")
                    span.icon[ng-if="workflowChainLink.isAfterRunWorkflow"] == svg("workflow/icon-after_run")
                    span.workflow-name[ng-bind="workflow.id"]
                    span.edit-icon == svg("code")
                  button.remove[ng-if="workflowChainLink.selectedWorkflowBeforeRunWorkflowIndex != -1 || workflowChainLink.selectedWorkflowAfterRunWorkflowIndex != -1" ng-click="workflowsCtrl.deleteBeforeAfterWorkflowAtWorkflowChainLink(workflowChainLink)"] == svg("cross")
            article
              ul.steps
                ul[order-by-drag models="workflow.steps"]
                  li[ng-repeat="step in workflow.steps" step-index-setter="{{ stepIndex = $index }}" ng-class="{'selected': step == workflowsCtrl.selectedStep && workflowIndex == workflowsCtrl.editedWorkflowIndex}" ng-mousedown="workflowsCtrl.stepOrderWorkflow = workflow"]
                    button.add-step[ng-click="workflowsCtrl.addStepSelectedAtIndex(stepIndex, workflowIndex)" ng-disabled="workflowIndex != workflowsCtrl.editedWorkflowIndex" skip-drag-order]
                    .step-actions
                      r-step-item[
                        workflow-index="workflowIndex"
                        step="step"
                        display-name="step.displayName()"
                        version="step.requestedVersion()"
                        has-version-update="workflowsCtrl.checkStepVersionUpdate(step)"
                        is-selected="step == workflowsCtrl.selectedStep && workflowIndex == workflowsCtrl.editedWorkflowIndex"
                        on-selected="workflowsCtrl.stepSelected"]
                      button.update-step[ng-if="workflowsCtrl.checkStepVersionUpdate(step)" ng-click="workflowsCtrl.changeStepToVersion(step, null)"]
                li
                  button.add-step[ng-click="workflowsCtrl.addStepSelectedAtIndex(workflow.steps.length, workflowIndex)" ng-disabled="workflowIndex != workflowsCtrl.editedWorkflowIndex && workflow.steps.length > 0"]
        .step-edit-container
          .[ng-if="workflowsCtrl.selectedStep" ng-controller="InsertVariableController as insertVariableCtrl"]
            .[ng-if="workflowsCtrl.selectedStep" ng-controller="InsertVariableController as insertSecretCtrl"]
              r-step-config[
                tab-id="workflowsCtrl.tabId"
                step="workflowsCtrl.selectedStep"
                secrets="insertSecretCtrl.insertableVariablesForReact"
                environment-variables="insertVariableCtrl.insertableVariablesForReact"
                resolved-version="workflowsCtrl.selectedStepResolvedVersion"
                has-version-update="workflowsCtrl.checkStepVersionUpdate(workflowsCtrl.selectedStep)"
                versions-with-remarks="workflowsCtrl.selectedStepVersionsWithRemarks"
                input-categories="workflowsCtrl.inputCategoriesOfSelectedStep"
                output-variables="workflowsCtrl.outputVariables"
                on-change-tab-id="workflowsCtrl.setTabId"
                on-clone="workflowsCtrl.cloneSelectedStep"
                on-remove="workflowsCtrl.deleteSelectedStep"
                on-change="workflowsCtrl.handleSelectedStepChanges"
                on-create-secret="workflowsCtrl.saveSecretFromReact"
                on-load-secrets="insertSecretCtrl.initForReact(requestService.mode == 'website' ? ['from_code_signing_files', 'from_secrets'] : ['from_secrets'], workflowsCtrl.workflows, workflowsCtrl.selectedWorkflow, workflowsCtrl.selectedStep)"
                on-create-env-var="workflowsCtrl.saveEnvVarFromReact"
                on-load-env-vars="insertVariableCtrl.initForReact(null, workflowsCtrl.workflows, workflowsCtrl.selectedWorkflow, workflowsCtrl.selectedStep)"
                secrets-write-new="mainCtrl.appSecretsWriteNew"
                app-slug="appService.appDetails.slug"
              ]
          section.workflow[ng-if='!workflowsCtrl.selectedStep && workflowsCtrl.editedWorkflow']
            r-workflow-config-panel[
              ng-if="mainCtrl.enableNewWfeWorkflowConfigPanel"
              default-values="workflowsCtrl.editedWorkflowConfigForReact"
              on-change="workflowsCtrl.editedWorkflowConfigForReactChanged"
            ]
            header.workflow-header[ng-if="!mainCtrl.enableNewWfeWorkflowConfigPanel"]
              .header-info
                .stack[ng-if="requestService.mode == 'website'"]
                  .icon == svg("layers")
                  .name[ng-bind="workflowsCtrl.stackForWorkflow(workflowsCtrl.editedWorkflow, true).name"]
                  label.default-badge[ng-if="workflowsCtrl.stackForWorkflow(workflowsCtrl.editedWorkflow) === null"] == data[:strings][:stack][:default]
            article[ng-if="!mainCtrl.enableNewWfeWorkflowConfigPanel"]
              aside[workflow-description="workflowsCtrl.editedWorkflow"]
  popup[model="workflowsCtrl.addWorkflowPopup"]
    form.popup-body.snowflake#add-workflow-popup-body.vertical-scroll[ng-submit="workflowsCtrl.addWorkflow()" method="POST"]
      header == data[:strings][:workflows][:add_workflow][:add_new_workflow]
      article
        input[type="text" ng-model="workflowsCtrl.addWorkflowID" placeholder="#{ data[:strings][:workflows][:add_workflow][:workflow_name_placeholder] }"]
        label[for="add-workflow-popup-based-on-select"] == data[:strings][:workflows][:add_workflow][:based_on]
        select#add-workflow-popup-based-on-select[ng-model="workflowsCtrl.addWorkflowSourceWorkflow" ng-options="(workflow ? workflow.id : '#{ data[:strings][:workflows][:add_workflow][:empty_workflow] }') for workflow in [null].concat(workflowsCtrl.workflows)"]
      footer
        input.rebo.big.purple[type="submit" ng-disabled="!Workflow.isValidID(workflowsCtrl.addWorkflowID) || (workflowsCtrl.workflows | filter: { id: workflowsCtrl.addWorkflowID } : true).length > 0" value="#{ data[:strings][:workflows][:add_workflow][:done] }" data-e2e-tag="confirm-button"]
  popup[model="workflowsCtrl.addRunWorkflowPopup"]
    .popup-body.snowflake#add-run-workflow-popup-body.vertical-scroll
      header
        span[ng-if="workflowsCtrl.addRunWorkflowMode == 'before'"] == data[:strings][:workflows][:add_run_workflow][:before_run][:action_prefix]
        span[ng-if="workflowsCtrl.addRunWorkflowMode == 'after'"] == data[:strings][:workflows][:add_run_workflow][:after_run][:action_prefix]
        strong<[ng-bind="workflowsCtrl.selectedWorkflow.id"]
      article.vertical-scroll
        ul.workflow-chain
          ul.workflow-subchain.before-run[ng-repeat="workflowSubChain in (workflowsCtrl.addRunWorkflowChainHierarchy | filter: {type: 'before-run'})"]
            li[ng-repeat="workflow in workflowSubChain.workflowChain track by $index + '-' + workflow.id" ng-bind="workflow.id"]
          select.run-workflow-selector.mak[ng-options="workflow.id for workflow in workflowsCtrl.availableRunWorkflowsToAdd()" ng-model="workflowsCtrl.runWorkflowToAdd" placeholder="#{ data[:strings][:workflows][:add_run_workflow][:placeholder] }" ng-class="{'before-run': workflowsCtrl.addRunWorkflowMode == 'before', 'after-run': workflowsCtrl.addRunWorkflowMode == 'after'}"]
          ul.workflow-subchain.selected
            li[ng-bind="workflowsCtrl.selectedWorkflow.id"]
          ul.workflow-subchain.after-run[ng-repeat="workflowSubChain in (workflowsCtrl.addRunWorkflowChainHierarchy | filter: {type: 'after-run'})"]
            li[ng-repeat="workflow in workflowSubChain.workflowChain track by $index + '-' + workflow.id" ng-bind="workflow.id"]
      footer
        button.done[ng-click="workflowsCtrl.addRunWorkflow()" ng-disabled="!workflowsCtrl.runWorkflowToAdd" data-e2e-tag="confirm-button"] == data[:strings][:workflows][:add_run_workflow][:done]
        button.cancel[ng-click="workflowsCtrl.addRunWorkflowPopup.isVisible = false" data-e2e-tag="cancel-button"] == data[:strings][:workflows][:add_run_workflow][:cancel]
  popup[model="workflowsCtrl.rearrangeWorkflowsPopup"]
    .popup-body.snowflake#rearrange-workflow-chain-popup-body
      header == data[:strings][:workflows][:rearrange][:drag_n_drop]
      article.vertical-scroll
        ul.workflow-chain[order-by-drag models="workflowsCtrl.rearrangeWorkflowsChainHierarchy"]
          ul.workflow-subchain[ng-repeat="workflowSubChain in workflowsCtrl.rearrangeWorkflowsChainHierarchy" ng-class="workflowSubChain.cssClass"]
            li[ng-repeat="workflow in workflowSubChain.workflowChain track by $index + '_' + workflow.id" ng-bind="workflow.id"]
      footer
        button.done[ng-click="workflowsCtrl.rearrangeWorkflowsFinished()"] == data[:strings][:workflows][:rearrange][:done]
        button.cancel[ng-click="workflowsCtrl.rearrangeWorkflowsPopup.isVisible = false"] == data[:strings][:workflows][:rearrange][:cancel]
  add-step-sidebar
  r-step-drawer[
    is-open='workflowsCtrl.showReactStepDrawer'
    on-close='workflowsCtrl.closeReactStepDrawer'
    allowed-step-ids='workflowsCtrl.allowedStepIds'
    on-step-selected='workflowsCtrl.handleInsertStepAtIndexFromReact'
  ]
  r-version-change-dialog[
    is-open='workflowsCtrl.selectedStepVersionChangeDialogProps'
    on-close='workflowsCtrl.closeReactVersionChangeDialog'
    is-major-change='workflowsCtrl.selectedStepVersionChangeDialogProps.isMajorChange'
    removed-inputs='workflowsCtrl.selectedStepVersionChangeDialogProps.removedInputs'
    new-inputs='workflowsCtrl.selectedStepVersionChangeDialogProps.newInputs'
    release-notes-url='workflowsCtrl.selectedStepVersionChangeDialogProps.releaseNotesUrl'
  ]
